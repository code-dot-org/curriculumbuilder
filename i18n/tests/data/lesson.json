{
    "2016/hour-of-code-simple-encryption": {
        "cs_content": "“Encryption” is a process for transforming a message so that the original is “hidden” from anyone who is not the intended recipient. Encryption is not just for the military and spies anymore. We use encryption everyday on the Internet, primarily to conduct commercial transactions, and without it our economy might grind to a halt. \r\n\r\nThis lesson gives students a first taste of the kind of thinking that goes into encrypting messages in the face of computational tools. Computational tools dramatically increase the strength and complexity of the algorithms we use to encrypt information, but these same tools also increase our ability to crack an encryption. Developing strong encryption relies on knowledge of problems that are “hard” for computers to solve, and using that knowledge to encrypt messages. As a resource, you may wish to read all of Chapter 5 of *Blown to Bits*.  It provides social context which you may want to bring to your classroom.",
        "description": "In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.  Students try their own hand at cracking a message encoded with the classic Caesar cipher and also a Random Substitution Cipher.  Students should become well-acquainted with idea that in an age of powerful computational tools, techniques of encryption will need to be more sophisticated.  The most important aspect of this lesson is to understand how and why encryption plays a role in all of our lives every day on the Internet, and that making good encryption is not trivial.  Students will get their feet wet with understanding the considerations that must go into making strong encryption in the face of powerful computational tools that can be used to crack it. The need for secrecy when sending bits over the Internet is important for anyone using the Internet.",
        "overview": "In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.  Students try their own hand at cracking a message encoded with the classic Caesar cipher and also a Random Substitution Cipher.  Students should become well-acquainted with idea that in an age of powerful computational tools, techniques of encryption will need to be more sophisticated.  The most important aspect of this lesson is to understand how and why encryption plays a role in all of our lives every day on the Internet, and that making good encryption is not trivial.  Students will get their feet wet with understanding the considerations that must go into making strong encryption in the face of powerful computational tools that can be used to crack it. The need for secrecy when sending bits over the Internet is important for anyone using the Internet.",
        "prep": "* Examine both versions of the widget"
    },
    "2016/text-compression": {
        "cs_content": "The basic principle behind compression is to develop a method or protocol for using fewer bits to represent the original information. The way we represent compressed data in this lesson, with a “dictionary” of repeated patterns is similar to the [LZW compression scheme](http://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch), but it should be noted that LZW is slightly different from what students do in this lesson.  Students invent their own way here.  LZW is used not only for text (zip files), but also with the GIF image file format.",
        "description": "At some point we reach a physical limit of how fast we can send bits and if we want to send a large amount of information faster, we have to find a way to represent the same information with fewer bits - we must compress the data.  ",
        "overview": "At some point we reach a physical limit of how fast we can send bits and if we want to send a large amount of information faster, we have to find a way to represent the same information with fewer bits - we must **compress** the data. In this lesson, students will use the Text Compression Widget to compress segments of English text by looking for patterns and substituting symbols for larger patterns of text.\n",
        "prep": "* Test out the Text Compression Widget\r\n* Review the teaching tips to decide which options you want to use"
    },
    "a-f-playground-course/debugging-in-collector": {
        "cs_content": "The purpose of this lesson is to teach students that failure is normal when learning a new skill. Students will be given pre-written programs that do NOT work. They will be asked to fix these programs. This process, called \"debugging\", teaches students essential problem solving and critical thinking skills. These skills transfer over as students proceed to harder and harder programming projects.",
        "description": "Have you ever run into problems while coding? In this lesson, you will learn about the secrets of debugging. Debugging is the process of finding and fixing problems in your code.",
        "overview": "In this online activity, students will practice debugging with Scrat, from \"Ice Age\". Students will get to practice reading and editing code to fix puzzles with simple algorithms, loops and nested loops.",
        "prep": " - Play through [r csf-express-course] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground-course/programming-unplugged-my-robotic-friends": {
        "cs_content": "This unplugged lesson brings the class together as a team with a simple task to complete: get a \"robot\" to stack cups in a specific design. Students will work to recognize real world actions as potential instructions in code. The designing of precise instructions will also be practiced, as  students work to translate worded instructions into the symbols provided. If problems arise in the code, students should work together to recognize bugs and build solutions.",
        "overview": "Using a predefined symbol key, your students will figure out how to guide one another to accomplish specific tasks without using any verbal commands. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.",
        "prep": " - Watch the [r my-robotic-friends].\r\n - Read [r my-robotic-friends-packet].\r\n - Print out one [r symbol-key] per group. This is \"code\" to be used.\r\n - [r paper-trapezoid-template] are provided if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/building-a-foundation": {
        "cs_content": "This lesson teaches that failure is not the end of a journey, but a hint for how to succeed. The majority of students will feel frustrated at some point in this lesson, but it's important to emphasize that failure and frustration are common steps to creativity and success.",
        "description": "New and unsolved problems are often pretty hard. If we want to have any chance of making something creative, useful, and clever, then we need to be willing to attack hard problems even if it means failing a few times before we succeed. In this lesson, students will be building a structure with common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. Most students will not get this right the first time, but it's important they push through and keep trying.",
        "overview": "New and unsolved problems are often pretty hard. If we want to have any chance of making something creative, useful, and clever, then we need to be willing to attack hard problems even if it means failing a few times before we succeed. In this lesson, students will be building a structure with common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. Most students will not get this right the first time, but it's important they push through and keep trying.",
        "prep": "-  Watch the [r teacher-video-practicing-persistence].\r\n-  Watch the [r lesson-in-action-foundation].\r\n-  Print [r csf-building-a-foundation-activity].\r\n-  Gather enough building elements (marshmallows or gumdrops with toothpicks or popsicle sticks) for each group. You don't have to give any certain amount; just make sure you put some limit on materials.\r\n-  Give a [r think-spot-journal] to each student."
    },
    "a-f-playground/debugging-in-bee": {
        "cs_content": "The purpose of this lesson is to teach students that failure is normal when learning a new skill. Students will be given pre-written programs that do NOT work. They will be asked to fix these programs. This process, called \"debugging\", teaches students essential problem solving and critical thinking skills. These skills transfer over as students proceed to harder and harder programming projects.",
        "description": "Have you ever run into problems while coding? In this lesson, you will learn about the secrets of debugging. Debugging is the process of finding and fixing problems in your code.",
        "overview": "In this online activity, students will practice debugging in the \"collector\" environment. Students will get to practice reading and editing code to fix puzzles with simple algorithms, loops and nested loops.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/debugging-in-maze": {
        "cs_content": "Students in your class might become frustrated with this lesson because of the essence of debugging. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "description": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and blocks that are out of order.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and blocks that are out of order.",
        "prep": " - Play through the [r csf-course-c] in stage 3 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal].\r\n - Review [r csf-debugging-handout] with the class."
    },
    "a-f-playground/debugging-in-scrat": {
        "cs_content": "Students in your class might become frustrated with this lesson because of the essence of debugging. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and blocks that are out of order.",
        "prep": " - Play through the [r csf-course-e] to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal].\r\n - Review [r csf-debugging-handout] with the class."
    },
    "a-f-playground/getting-loopy": {
        "cs_content": "_Loops_ allow for students to categorize their code into what needs to be repeated and what does not. Students will develop critical thinking skills by noticing repetition in movements and determining how many times to repeat commands to create those loops.",
        "description": "Loops are a handy way to repeat actions a certain number of times. In this lesson, students will dance their way to a better understanding of how to use repeat loops.",
        "overview": "Loops are a handy way to repeat actions a certain number of times. In this lesson, students will dance their way to a better understanding of how to use repeat loops.",
        "prep": "- Watch the [r teacher-video-getting-loopy-2].\r\n- Print one [r csf-getting-loopy-activity-worksheet] for the class.\r\n- Print one [r csf-getting-loopy-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/graph-paper-programming": {
        "cs_content": "The goal of this activity is to build critical thinking skills and excitement for the course.\r\n\r\nBy introducing basic concepts like _programming_ and _algorithms_ to the class in an unplugged activity, students who are intimidated by computers can still build a foundation of understanding on these topics. Programming and algorithms are essential to computer science. In this lesson, students will learn how to translate instructions into a program and recognize an algorithm. ",
        "description": "In this lesson, you will program your friend to draw pictures!",
        "overview": "By \"programming\" one another to draw pictures, students will begin to understand what coding is really about. The class will begin by having students instruct each other to color squares on graph paper in an effort to reproduce an existing picture. If there’s time, the lesson can conclude with images that the students create themselves.",
        "prep": "- Watch the [r teacher-video-graph-paper-2].\r\n- Watch the [r lesson-in-action-graph-paper].\r\n- Print out one [r csf-graph-paper-programming-worksheet] for each group.\r\n- Print one [r csf-graph-paper-programming-assessment] for each student.\r\n- Supply each group with several drawing grids, paper, and pens/pencils.\r\n- Make sure every student has a [r think-spot-journal].\r\n"
    },
    "a-f-playground/introduction-remembering-ideas-from-course-c": {
        "cs_content": "We recognize that every classroom has a spectrum of understanding for every subject. Some students in your class may be computer wizards, while others haven't had much experience at all. In order to create an equal playing (and learning) field, we have developed this \"Ramp Up Stage\" for Course D. This can be used as either an introduction or a review of how to use Code.org and basic computer science concepts. This stage covers all prerequisites needed to start Course D.",
        "description": "This lesson will give you practice in the skills you will need for this course.",
        "overview": "In this set of puzzles, students will begin with an introduction (or review depending on the experience of your class) of Code.org's online workspace. There will be videos pointing out the basic functionality of the workspace including the `Run`, `Reset`, and `Step` buttons. Also discussed in these videos: dragging Blockly blocks, deleting Blockly blocks, and connecting Blockly blocks. Next, students will practice their _sequencing_ and _debugging_ skills in maze. From there, students will see new types of puzzles like Collector, Artist, and Harvester when they learn the very basics of _loops_.",
        "prep": " - Play through the [r csf-course-d] to find any potential problem areas for your class.\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/learning-about-computers": {
        "cs_content": "This lesson will help students learn how to ask for help using appropriate terminology once they begin the Code.org online lessons.",
        "description": "This lesson will prepare students to begin their technological journey.  By first understanding the hardware that they will use, then exploring the Code.org interface using that hardware, they will get a small taste of what lies ahead -- all with the comfort of explicit guidance from the teacher. ",
        "overview": "Instead of sending students off to learn to code on their own, it is important for the instructor to act as a tour guide.  When students feel prepared and supported, they have a much easier time attempting difficult problems.  This lesson gives a brief introduction into the territories ahead so that students don't feel as if they've been pushed into the woods without a map.  ",
        "prep": "-  Identify the devices that you will be using with your class\r\n-  Determine which poster / handbook is relevant for your classroom\r\n-  Print off an image of the machine that your students will use on letter-sized paper\r\n-  Select a set of Dos and Don'ts that works with your class and figure out how you would like to display them"
    },
    "a-f-playground/loops-in-artist": {
        "cs_content": "This series highlights the power of loops with creative and personal designs.  \r\n\r\nOffered as a project-backed sequence, this progression will allow students to build on top of their own work and create amazing artifacts.",
        "overview": "Watch student faces light up as they make their own gorgeous designs using a small number of blocks and digital stickers! This lesson builds on the understanding of loops from previous lessons and gives students a chance to be truly creative.  This activity is fantastic for producing artifacts for portfolios or parent/teacher conferences.",
        "prep": " - Play through the [r csf-course-e] corresponding to this course to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/loops-intro": {
        "cs_content": "In this lesson, students will be learning more about loops and how to implement them in Blockly code. Using _loops_ is an important skill in programming because manually repeating commands is tedious and inefficient. With the Code.org puzzles, students will learn to add instructions to existing loops, gather repeated code into loops, and recognize patterns that need to be looped.",
        "description": "Building on the concept of repeating instructions from \"Happy Loops,\" this stage will have students using loops to collect treasure more efficiently on Code.org.",
        "overview": "Building on the concept of repeating instructions from \"Happy Loops,\" this stage will have students using loops to collect treasure more efficiently on Code.org.",
        "prep": " - Play through the [r csf-course-a] in stage 9 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Review [r csf-lesson-recommend]\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/loops-unplugged-happy-loops": {
        "cs_content": "This lesson serves as an introduction to loops. _Loops_ allow for students to simplify their code by grouping commands that need to be repeated. Students will develop critical thinking skills by noticing repetition in movements of their classmates and determining how many times to repeat the commands inside of the loops. By seeing \"Happy Maps\" again, students will be able to relate old concepts such as sequencing to the new concept, loops.",
        "description": "Loops are a very helpful and powerful tool in programming. To understand how helpful loops can be, students will need to be driven to want an easier way to solve mundane problems.",
        "overview": "Loops are a very helpful and powerful tool in programming. To understand how helpful loops can be, students will need to be driven to want an easier way to solve mundane problems.",
        "prep": " - Watch the [r teacher-video-happy-loops]\r\n - Print out [r happy-map-cards] for each group\r\n - Print out [r happy-map-game-pieces] for each group\r\n - Print out [r happy-map-cards-xl] for each group\r\n - Print out [r happy-map-game-pieces-bonus-pack] for each group\r\n - Make sure each student has a [r think-spot-journal]"
    },
    "a-f-playground/my-loopy-robotic-friends": {
        "cs_content": "This lesson serves as an introduction to loops. _Loops_ allow for students to simplify their code by grouping commands that need to be repeated. Students will develop critical thinking skills by noticing repetition in the movements of classmates and determining how many times their code needs to be looped. By seeing \"[My Robotic Friends](https://www.codecurricula.com/csf/coursef/1/)\" again, students will be able to relate old concepts (such as sequencing) to the new concept of loops.",
        "overview": "Here, students learn the simplicity and utility of loops by “programming” their friends using the language from \"[My Robotic Friends](https://www.codecurricula.com/csf/coursef/1/).\" Once loops are introduced, students will find that they can build bigger structures faster.",
        "prep": " - Watch the [r my-loopy-rf-teacher-vid].\r\n - Print one [r my-robotic-friends-loops-packet] for each group.\r\n - Acquire up to 20 paper cups for each group.\r\n - Review [r my-robotic-friends].\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/persistence-frustration-stevie-and-the-marbles": {
        "cs_content": "The goal of this lesson is to help students realize that failure and frustration are common when working on projects, but that doesn't mean that they should give up.\r\n\r\nIn this lesson, students will develop an understanding of what it means to be frustrated while working on a large project. It's possible that not every student will experience frustration with this activity, but there are many opportunities to open a discussion about moments in the past where students have felt frustrated but nevertheless persisted. ",
        "description": "When students run into a barrier while answering a question or working on a project, it’s so easy for them to get frustrated and give up.  This lesson will introduce students to the idea that frustration can be an important part of learning. Here, frustration is presented as a step in the creative process, rather than a sign of failure.",
        "overview": "When students run into a barrier while answering a question or working on a project, it’s so easy for them to get frustrated and give up.  This lesson will introduce students to the idea that frustration can be an important part of learning. Here, frustration is presented as a step in the creative process, rather than a sign of failure.\r\n\r\nThis lession can be done over one or two class sessions.  If you have more time, feel free to draw out the building and revising phase of the Marble Run activity.",
        "prep": " - Watch the [r teacher-video-stevie-big-project].\r\n - Pre-read \"Stevie and the Big Project\" to identify appropriate questions for your class.\r\n - Follow instructions in the [r marble-run-teacher-prep-guide] to make a Marble Run.\r\n - Print copies of the **Marble Run Ruler** (page 2 of teacher guide) for each student or pair of students.\r\n - Prepare a resource station with cardstock, safety scissors, tape, and anything else you think might be fun for students to build with.  Include a stack of the **“Marble Run Hints”** pages from the Teacher Prep Guide, but do not advertise their existence.\r\n - (Optional) Allow students to bring cardboard, popsicle sticks, string, or other tidbits from home to add to the resource station.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/programming": {
        "cs_content": "In this lesson, students will be practicing their debugging and programming skills on a computer platform. When someone starts _programming_ they piece together instructions in a specific order using something that a machine can read. Through the use of programming, students will develop an understanding of how a computer navigates instructions and order. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing all of the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "description": "In this series of online puzzles, students will build on the understanding of algorithms, debugging, and general computer literacy. Featuring characters from the game Angry Birds, students will develop sequential algorithms to get the bird to the pig without crashing into walls or TNT. Debugging puzzles have also been mixed into this stage for added practice with problem solving and critical thinking.",
        "overview": "In this series of online puzzles, students will build on the understanding of algorithms, debugging, and general computer literacy. Featuring characters from the game Angry Birds, students will develop sequential algorithms to get the bird to the pig without crashing into walls or TNT. Debugging puzzles have also been mixed into this stage for added practice with problem solving and critical thinking.",
        "prep": " - Play through the [r csf-course-b] in stage 7 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/programming-at-home-with-my-pet": {
        "cs_content": "In this lesson, students will be practicing their debugging and programming skills on a computer platform. When someone starts _programming_, they piece together instructions in a specific order using something that a machine can read. Through the use of programming, students will develop an understanding of how a computer navigates instructions and order.",
        "description": "Featuring characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of the maze to the pig at the other side. To do this they will stack code blocks together in a linear sequence to move straight, turn left, or turn right.",
        "overview": "Featuring characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of the maze to the pig at the other side. To do this they will stack code blocks together in a linear sequence to move straight, turn left, or turn right.",
        "prep": " - Play through the [r csf-course-c] in stage 2 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Make sure every student has a [r think-spot-journal]"
    },
    "a-f-playground/programming-my-robotic-friends": {
        "cs_content": "This lesson serves as a reintroduction to loops, using the now familiar set of \"robot\" programming instructions. Students will develop critical thinking skills by looking for patterns of repetition in the movements of classmates and determining how to simplify those repeated patterns using loops.",
        "overview": "Building on the initial \"My Robotic Friends\" activity, students learn to use loops when programming their robots in order to build bigger structures more efficiently.",
        "prep": " - Watch the [r my-loopy-rf-teacher-vid].\r\n - (Optional) Print out one [r symbol-key] per group or 4 students. Alternatively, find a place to display this information where students can reference throughout the lesson.\r\n - Prepare a stack of 20 paper cups for each group of 4 students.\r\nOR\r\n - (Optional) print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/programming-unplugged-happy-maps": {
        "cs_content": "This unplugged lesson brings together teams with a simple task: get the \"flurb\" to the fruit. Students will practice writing precise instructions as they work to translate instructions into the symbols provided. If problems arise in the code, students should also work together to recognize bugs and build solutions.",
        "description": "The bridge from algorithms to programming can be a short one if students understand the difference between planning out a sequence and encoding that sequence into the appropriate language.  This activity will help students gain experience reading and writing in shorthand code.",
        "overview": "The bridge from algorithms to programming can be a short one if students understand the difference between planning out a sequence and encoding that sequence into the appropriate language.  This activity will help students gain experience reading and writing in shorthand code.",
        "prep": " - Watch the [r teacher-video-happy-maps-2].\r\n - Print out [r happy-map-cards] for each group.\r\n - Print out [r happy-map-game-pieces] for each group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/programming-unplugged-my-robotic-friends": {
        "cs_content": "This unplugged lesson brings the class together as a team with a simple task to complete: get a \"robot\" to stack cups in a specific design. Students will work to recognize real world actions as potential instructions in code. The designing of precise instructions will also be practiced, as  students work to translate worded instructions into the symbols provided. If problems arise in the code, students should work together to recognize bugs and build solutions.",
        "description": "Using a predefined symbol key, your students will figure out how to guide one another to accomplish specific tasks without using any verbal commands. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.",
        "overview": "Using a predefined symbol key, your students will figure out how to guide one another to accomplish specific tasks without using any verbal commands. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.",
        "prep": " - Watch the [r my-robotic-friends].\r\n - Read [r my-robotic-friends-packet].\r\n - Print out one [r symbol-key] per group. This is \"code\" to be used.\r\n - [r paper-trapezoid-template] are provided if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "a-f-playground/puppy-loops": {
        "cs_content": "In this lesson, students will be learning more about _loops_ and how to implement them in Blockly code. Using _loops_ is an important skill in programming because manually repeating commands is tedious and inefficient. With the Code.org puzzles, students will learn to add instructions to existing loops, gather repeated code into loops, and recognize patterns that need to be looped. It should be noted that students will face puzzles with many different solutions. This will open up discussions on the various ways to solve puzzles with advantages and disadvantages to each approach.",
        "description": "Building on the concept of repeating instructions from \"Getting Loopy,\" this stage will have students using loops to help BB-8 traverse a maze more efficiently than before.",
        "overview": "Building on the concept of repeating instructions from \"Getting Loopy,\" this stage will have students using loops to help BB-8 traverse a maze more efficiently than before.",
        "prep": " - Play through the [r csf-course-c] in stage 8 to determine if there will be any problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/real-life-algorithms-paper-airplanes": {
        "cs_content": "In this lesson, students will learn that algorithms are everywhere in our daily lives. For example, there is a specific algorithm to plant a seed. Instead of giving vague or over-generalized instructions, students will break down a large activity into smaller and more specific instructions. From these instructions, students must determine a proper order for the sequence of instructions to be in.",
        "description": "In this lesson, students will relate the concept of algorithms back to everyday activities. After discussing algorithms, students will make paper planes using an algorithm. The goal here is to start building the skills to translate real world situations to online scenarios and vice versa.",
        "overview": "In this lesson, students will relate the concept of algorithms back to everyday activities. After discussing algorithms, students will make paper planes using an algorithm. The goal here is to start building the skills to translate real world situations to online scenarios and vice versa.",
        "prep": "- Watch the [r teacher-video-paper-planes].\r\n- Watch the [r lesson-in-action-paper-airplanes].\r\n- Gather paper for students to construct paper airplanes from.\r\n- Print out [r csf-real-life-algorithms-worksheet-paper-airplanes] for each student.\r\n- Print [r csf-daily-algorithms] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/relay-programming": {
        "cs_content": "There are many important components to this lesson. Students will be able to run around and get their wiggles out while building teamwork, programming, and debugging skills. Teamwork is very important in computer science. While [r pair-programming-vid] is common, it is more common for computer scientists to work in teams. These teams write and debug code as a group rather than individuals. In this lesson, students will learn to work together while being as efficient as possible. \r\n\r\nThis activity also provides a sense of urgency that will teach them to balance their time carefully and avoid mistakes, but not to fall too far behind.",
        "description": "Remember at the beginning of the course when you made drawings with code? In this lesson, you will be working with a team to do something very similar!",
        "overview": "This activity will begin with a short review of \"Graph Paper Programming,\" then will quickly move to a race against the clock, as students break into teams and work together to write a program one instruction at a time.",
        "prep": "- Watch the [r teacher-video-relay-programming-2].\r\n- Locate a wide open space for this activity, such as the gym or outdoor field.\r\n- Print out one [r csf-relay-programming-activity-packet] for each group.\r\n- Print one [r csf-relay-programming-assessment] for each student.\r\n- Supply each group with plenty of paper and pens/pencils.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/sequences-in-maze": {
        "cs_content": "We recognize that every classroom has a spectrum of understanding for every subject. Some students in your class may be computer wizards, while others haven't had much experience at all. In order to create an equal playing (and learning) field, we have developed this \"Ramp Up Stage\" for Course E. This can be used as either an introduction or a review of how to use Code.org and basic computer science concepts.",
        "description": "Lessons 1-9 are considered ramp-up lessons.  If you feel that the first few activities are too simple for your class, feel free to pick and choose your favorites or skip to lesson #10.",
        "overview": "In this set of puzzles, students will begin with an introduction (or review depending on the experience of your class) of Code.org's online workspace. There will be videos pointing out the basic functionality of the workspace including the `Run`, `Reset`, and `Step` buttons. Also discussed in these videos: dragging Blockly blocks, deleting Blockly blocks, and connecting Blockly blocks. Next, students will practice their _sequencing_ and _debugging_ skills in maze.",
        "prep": " - Play through the [r csf-course-e] to find any potential problem areas for your class.\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "a-f-playground/working-together-online": {
        "cs_content": "This lesson is intended to showcase the plusses and pitfalls of working together online. Using an \"unplugged\" offline model, students will get experience commenting online and have the opportunity to learn about online safety and respect.",
        "description": "Using an offline social media platform called \"Talkboard\", this lesson shows students how to behave respectfully online while paying attribution to content creators.  Intended to act as a dry run for sharing and discussing on a connected platform, this provides students an opportunity to learn to be courteous in a safe and unplugged way.",
        "overview": "Using an offline social media platform called \"Talkboard\", this lesson shows students how to behave respectfully online while paying attribution to content creators.  Intended to act as a dry run for sharing and discussing on a connected platform, this provides students an opportunity to learn to be courteous in a safe and unplugged way.",
        "prep": "- Print one set of \"Comment Cards\" for each group of students\r\n- Print one \"Posting Pack\" for you as the teacher\r\n- Print one \"Attribution Key\" to translate where each picture is from\r\n- Clear a space at least 4' x 2' on the floor or chalkboard\r\n- Hand each group pencils for drawing, scissors for cutting, and tape for posting comments"
    },
    "app-prototyping/app-presentation": {
        "cs_content": "This lesson is the culmination of the last several weeks of project work. In preparing to present their work, it's important that students see this as more than just the programming element of their app - the goal of the presentation is to acknowledge the research, design, testing, and iteration that teams have gone through.",
        "description": "Each team prepares a presentation to \"pitch\" the app they've developed. This is the time to share struggles, triumphs, and plans for the future.",
        "overview": "At this point teams have researched a topic of personal and social importance, developed and tested both a paper prototype and a digital prototype, and iterated on the initial app to incorporate new features and bug fixes. Now is the time for them to review what they have done and pull together a coherent presentation to demonstrate their process of creation. Using the provided presentation template, teams prepare to present about their process of app development, including the problem they set out to solve, the ways in which they've incorporated feedback from testing, and their plans for the future.",
        "prep": "* Determine how much time each group has to present. Typically this is 8-10 minutes per team, but remember to leave time for transitioning between teams\r\n* Create a copy of the presentation template slide deck for each team\r\n* Print one copy of [r app-presentation-rubric] for each team. "
    },
    "app-prototyping/designing-apps-for-good": {
        "cs_content": "While this lesson spends some time reviewing and reinforcing the user-centered design process that students will use throughout their project, the primary goal is to give students a chance to see how other people their age have used technology to address issues they care about. The resources provided are a great starting place, but you can make this lesson pack a bigger punch if you find examples (even those from your own previous classes) that demonstrate local examples of students designing apps for social good.",
        "description": "To kick off the app design project, the class organizes into teams and starts exploring app topics. Several example socially impactful apps serve as inspiration for the project.",
        "overview": "To kick off the app design project that lasts through the end of the unit, students first explore a number of apps designed for social impact that have been created by other students. The class then reviews the Define, Prepare, Try, and Reflect steps of the Problem Solving process as they develop an idea for an app of their own with social impact. Finally, students will form project teams and lay out a contract for how the team will function throughout the development of their app.",
        "prep": "* Assign teams of 4-5, ideally based on similar interest in an app topic\r\n* Print one copy per team of [r app-design-kickoff]\r\n* Choose 1-3 of the apps from [r example-apps-for-good] to share with the class\r\n* Arrange classroom seating for  pre-selected teams of 4-5 students\r\n* Put out sticky notes for each team"
    },
    "app-prototyping/digital-design": {
        "cs_content": "This lesson introduces students to the design mode interface of App Lab, and to the process of translating a paper prototype to digital. They'll use this as a tool to iterate on their paper prototypes, first by building up an exemplar app screen, and eventually building up to an interactive app prototype by the end of the lesson.",
        "description": "Having developed, tested, and gathered feedback on a paper prototype, teams now move to App Lab to build the next iteration of their apps. Using the drag-and-drop Design Mode, each team member builds out at least one page of their team's app, responding to feedback that was received in the previous round of testing.",
        "overview": "Having collaboratively developed a paper prototype for their apps, groups now divide and conquer to begin work on an interactive digital version based on the paper prototype. Using the drag-and-drop design mode of App Lab, students individually work through a progression of skill-building levels to learn how to build digital versions of a paper prototype. From there, each group member builds out at least one page of their app in App Lab, to be later combined into a single app.",
        "prep": "* Print one copy of [r screen-ownership] for each group\r\n* Print one copy of [r screen-design] for each student\r\n* (Optional) Print one copy of [r model-screen-design] for each group"
    },
    "app-prototyping/event-driven-programming": {
        "cs_content": "This lesson and the next are the only two in this unit that focus on programming concepts, and the extent to which they do so is minimal. The goal of this lesson is not to teach programming in App Lab (there will be time for that in Unit 6), but rather to teach the minimum amount of programming skills to allow students to make their apps interactive.",
        "description": "Building on the screens that the class designed in the previous lesson, teams combine screens into a single app. Simple code can then be added to make button clicks change to the appropriate screen.",
        "overview": "In this lesson teams combine the screens that they designed in the previous lesson into a single app, which they can then link together using code. Students learn basic event driven programming by building up the model app that they started in the previous lesson. In addition to the screen that students designed yesterday, they'll learn how to create additional screens and even import screens made by others."
    },
    "app-prototyping/improving-and-iterating": {
        "cs_content": "While it is tempting to make this lesson a deeper dive into programming for all students, encourage each student to find the elements of app design that interest them and focus on that for their personal improvements. While improvement _can_ mean adding programmatic functionality, in can also mean a more eye-catching design, more informative text copy, better uniformity of iconography, or any number of other non-programming related features.\n\nAt this point in the development process, you can choose to spend as much time as you like iterating and testing. There is no further time budgeted for testing after this iteration, but feel free to use the previous two lessons as a guideline for cycling through further iterations.",
        "description": "Using the feedback from the last round of testing, teams implement changes that address the needs of their users. Each team tracks and prioritizes the features they want to add and the bugs they need to fix.",
        "overview": "Teams have at this point developed an app prototype that has gone through multiple iterations and rounds of user testing. With the information and guidance gained from the last round of user testing, each student has the opportunity to plan for and implement improvements to the team app. Depending on the time you have available, and student interest, you can run the cycle of testing and iteration as many times as you see fit.",
        "prep": "* Print one copy of [r app-user-testing-analysis] for each team\r\n* Set out sticky notes and poster paper for each team"
    },
    "app-prototyping/low-fidelity-prototyping": {
        "cs_content": "This lesson kicks off the actual design phase of this project. In order to simplify the app design process students are presented several broad categories of apps to choose from in developing their own idea. Students last created paper prototypes in lesson 7, but at that point very few constraints were placed on the prototype user interface. Because these prototypes will eventually be converted into App Lab apps, it's important to better scope the types of apps teams design and the interface elements they use.",
        "description": "Paper prototypes allow developers to quickly test ideas before investing a lot of time writing code. In this lesson teams explore some example apps created in App Lab, using those apps to help inform the first paper prototypes of their apps.",
        "overview": "Before starting to design apps, we need to help students to better scope their expectations. Because students will eventually be prototyping these apps in App Lab, they will be in better shape if their ideas align with the kinds of apps that are easily prototyped in App Lab. Teams start this scoping by looking through several example apps designed to demonstrate apps that can be created with App Lab. Teams then can chose one (or more) of the apps as a basis for their own. From there, teams have some time to discuss the basic functionality of their app before using 3x5 index cards to develop paper prototypes.\r\n",
        "prep": "* Collect 3x5 index cards (or copies of [r phone-paper-prototype]), sticky notes, colored pens and pencils, scissors for each team\r\n* Print a copy of [r prototype-brainstorming] for each team\r\n"
    },
    "app-prototyping/marketing-research": {
        "cs_content": "This lesson is the primary opportunity students have to get user input into the original conception of their app. By looking at apps similar to the ones they have proposed needing they may be inspired to change the structure of their app or may even identify an aspect of their problem they had previously ignored. In later lessons students will test out prototypes of their app to perform further refinements.",
        "description": "Dive into app development by exploring existing apps that may serve similar users. Each group identifies a handful of apps that address the same topic they are working on, using those apps to help refine the app idea they will pursue.",
        "overview": "In this lesson students research apps similar to the one they intend on creating to better understand the needs of their users. Students work within their teams to search the Internet for other apps, then evaluate the ones they find interesting. By the end of the lesson, each team will have a clearer idea about the type of app they want to create and further refine who their target users are. Each team will maintain a list of citations for all the apps they examined for use in their final presentation.",
        "prep": "* Arrange classroom seating for teams of 4-5 students\r\n* Print one copy per team of [r market-research]"
    },
    "app-prototyping/prototype-testing": {
        "cs_content": "The goal of this lesson is to give students a clear format for testing and iteration of their apps. This will be the first of multiple opportunities teams have to test various stages of their prototypes, and each stage will serve a different purpose. At this point the primary purpose is to gut check assumptions about how the app should be laid out and navigated - this is _not_ the time for students to be overly concerned about fine details.",
        "description": "In this lesson teams test out their paper prototypes with other members of the class. With one student role playing the computer, one narrating, and the rest observing, teams will get immediate feedback on their app designs which will inform the next version of their app prototypes.",
        "overview": "The primary purpose of developing paper prototypes is that they allow for quick testing and iteration before any code is written. This lesson is focused on giving teams a chance to test their prototypes before moving to App Lab. Teams develop a plan to test with users before running prototype tests with multiple other students in the class (and potentially outside the class). In order to test the prototype with the users, the students will have to assign roles in the testing (the “narrator”, the “computer” and the “observers”) as well as have some questions prepared for the user to answer after the test is complete.",
        "prep": "* Either have other people lined up to test each team’s paper prototypes, or schedule enough time for teams to test each other's prototypes\n* Print a copy of [r paper-prototype-user-testing] for each team"
    },
    "app-prototyping/testing-the-app": {
        "cs_content": "By now students should be fairly practiced at testing with users. This time around, however, the role of the computer is actually done _by the computer_! This means that the team running the test needs to focus their energy on getting carefully watching what the user does, and encourage the user to say aloud what they are experiencing. While it may seem at first that testing with an interactive prototype is easier (since no one has to manually change screens), it can actually be significantly more difficult to observe the user's experience.",
        "description": "Teams run another round of user testing, this time with their interactive prototype. Feedback gathered from this round of testing will inform the final iteration of the app prototypes.",
        "overview": "By the end of the previous lesson each team should have a minimum viable prototype of their app. The primary purpose of this lesson is to have the team actually test the app with other people, preferably from the target audience the app is intended for, or from different teams in the class while observers from the team will record the results on the worksheets they used in the planning phase. As with testing the paper prototypes, teams will start by planning for the specific scenarios before running and observing tests. ",
        "prep": "* Print one copy of [r app-user-testing] for each student\r\n* If possible, have outside users available to test the teams’ apps prior to this testing day"
    },
    "ayp/app-development-intro-to-app-lab-13-only": {
        "cs_content": "This lesson is your students' first step with App Lab. The tutorial itself should be an approachable introduction to a powerful tool with broad functionality. Students should have a positive experience during the tutorial and more importantly should be motivated to keep building in App Lab. They are only scratching the surface of what the tool is capable of here, so afterwards they should use the code.org/applab page or the project gallery to get inspired for more complex types of projects they want to make.",
        "description": "Tutorial Summary: This tutorial is designed to quickly introduce the App Lab programming environment as a powerful tool for building and sharing apps. The tutorial itself teaches students to create and control buttons, text, images, sounds, and screens in JavaScript using either blocks or text. At the end of the tutorial students are given time to either extend a project they started building into a \"Choose Your Own Adventure\", \"Greeting Card\", or \"Personality Quiz\" app. They can also continue on to build more projects featured on the code.org/applab page. ",
        "overview": "**Tutorial Summary:** This tutorial is designed to quickly introduce the App Lab programming environment as a powerful tool for building and sharing apps. The tutorial itself teaches students to create and control buttons, text, images, sounds, and screens in JavaScript using either blocks or text. At the end of the tutorial students are given time to either extend a project they started building into a \"Choose Your Own Adventure\", \"Greeting Card\", or \"Personality Quiz\" app. They can also continue on to build more projects featured on the code.org/applab page. \r\n\r\n**Age Appropriateness:** The tutorial is designed for students over 13. Because it allows students to upload custom sounds and images.\r\n\r\n**Checking Correctness:** This tutorial will not tell students whether they completed the level correctly. Encourage students to use the target images and directions provided in every level to know if they are on the right track. If students want to move on past a particularly tricky level they can simply click \"Finish\" and continue on.\r\n\r\nHave fun completing your Hour of Code with App Lab!\r\n\r\n",
        "prep": "- Review and complete the online tutorial yourself\r\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of the activity."
    },
    "beeps-and-boops/analog-input": {
        "cs_content": "This lesson builds on the previous by introducing analog sensors as a new form of input. These sensors all perform analog-to-digital conversion, allowing programs to sense things as represented by a 10 bit number (0-1023).",
        "description": "Explore the analog inputs on the Circuit Playground, writing programs that respond to the environment through sensors.",
        "overview": "In this lesson, students explore how the three analog sensors (sound, light, and temperature) can be used to write programs that respond to changes in the environment. The use of these sensors marks a transition in terms of how users interact with a program. By using sensors as an input, the user of an app doesn't have to directly interact with it at all, or may interact without actually realizing they are doing so.",
        "prep": "* Cue up the [r analog-digital-video]\r\n* If your room isn't very bright, it's useful to have some flashlights or other light sources on hand for testing the light sensor"
    },
    "beeps-and-boops/app-lab-events-and-input": {
        "cs_content": "This lesson allows students some time to get back into programming with App Lab before introducing the Circuit Playground, but also introduces the useful concept of a _setter_. In Unit 4, students primarily used `setScreen()` to make their apps respond to user interaction. While this is a simple and useful technique, it can lead to a lot of duplication of content across multiple screens. By using _setters_, and later _getters_, students can write apps that actually change the content on a single screen, by showing and hiding or changing the content or look of various elements.\r\n\r\nOnce students have learned about using getters and setters with UI elements, encourage them to think critically about when to use a separate screen in the design phase of an app. If screens are more alike than different, it might be more effective to just change the elements on screen in reaction to input instead of duplicating content across multiple screens. While students are only introduced to `setProperty()` right now, they will later learn the partner command `getProperty()`.",
        "description": "By reading and changing the content on the screen of an app, the class starts to build apps that only need a single screen. Even with just one screen, these techniques allow for lots of user interaction and functionality.",
        "overview": "In Unit 4 students learned a very simple approach to app development in App Lab that required a separate screen for most interactions. To expand the kinds of apps that students can make, and to encourage them to think in new ways about how users interact with apps, we introduce the `setProperty()` block. This command can be used to set the content and properties of various UI elements, allowing students to write programs that update information on a single screen, instead of manually creating duplicate screens. In this lesson students build up simple apps that only require a single screen, the content of which is changed using `setProperty()`."
    },
    "beeps-and-boops/getting-variables": {
        "cs_content": "So far, students have only used the button press event to gather information from the App Lab screen.  Using `getProperty` opens the students to gathering a wide range of information from the user.  Getting properties also allows students to create programs that don't rely on knowing an element's properties when the code is written, so their programs can be more dynamic and interactive.  These features will be important as students move toward making an interactive game in the next few lessons. ",
        "description": "This lesson introduces students to the getProperty block, which allows them to access the properties of different elements with code.  Students first practice using the block to determine what the user has input in various user interface elements. Students later use getProperty and setProperty together with the counter patters to make elements move across the screen.  A new screen element, the slider, and a new event trigger, onChange, are also introduced.",
        "overview": "This lesson introduces students to the `getProperty` block, which allows them to access the properties of different elements with code.  Students first practice using the block to determine what the user has input in various user interface elements. Students later use `getProperty` and `setProperty` together with the counter patters to make elements move across the screen.  A new screen element, the slider, and a new event trigger, `onChange`, are also introduced."
    },
    "beeps-and-boops/kickoffs-and-kickstarters": {
        "cs_content": "This lesson will lay the groundwork for students' understanding of how their Circuit Board could be used to model an innovative computing device. The goal is to get them thinking about how computers can be embedded into just about anything, and to start considering the potential impacts of such applications.",
        "description": "Explore a wide variety of new and innovative computing platforms while expanding your understanding of what a computer can be.",
        "overview": "To kick off the final unit of this course, students will do some research into interesting innovations in computing. This lesson will expose students to wider variety of computing form factors (what a computer looks like) and fields that are impacted by computing. Later in this unit students will look back on the devices they encountered in this lesson as they develop their own physical computing devices.",
        "prep": "* Review the resource pages linked in Code Studio\r\n* Cue up [r internet-of-things-video] or [r innovation-video-1-1]\t\r\n* Print out a copy of [r computing-innovations] for each student"
    },
    "beeps-and-boops/physical-input": {
        "cs_content": "This lesson marks the transition from using the board solely as an output device to using it for both input and output. The `onBoardEvent()` block works much like `onEvent()`, with the most significant different being that the first parameter is a board object (a variable) while `onEvent()` takes a UI element ID (a string).",
        "description": "Using the hardware buttons and switch, the class develops programs that use the Circuit Playground as an input.",
        "overview": "This lesson transitions students from consider the Circuit Playground as strictly an output device towards using it as a tool for both input and output. Starting with the hardware buttons and switch,sing the hardware buttons and switch, students learn to use `onBoardEvent()`, analogously to `onEvent()`, in order to take input from their Circuit Playgrounds."
    },
    "beeps-and-boops/project-board-output": {
        "cs_content": "This end of chapter assessment is a good place for students to bring together all the pieces they have learned (event handlers, loops, using the board as output) in one place. This project is purposefully left very open to allow students thing broadly about how physical output might be useful in an app - this is a great opportunity to encourage students to revisit programs they've written earlier in this unit or in Unit 4 that would benefit from using the board to output information.",
        "description": "Students take what they've learned through chapter one, and develop an app of their own design that uses the board to output information.",
        "overview": "Students take what they've learned through chapter one, and develop an app of their own design that uses the board to output information.",
        "prep": "* Print a copy of [r make-game-guide] for each group of students\r\n* Print a copy of [r make-game-rubric] for each student"
    },
    "beeps-and-boops/taking-input": {
        "cs_content": "This lesson is intended to help students transition from the _draw loop_ and conditional model of input used in Game Lab to the event-driven model used in App Lab. While students have experienced and learned a bit about event-driven programming in Unit 4, a deeper understanding of how the events work will help when it comes to responding to events on the Circuit Playground later in this unit.",
        "description": "Experience two different ways that an app can take input from a user, while learning more about the event-driven programming model used in App Lab.",
        "overview": "In preparation for delving deeper into programming with App Lab, students will explore how a handful of different programs written in both Game Lab and App Lab handle taking input from the user. After comparing and contrasting the approaches they saw in the example apps, students group up to act out the two different models for input (conditionals in an infinite loop and asynchronous events) to gain a better understanding of how they work.",
        "prep": "* Prepare to display example programs for the whole class.\r\n* A half deck of cards for each group of three students or [deck-of-cards.js.org](https://deck-of-cards.js.org).\r\n* Print one copy of [r input-and-events] for each group of three students."
    },
    "beeps-and-boops/the-circuit-playground": {
        "cs_content": "As the first introduction to using the Circuit Playground, this lesson leaves time for students to get comfortable with getting the hardware plugged in. By leveraging students' existing knowledge of event handling in App Lab, we can quickly get an app up and running that shows the potential of physical computing with little more than a single red LED.",
        "description": "Get to know the Circuit Playground, the circuit board that will be used throughout the rest of this unit. Using App Lab, develop programs that use the Circuit Playground for output.",
        "overview": "In this lesson students get their first opportunity to write programs that use the Circuit Playground. After first inspecting the board visually and hypothesizing possibly functionalities, students move online where they will learn to write applications that control an LED. By combining App Lab screens with the Circuit Playgrounds, students can gradually start to integrate elements of the board as an ouput device while relying on App Lab for user input.",
        "prep": "* Make sure that student computers have the drivers and software necessary to connect to the Circuit Playground ([details here](//studio.code.org/maker/setup))\r\n* Prepare a board and USB cable for each pair of students"
    },
    "beeps-and-boops/the-program-design-process": {
        "cs_content": "This lesson gives students to practice developing a larger scale program in order to prepare them to do so independently. While previous lessons have focused on building skills around using specific elements of the Circuit Playground and related programming concepts, this lesson focuses on combining everything learned so far into a more complex program. The lesson heavily scaffolds the software development process by providing students a completed project guide, providing starter code, and walking students through its implementation. In the subsequent lessons students will need to complete a greater portion of this guide independently, and for the final project they will follow this process largely independently.",
        "description": "This lesson introduces students to the process they will use to design programs of their own throughout this unit. This process is centered around a project guide which asks students to sketch out their screens, identify elements of the Circuit Playground to be used, define variables, and describe events before they begin programming. This process is similar to the Game Design Process that we used in Unit 3. In this lesson students begin by playing a tug o' war style game where the code is hidden. They discuss what they think the board components, events, and variables would need to be to make the program. They are then given a completed project guide which shows one way to implement the project. Students are then walked through this process through a series of levels. At the end of the lesson students have an opportunity to make improvements to the program to make it their own.",
        "overview": "This lesson introduces students to the process they will use to design programs of their own throughout this unit. This process is centered around a project guide which asks students to sketch out their screens, identify elements of the Circuit Playground to be used, define variables, and describe events before they begin programming. This process is similar to the Game Design Process that we used in Unit 3. In this lesson students begin by playing a tug o' war style game where the code is hidden. They discuss what they think the board components, events, and variables would need to be to make the program. They are then given a completed project guide which shows one way to implement the project. Students are then walked through this process through a series of levels. At the end of the lesson students have an opportunity to make improvements to the program to make it their own.",
        "prep": "* Provide students with copies of the [r emoji-race-guide]"
    },
    "bridging-activities/bridging-activities-general": {
        "cs_content": "Bridging activities exist to \"bridge\" the gap in understanding that can happen when transferring skills from an unplugged activity to an online lesson. This plan will help you create your own from ",
        "description": "Bridging activities are intended to make an easier transition from unplugged lessons to online lessons. The intention is to take the two major parts of any lesson - the programming and the result - and mix those pieces to create a bridging experience.",
        "overview": "Bridging activities are intended to make an easier transition from unplugged lessons to online lessons. The intention is to take the two major parts of any lesson - the programming and the result - and mix those pieces to create a bridging experience.\r\n\r\nIn most cases, you have the option of either taking an unplugged activity and programming it with paper blockly blocks, or taking an example online puzzle and expressing the code with the vocabulary from the previous unplugged.  Occasionally, this will only work in one direction, but that's okay.  One direction is all students need to see.",
        "prep": "- Identify the unplugged activity that you are going to use to teach a concept\r\n- Identify the online lesson to which you will be transitioning\r\n- Determine the \"activity\" and the \"programming method\" for the unplugged lesson\r\n- Choose which piece of the bridging activity you would like to have be unplugged and which you want on the computer\r\n- If using an \"online\" programming method, you will likely be working with paper blocks, so that \r\n- You should now know which lesson your \"activity\" comes from and which your \"programming method\" comes from (they should be from two different exercises.)"
    },
    "bridging-activities/build-a-flappy-game": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursec/12/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/conditionals-in-bee": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursed/11/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/debugging-in-collector": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursed/8/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/events-in-play-lab": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursea/12/) and [this lesson](https://curriculum.code.org/csf-1718/courseb/13/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/for-loops-in-bee": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursef/19/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/functions-in-artist": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursee/16/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/functions-in-bee": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursef/22/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/introduction-to-online-puzzles": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursed/2/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/introduction-to-online-puzzles-course-e": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursee/11/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/introduction-to-online-puzzles-course-f": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursef/11/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/learn-to-drag-and-drop": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursea/4/) and [this lesson](https://curriculum.code.org/csf-1718/courseb/4/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/loops-in-collector": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "description": "This bridging activity comes from this lesson. You can see more unplugged lessons on the Unplugged page.",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursea/9/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/loops-in-collector-course-b": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/courseb/10/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/loops-with-rey-and-bb-8": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursec/8/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/programming-in-collector": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursec/5/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/programming-in-maze": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursea/6/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/programming-in-maze-course-b": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "description": "No more turning your friends into robots! Learn how to write new programs in this lesson!",
        "overview": "This activity will help bring concepts from the unplugged lesson [My Robotic Friends](https://curriculum.code.org/csf-1718/courseb/6/) into the online world that the students are moving into. You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/programming-in-maze-course-c": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursec/2/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/sequences-in-maze": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursee/2/) and [this lesson](https://curriculum.code.org/csf-1718/coursef/2/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "bridging-activities/variables-in-artist": {
        "cs_content": "Students can have a hard time seeing how unplugged lessons relate to what they need to do on the computer. Unplugged activities are abstract and students often need help transferring concepts from real life to online programming. The following bridging activities are intended to help draw a parallel between solving problems in the real world and solving problems on a computer. ",
        "overview": "This bridging activity comes from [this lesson](https://curriculum.code.org/csf-1718/coursed/16/). You can see more unplugged lessons on the [Unplugged page](https://code.org/curriculum/unplugged)."
    },
    "building-games/complex-sprite-movement": {
        "cs_content": "This lesson does not introduce any new blocks and in fact only uses patterns students have seen in Chapter 1. Instead it demonstrates how combining these tools, in particular the abstractions students learned in the previous two lessons, allows them to build new behaviors for their sprites. This highlights the broader point that abstractions not only simplify code, but also can themselves be used as building blocks of even more complex behavior.  \r\n\r\n\r\nThe lesson features some of the most challenging programming in the unit. Students will be combining multiple programming constructs, including the velocity properties, the counter pattern, user interaction, and collision detection. The patterns students use in this lesson are generally useful for building games and students can and will reuse them later in the unit. In particular students will return to their flyer game from this lesson in the following one, and many of the mechanics students learn in this game reappear in lesson 17.",
        "description": "The class learns to combine the velocity properties of sprites with the counter pattern to create more complex sprite movement, such as simulating gravity, making a sprite jump, and allowing a sprite to float left or right. In the final levels the class combine these movements to animate and control a single sprite and build a simple game in which a character flies around and collects coins. ",
        "overview": "Students learn to combine the velocity properties of sprites with the counter pattern to create more complex sprite movement. In particular students will learn how to simulate gravity, make a sprite jump, and allow a sprite to float left or right. In the final levels of the Code Studio progression students combine these movements to animate and control a single sprite and build a simple game in which a character flies around and collects a coin. Students are encouraged to make their own additions to the game in the final level."
    },
    "building-games/definitely-somthing-broken": {
        "cs_content": "This lesson introduces collisions, another useful abstraction that will allow students to manipulate their sprites in entirely new ways. While students could theoretically have written their own displace, collide, or bounce commands, the ability to ignore the details of this code allows them to focus their attention on the high level structure of the games they want to build.\r\n\r\n\r\nThis lesson is also intended to give students more practice using the new commands they have learned in the second chapter. It is actually the last time they will learn a new sprite behavior, and following this lesson students will transition to focusing more on how they organize their increasingly complex code.",
        "description": "The class programs their sprites to interact in new ways.  After a brief review of how they used the isTouching block, the class brainstorms other ways that two sprites could interact.  They then use isTouching to make one sprite push another across the screen before practicing with the four collision blocks (collide, displace, bounce, and bounceOff).",
        "overview": "Students program their sprites to interact in new ways.  After a brief review of how they used the `isTouching` block, students brainstorm other ways that two sprites could interact.  They then use `isTouching` to make one sprite push another across the screen before practicing with the four collision blocks (`collide`, `displace`, `bounce`, and `bounceOff`)."
    },
    "building-games/for-elizabeth": {
        "cs_content": "This lesson formally introduces the use of abstractions, simple ways of representing underlying complexity. \r\n\r\nIn the last lesson, students were exposed to the idea of using one block to represent complex code.  Students further explore this idea in the context of the intentionally complex mathematical challenge of determining whether two sprites are touching. By using a single block to represent this complexity, in this case the isTouching block, it becomes much easier to write and reason about code, and students can appreciate the value of using abstractions.  In later lessons, students will continue to build on the `isTouching()` abstraction to create more complex sprite interactions.\r\n",
        "description": "The class learns about collision detection on the computer.  Pairs explore how a computer could use sprite location and size properties and math to detect whether two sprites are touching.  The class then uses the isTouching() block to create different effects when sprites collide, including playing sounds.  Last, they use their new skills to improve the sidescroller game that they started in the last lesson.",
        "overview": "Students learn about collision detection on the computer.  Working in pairs, they explore how a computer could use sprite location and size properties and math to detect whether two sprites are touching.  They then use the `isTouching()` block to create different effects when sprites collide, including playing sounds.  Last, they use their new skills to improve the sidescroller game that they started in the last lesson.",
        "prep": "* Print copies of [r activity-guide-collision-detection] such that each pair of students has a part A and a part B"
    },
    "building-games/josh-should-fix-this": {
        "cs_content": "In the first four lessons of this chapter students have learned to use a number of abstractions in their programs, including the velocity properties, isTouching, and collisions. These abstractions have allowed them to build much more complex programs while ignoring the details of how that behavior is created. In this lesson students learn to build abstractions of their own by creating functions.\r\n\r\n\r\nStudents will primarily use functions to break code into logical chunks that are easier to reason about. This foreshadows the chapter's transition from building technical skill to the organizational processes used to develop software.",
        "description": "This lesson covers functions as a way to organize their code, make it more readable, and remove repeated blocks of code. The class learns that higher level or more abstract steps make it easier to understand and reason about steps, then begins to create functions in Game Lab.  At the end of the lesson the class uses these skills to organize and add functionality to the final version of their side scroller game.",
        "overview": "Students learn how to create functions to organize their code, make it more readable, and remove repeated blocks of code. An unplugged warmup explores how directions at different levels of detail can be useful depending on context. Students learn that higher level or more abstract steps make it easier to understand and reason about steps. Afterwards students learn to create functions in Game Lab. They will use functions to remove long blocks of code from their draw loop and to replace repeated pieces of code with a single function. At the end of the lesson students use these skills to organize and add functionality to the final version of their side scroller game."
    },
    "building-games/platform-jumper": {
        "cs_content": "Students have already learned all of the programming constructs that they need to make a game. This lesson reviews many of those concepts while  introducing them to a structured process that will help them to manage the work. It builds on the use of the Project Guide in the previous lesson by having students complete more of this project guide independently before using it to build a game. This activity prepares students to write their own game from scratch for the final project.",
        "description": "In this multi-day lesson, the class uses the problem solving process from Unit 1 to create a platform jumper game.  After looking at a sample game, the class defines what their games will look like and uses a structured process to build them.  Finally, the class reflects on how the games could be improved, and implements those changes.",
        "overview": "In this multi-day lesson, students use the problem solving process from Unit 1 to create a platform jumper game.  They start by looking at an example of a platform jumper, then define what their games will look like.  Next, they use a structured process to plan the backgrounds, variables, sprites, and functions they will need to implement their game.  After writing the code for the game, students will reflect on how the game could be improved, and implement those changes.",
        "prep": "* Print one copy of [r platform-game-project-guide] for each student or pair of students"
    },
    "building-games/project": {
        "cs_content": "This lesson is the culmination of Unit 3 and provides students an opportunity to build a Game Lab project of their own from the ground up. The scaffolding provided by the project guide and the practice they have using it are intended to assist students in scoping their projects and seeing their ideas through to completion. This project is an opportunity to showcase technical skills, but they will also need to collaborate with their partner, provide constructive peer feedback, and repeatedly use the problem solving process as they encounter obstacles along the way. This project should be student-directed whenever possible, and provide an empowering and memorable conclusion to the first unit of CS Discoveries.",
        "description": "The class plans and builds original games using the project guide from the previous two lessons. Working individually or in pairs, the class plans, develops, and gives feedback on the games.  After incorporating the peer feedback, the class shares out the completed games.",
        "overview": "Students will plan and build their own game using the project guide from the previous two lessons to guide their project. Working individually or in pairs, students will first decide on the type of game they'd like to build, taking as inspiration a set of sample games. They will then complete a blank project guide where they will describe the game's behavior and scope out the variables, sprites, and functions they'll need to build. In Code Studio, a series of levels prompts them on a general sequence they can use to implement this plan. Partway through the process, students will share their projects for peer review and will incorporate feedback as they finish their game. At the end of the lesson, students will share their completed games with their classmates. This project will span multiple classes and can easily take anywhere from 3-5 class periods.",
        "prep": "* Print copies of [r make-your-own-game], one for each student / pair of students\r\n* Print copies of [r game-design-project], one for each student / pair of students\r\n* Print copies of [r make-your-own-game-1], one for each student / pair of students\r\n* Review sample games in Code Studio"
    },
    "building-games/stupid-curriculumbuilder-gnomes": {
        "cs_content": "This lesson introduces multi-frame animations, and is the first in a sequence centered around the process of building software.\r\n\r\nWhile previous lessons focused on using abstractions to manage the complexity of the code, this lesson focuses on managing the complexity of the software development process.  The lesson heavily scaffolds the software development process by providing students a completed project guide, providing starter code, and walking students through its implementation. In the subsequent lessons students will need to complete a greater portion of this guide independently, and for the final project they will follow this process largely independently.",
        "description": "This lesson introduces the process the class will use to design games for the remainder of the unit. The class walks through through this process in a series of levels. As part of this lesson the class also briefly learn to use multi-frame animations in Game Lab. At the end of the lesson they have an opportunity to make improvements to the game to make it their own.",
        "overview": "This lesson introduces students to the process they will use to design games for the remainder of the unit. This process is centered around a project guide which asks students to define their sprites, variables, and functions before they begin programming their game. In this lesson students begin by playing a game on Game Lab where the code is hidden. They discuss what they think the sprites, variables, and functions would need to be to make the game. They are then given a completed project guide which shows one way to implement the game. Students are then walked through this process through a series of levels. As part of this lesson students also briefly learn to use multi-frame animations in Game Lab. At the end of the lesson students have an opportunity to make improvements to the game to make it their own.",
        "prep": "* Print copies of the [r project-guide-defender-game] if you will be giving students physical copies (see notes in Lesson Plan)"
    },
    "chapter-1/animation-and-randomization": {
        "cs_content": "This lesson gives students a chance to slightly expand their drawing skills while continuing to develop general purpose programming skills. They will need to reason about the x-y coordinate plane, consider the order of their code, and slightly increase their programs' complexity. The `randomNumber()` block is important for the next lesson where students learn to store values using variables. This lesson should be focused primarily on skill-building. If students are able to complete the rainbow snake independently, then they have the skills they'll need for the coming lessons.",
        "description": "This lesson extends the drawing skills to include width and height and introduces the concept of random number generation. The class learns to draw with versions of ellipse() and rect() that include width and height parameters and to use the background() block to fill the screen with color. At the end of the progression the class is introduced to the randomNumber() block and uses the new blocks to draw a randomized rainbow snake.",
        "overview": "In this lesson students continue to develop their familiarity with Game Lab by manipulating the width and height of the shapes they use to draw. The lesson kicks off with a discussion that connects expanded block functionality (e.g. different sized shapes) with the need for more block inputs, or \"parameters\". Students learn to draw with versions of `ellipse()` and `rect()` that include width and height parameters. They also learn to use the `background()` block. At the end of the progression students are introduced to the `randomNumber()` block. Combining all of these skills students will draw a randomized rainbow snake at the end of the lesson.",
        "prep": "* Review the level sequence in Code Studio"
    },
    "chapter-1/binary-numbers": {
        "cs_content": "Number systems help us express and reason about quantities. Early number systems were merely a system of tallies that allowed humans to record and perform simple arithmetic with values. The number system we use today uses the concept of place value to allow us to express any value we wish by combining only 10 symbols (0, 1, 2 …). We therefore call it a “base 10” number system. When developing a number system for a computer, we only have two symbols available to us, corresponding with the two states of a single bit. However, the power of place value allows our binary or “base 2” number system to express any value we wish.\r\n\r\nWhen using this binary representation of numbers, certain values  (1, 2, 4, 8, 16, etc.) are seen repeatedly. When written in binary, these values are 1, 10, 100, 1000, 10000, and so on, and so are the incremental place values in this binary number system.",
        "description": "Students become more familiar with the binary number system by making a \"flippy do\" using the binary odometer widget and practicing doing binary-to-decimal number conversions.",
        "overview": "In this lesson, students will gain more familiarity with binary numbers. The lesson will transition away from the number systems that students created in the the circle-triangle-square activity, and begin to focus on representing numeric values using the binary number system. Though students have communicated with binary before, developing a *number system* is a little different. Previously, students mapped patterns of binary values to a small set of fixed messages. A number system is infinite, and also has rules for counting - or how to get from one value to the next.",
        "prep": "\r\n* Scissors (many pairs)\r\n* Printed copies of the [r Flippy Do Template]"
    },
    "chapter-1/booleans-and-conditionals": {
        "description": "This lesson introduces boolean values and logic, as well as conditional statements. The class starts by playing a simple game of Stand Up, Sit Down in which the boolean (true/false) statements describe personal properties (hair or eye color, clothing type, age, etc). The class then groups objects based on increasingly complex boolean statements, then looks at how conditionals can impact the flow of a program.",
        "overview": "In this lesson, students are introduced to boolean values and logic, as well as conditional statements. The class starts by playing a simple game of Stand Up, Sit Down in which the boolean (true/false) statements describe personal properties (hair or eye color, clothing type, age, etc). This gets students thinking about how they can frame a property with multiple potential values (such as age) with a binary question.\r\n\r\nFrom there students are provided a group of objects with similar, yet varying, physical properties. With a partner they group those objects based on increasingly complex boolean statements, including compound booleans with AND and OR.\r\n\r\nFinally we reveal Conditionals as a tool to make decisions or impact the flow of a program using boolean statements as input.",
        "prep": "* Read the Forum\r\n* Print a copy of the [r boolean-properties] for each student\r\n* (Optional) Gather objects with similar but varying features to use instead of the worksheet (LEGO bricks work well, a mixed bag of candy can be fun as well)"
    },
    "chapter-1/booleans-and-conditionals-1": {
        "cs_content": "This lesson follows closely the booleans model that students first experienced in the Booleans Unplugged lesson. As before, we start with using booleans directly before using booleans to trigger _if_ statements. In the following lesson we will introduce some boolean producing blocks, such as `keyDown()`, which can be used in place of simple boolean comparisons to write programs that respond to user input.",
        "description": "The class starts by using booleans to compare the current value of a sprite property with a target value, using that comparison to determine when a sprite has reached a point on the screen, grown to a given size, or otherwise reached a value using the counter pattern. After using booleans directly to investigate the values or sprite properties, the class adds conditional if statements to write code that responds to those boolean comparisons.",
        "overview": "Students start by using booleans to compare the current value of a sprite property with a target value, using that comparison to determine when a sprite has reached a point on the screen, grown to a given size, or otherwise reached a value using the counter pattern. After using booleans directly to investigate the values or sprite properties, students add conditional _if_ statements to write code that responds to those boolean comparisons."
    },
    "chapter-1/complex-conditionals": {
        "cs_content": "Students have learned how to make simple decisions with conditionals. Sometimes however we want to make decision based on if the condition we asked about originally was false or we want to make a decision based on multiple conditions being true. Thats where else statements and more complex conditionals come in. Else statements are a second statement which is attached to a if statement. Else statements execute when the if statement it is attached to is false. You can think of it as \"if something is true do thing 1 else do thing 2.\r\n\r\nThis concept is introduced alongside several new key and mouse input commands, allowing students to gradually build up programs that input in different ways.",
        "description": "The class continues to explore ways to use conditional statements to take user input. In addition to the simple keyDown() command learned yesterday, the class learns about several other keyboard input commands as well as ways to take mouse input.",
        "overview": "In this lesson students continue to explore ways to use conditional statements to take user input. In addition to the simple `keyDown()` command learned yesterday, students will learn about several other keyboard input commands as well as ways to take mouse input."
    },
    "chapter-1/keyboard-input": {
        "cs_content": "One common way conditionals are used is to check for different types of user input especially key presses. Having a way for a user to interact with a program makes it more interesting and dynamic. Without interaction from the user it is very difficult to create a game. Therefore the introduction of conditionals and user inputs for decision making is the first big step toward creating games.",
        "description": "Following the introduction to booleans and if statements in the previous lesson, students are introduced to a new block called keyDown() which returns a boolean and can be used in conditionals statements to move sprites around the screen. By the end of this lesson students will have written programs that take keyboard input from the user to control sprites on the screen.",
        "overview": "Following the introduction to booleans and _if_ statements in the previous lesson, students are introduced to a new block called `keyDown()` which returns a boolean and can be used in conditionals statements to move sprites around the screen. By the end of this lesson students will have written programs that take keyboard input from the user to control sprites on the screen."
    },
    "chapter-1/number-systems": {
        "cs_content": "In computer science it’s common to move between different representations of numbers. Typically we see numbers represented in decimal (base-10), binary (base-2), and hexadecimal (base-16).   The symbols of the decimal (base-10) number system - 0 1 2 3 4 5 6 7 8 9 - are so familiar that it can be challenging to mentally separate the written symbols from the abstract values they represent.  As a result, using the digits 0 and 1 can be a distraction when learning binary initially, so we don't in this lesson. \r\n\r\nWe want to expose the fact that numbers themselves (quantities) are laws of nature, but the symbols we use to represent numbers are an arbitrary, man-made abstraction.  Sometimes students memorize conversions from one number system to another without really understanding why.  By effectively inventing their own base-3 number system in this lesson the goal is for students to see that all number systems have similar properties and function the same way.  As long as you have 1) a set of distinct symbols 2) an agreement about how those symbols should be ordered, then you can represent any number with them. ",
        "description": "Students will explore the properties of number systems by inventing their own number system using only three shapes: a circle, triangle and a square. This lesson is a precursor to looking at several other number systems important to computing, especially binary and hexadecimal.",
        "overview": "Students will explore the properties of number systems by effectively inventing a base-3 number system using circles, triangles and squares as the symbols instead of arabic numerals. Students are asked to create rules that explain how each arrangement of symbols can be generated or predicated as an orderly, logical series.  The objective is to understand that you can represent *any* number with any agreed-upon set of symbols that appear in an agreed-upon order. This is as true for circles, triangle and squares as it is for the digits 0-9, or the number systems we commonly see in computer science (binary and hexadecimal).",
        "prep": "\r\n* Print and cut out (or have students cut out) the shapes from the [r Teacher Resource - Number Systems: Circle-Triangle-Square] or from colored paper.\r\n* Each group of students needs at least 3 of each shape (a full set would be 10 of each shape)."
    },
    "chapter-1/positioning-in-game-lab": {
        "cs_content": "The primary purpose of this lesson is to introduce students to the coordinate system they will use in Game Lab. Students may have limited experience with using a coordinate grid or may struggle with the \"flipped\" y-axis in Game Lab. The drawing tool also forces students to think about other features of Game Lab students will see when they begin programming in the next lesson. These include the need to consider order while drawing, the need to specify color, and the fact that circles are positioned by their center and squares by their top-left corner. By the end of this activity, students should be ready to transfer what they have learned about communicating position to the programming they will do in the next lesson.",
        "description": "This lesson explores the challenges of communicating how to draw with shapes and use a tool that introduces how this problem is approached in Game Lab.The class uses a Game Lab tool  to interactively place shapes on Game Lab's 400 by 400 grid. Partners then take turns instructing each other how to draw a hidden image using this tool, accounting for many of the challenges of programming in Game Lab.",
        "overview": "Students explore the challenges of communicating how to draw with shapes and use a tool that introduces how this problem is approached in Game Lab. The warm up activity quickly demonstrates the challenges of communicating position without some shared reference point. In the main activity students explore a Game Lab tool that allows students to interactively place shapes on Game Lab's 400 by 400 grid. They then take turns instructing a partner how to draw a hidden image using this tool, accounting for many challenges students will encounter when programming in Game Lab. Students optionally create their own image to communicate before a debrief discussion."
    },
    "chapter-1/programming-for-entertainment": {
        "cs_content": "This lesson is intended to kick off this programming unit in a way that engages students of all backgrounds and interests. Though the end point of this unit asks students to develop a game, you should avoid starting out with a strong emphasis on _video_ games. Instead, we attempt to broaden students' perspective about how programming is relevant to a form of entertainment or self expression that is personally engaging. This will provide an anchor for students to come back to throughout the unit as they consider the potential applications of the various programming skills that they learn.",
        "description": "The class is asked to consider the \"problems\" of boredom and self expression, and to reflect on how they approach those problems in their own lives. From there, they will explore how Computer Science in general, and programming specifically, plays a role in either a specific form of entertainment or as a vehicle for self expression.",
        "overview": "Students are asked to consider the \"problems\" of boredom and self expression, and to reflect on how they approach those problems in their own lives. From there, students will explore how Computer Science in general, and programming specifically, plays a role in either a specific form of entertainment or as a vehicle for self expression.",
        "prep": "* Review the research resources linked in Code Studio\r\n* Print a copy of [r cs-entertainment-activity] for each group of three students"
    },
    "chapter-1/project-digital-greeting-card": {
        "cs_content": "This end of chapter assessment is a good place for students to bring together all the pieces they have learned (drawing, variables, sprites, images, conditionals, user input) in one place. Students should still be working with code that is easily readable and doesn't involve a whole lot of magic. Giving students the opportunity to really be creative after learning all these new concepts will help to engage them further as we head into chapter 2.",
        "description": "In this cumulative project for Chapter 1, the class plans for and develops an interactive greeting card using all of the programming techniques they've learned to this point.",
        "overview": "In this cumulative project for Chapter 1, students plan for and develop an interactive greeting card using all of the programming techniques they've learned to this point.",
        "prep": "* Read the Forum\r\n* Print out a copy of the [r interactive-card-activity-guide] Activity Guide for each student"
    },
    "chapter-1/sending-formatted-text": {
        "cs_content": "This lesson gives a glimpse into \"coding languages\" by having students invent a way to use plain ASCII text to encode other text.  At this point we really begin to see how layers upon layers of encodings - all tracing back to binary - work together to encode complex information.\r\n\r\nWe also want to make a connection to the Internet and protocols. Information traveling across the Internet will often need to contain both the contents of the message, itself, and information that helps to format, route, or interpret this data. \r\n\r\nDeveloping means for differentiating between these two types of information has led to the creation of a number of ubiquitous protocols and languages. HTML (short for HyperText Markup Language) is the language in which the content and formatting of a web page are written.  And the protocol HTTP, or HyperText Transfer Protocol, is another ASCII-based protocol that is the foundation of communication on the web - it was designed to send and receive web page data over the internet. In both cases, plain ASCII text is imbued with deeper meaning through the development of well-defined protocols.\r\n",
        "description": "Students invent a protocol that uses ASCII  (the standard plain text encoding scheme) to encode formatted text such as fonts, colors, sizes, etc.  Students test their protocol using the Internet Simulator, now configured to send and interpret ASCII text, to see if a partner can properly render (draw on paper) the formatting encoded in a message.",
        "overview": "In this lesson, students are first introduced to the standard number-to-text encoding scheme used in computers and on the Internet known as [v ASCII] encoding. Students will invent a communication protocol that uses only plain text ASCII characters to encode fancier formatting for text such as fonts, colors, sizes, etc.   Students will demonstrate their protocol by using the Internet Simulator to send an encoded message to a partner, who must correctly interpret the formatting and draw the result on a piece of paper.\r\n",
        "prep": "* (Optional) Poster Paper\r\n* Markers or Crayons \r\n* Section prepped to use Internet Simulator in Code Studio."
    },
    "chapter-1/sending-numbers": {
        "cs_content": "The main purpose of this lesson is to reveal that just because we now know how binary numbers work, there are still challenges of information representation and communication.  We use the Internet Simulator to enforce some of the constraints imposed by real computers and systems.  In particular we are intersted in developing a more robust [v protocol] for sending a list of numbers over the internet.  \r\n\r\nStudents will need to make choices about how to structure their messages in terms of number of bits to use for each number and even how to communicate the beginning and end of the list. While the binary number system can be used to represent any value we wish, in practice the range of values we are able to represent is limited by the number of bits we use. Thus, protocols for exchanging binary information must specify in advance how many bits will form a single number among other things. Without knowing this information the receivers of a message have no way of determining how to break up an incoming stream of bits into individual numbers; it will just appear to be a random string of 0s and 1s. \r\n",
        "description": "Students invent a binary protocol for sending a line drawing represented as list of grid coordinates (numbers). Students test and hone their protocols using a new version of the Internet Simulator which is now configured to automatically send and receive streams of bits.",
        "overview": "In this lesson students will return to the Internet Simulator in order to send a simple line drawing to a classmate. Students will be presented a grid on which they will draw an image (connecting 3-7 dots with straight lines). They must develop a protocol which will allow them to send any image they might create on their grids, paying particular attention to how many bits are used to represent each binary number. Students will therefore have additional practice encoding and decoding binary numbers and develop further intuitions about the properties of binary numbers in a hands-on way. The lesson concludes by testing protocols using a teacher-supplied test-image to transmit. \r\n",
        "prep": "\r\n* (Optional) Rulers\r\n* (Optional) Extra copies of the [r sending-numbers-for-graphing-1]\t\r\n"
    },
    "chapter-1/simple-drawings-in-game-lab": {
        "cs_content": "The main purpose of this lesson is to give students a chance to get used to the programming environment, as well as the basic sequencing and debugging that they will use throughout the unit.  Students begin with an introduction to the GameLab interactive development environment (IDE), then learn the three commands (`gamelab/rect`, `ellipse`, and `fill`) that they will need to code the same types of images that they created on paper in the previous lesson.  Challenge levels provide a chance for students who have more programming experience to further explore Game Lab.",
        "description": "The class is introduced to Game Lab, the programming environment for this unit, and begins to use it to position shapes on the screen. The lesson covers the basics of sequencing and debugging, as well as a few simple commands. At the end of the lesson, the class creates an online version of the image they designed in the previous lesson.",
        "overview": "Students are introduced to Game Lab, the programming environment for this unit, and begin to use it to position shapes on the screen. They learn the basics of sequencing and debugging, as well as a few simple commands. At the end of the lesson, students will be able to program images like the ones they made with the drawing tool in the previous lesson.",
        "prep": "* Read the Forum\r\n* Prepare projector or other means of showing videos if you wish to watch as a class"
    },
    "chapter-1/sprites-and-images": {
        "cs_content": "This lesson combines the Draw Loop that students first saw in Lesson 7 and the Counter Pattern that they learned in Lesson 8 to create programs with _purposeful_ motion. By either incrementing or decrementing sprite properties, such as `sprite.x`, you can write programs that move sprites in expected patterns, instead of the randomization that we used in the past. The animations that students learn to create in this lesson lay the foundation for all of the animations and games that they will make throughout the rest of the unit.",
        "description": "By combining the Draw Loop and the Counter Pattern, the class writes programs that move sprites across the screen, as well as animate other sprite properties.",
        "overview": "By combining the Draw Loop and the Counter Pattern, students write programs that move sprites across the screen, as well as animate other sprite properties."
    },
    "chapter-1/sprites-and-mod": {
        "cs_content": "Keeping track of many shapes and the different variables that control aspects of those shapes can get very complex. There will be lots of variables with different variable names. Instead computer scientists created something called an **object** which allows for one variable name to control both the shape and all its aspects.  In Game Lab we use a certain type of object called a **sprite**.  A sprite is just a rectangle with **properties** for controlling its look. Properties are the variables that are attached to a sprite. You can access them through **dot notation**. \r\n\r\nUsing the Animation Tab, students can create or import images to be used with their sprites. Later on, these sprites will become a useful tool for creating animations, as their properties can be changed and updated throughout the course of a program.\r\n",
        "description": "In order to create more interesting and detailed images, the class is introduced to the sprite object. Every sprite can be assigned an image to show, and sprites also keep track of multiple values about themselves, which will prove useful down the road when making animations.  At the end of the lesson, everyone creates a scene using sprites.",
        "overview": "In order to create more interesting and detailed images, students are introduced to the sprite object. Every sprite can be assigned an image to show, and sprites also keep track of multiple values about themselves, which will prove useful down the road when making animations.",
        "prep": "* (Optional) Print a copy of [r sprite-scene-planning] for each student"
    },
    "chapter-1/the-draw-loop": {
        "cs_content": "The draw loop is a core component of Game Lab. The fact that the Game Lab environment repeatedly calls this function many times a second (by default 30) is what allows the tool to create animations. This lesson has two goals therefore. The first is for students to see how animation in general depends on showing many slightly different images in a sequence. To help students have physical flipbooks they can use, a video, and a map level. The second goal is for students to understand how the draw loop allows them to create this behavior in Game Lab. Students should leave the lesson understanding that the commands in the draw loop are called after all other code but are then called repeatedly at a frame rate. Students will have a chance to continue to develop an understanding of this behavior in the next two lessons, but laying a strong conceptual foundation in this lesson will serve them well for the rest of the unit.",
        "description": "This lesson introduces the draw loop, one of the core programming paradigms in Game Lab.  The class combines the draw loop with random numbers to manipulate some simple animations with dots and then with sprites. Afterwards, everyone uses what they learned to update the sprite scene from the previous lesson.",
        "overview": "In this lesson students are introduced to the draw loop, one of the core programming paradigms in Game Lab. To begin the lesson students look at some physical flipbooks to see that having many frames with different images creates the impression of motion. Students then watch a video explaining how the draw loop in Game Lab helps to create this same impression in their programs. Students combine the draw loop with random numbers to manipulate some simple animations with dots and then with sprites. At the end of the lesson students use what they learned to update their sprite scene from the previous lesson.",
        "prep": "* Print and assemble the [r random-dot-flipbook] and [r random-sprite-flipbook]\r\n* Prepare [r youtube-flipbook]"
    },
    "chapter-1/variable-reassignment": {
        "cs_content": "Reasoning about variables can be tricky, especially for new programmers. In this lesson students complete an unplugged activity using physical manipulatives (cards and string) to build a mental model of how information can be stored in a variable and manipulated by a program. This model is then extended to sprite properties, which hold values in a similar way.  This lesson introduces syntax and concepts that students will be able to “plug-in” in the following lesson. The mental model presented in this lesson will continue to be useful throughout the unit, even as students begin to write larger and increasingly complex programs.",
        "description": "This unplugged lesson explores the underlying behavior of variables. Using notecards and string to simulate variables within a program, the class implements a few short programs. Once comfortable with this syntax, the class uses the same process with sprite properties, tracking a sprite's progress across the screen.",
        "overview": "Students explore the underlying behavior of variables through an unplugged activity. Using notecards and string to simulate variables within a program, students implement a few short programs. Once comfortable with this syntax, students use the same process with sprite properties, tracking a sprite's progress across the screen.",
        "prep": "* Prepare materials for Labels and Values: index cards, post-its, or scraps of paper (2 in. by 2 in.) etc. (~ 50 per pair)\r\n* Prepare materials for Connectors: pieces of string, pens, or pipe-cleaners, etc. (~ 4 per pair)\r\n* Print copies of [r variables-unplugged-board] for each group or gather paper for students to use to make their boards.\r\n* Review the rules of the Variables Unplugged Activity to ensure you understand them and are prepared to answer questions, especially if you will be demonstrating them yourself.\r\n* Printed a copy of [r activity-guide-variables-unplugged] for each student.\r\n"
    },
    "chapter-1/variables-and-animation": {
        "cs_content": "This lesson is the first time students will see variables in the course, and they are not expected to fully understand how variables work by its conclusion. Students should therefore leave this lesson knowing that variables are a way to label a value in their programs so that they can be reused or referenced later. In the following lesson students will be introduced to sprites, which need to be referenced by a variable.  \r\n\r\nUsing variables to manipulate drawings is a surprisingly challenging skill that requires a great deal of forethought and planning. While students will use or modify many programs in this lesson, they are not expected to compose programs that use variables to modify the features of a drawing. In later lessons, students will expand their understanding of variables and more advanced ways they can be used.",
        "description": "This lesson introduces variables as a way to label a number in a program or save a randomly generated value. The class begins the lesson with a very basic description of the purpose of a variable and practices using the new blocks.  Afterwards, the class uses variables to save a random number, allowing the programs to use the same random number multiple times.",
        "overview": "In this lesson students learn how to use variables to label a number in their program or save a randomly generated value. Students begin the lesson with a very basic description of the purpose of a variable. Students then complete a level progression that reinforces the model of a variable as a way to label or name a number. Students use variables to save a random number to see that variables actually store or save their values, allowing them to use the same random number multiple times in their programs.",
        "prep": "* Review the level progression in Code Studio"
    },
    "chapter-2/a-sample-lesson": {
        "cs_content": "The purpose of this lesson is to set up and motivate students to be receptive to learning about some of the technical aspects of how the Internet functions. We want the message to be clear that a huge part of being able to solve these problems, or even to function as an informed citizen, is to be educated about how the Internet actually works as a system that is built, engineered, and maintained by people.\r\n\r\nIt is both interesting and important to know that the protocols or rules by which Internet traffic is governed are not owned or controlled by any government or business (at the moment).  It’s a group of well-meaning citizen-engineers dedicated to keeping the Internet free, open and robust for all.  \r\n\r\nThe Internet Engineering Task Force (IETF) is the group of mostly volunteer citizens that proposes and develops all of the standards and protocols that exist on the Internet. Request for Comments (RFC) documents - like the one we use in the lesson - are how these standards and protocols are defined and published for all to see on the IETF website.  They are some of the best-written technical documents in existence. \r\n\r\nAnd with a little background in how bits work, what’s necessary for protocols to work when bits are transferred over wires, they are relatively accessible reading. Here’s the full set: https://www.ietf.org/rfc.html. RFC 000 (the first one) is related to what we ask students to do in the next several lessons.\r\n",
        "description": "Students read portions of a memo written by Vint Cerf entitled “The Internet is for Everyone”, a call-to-arms that highlights the benefits of a free and open Internet and identifies threats to this system. ",
        "overview": "This lesson sets the the stage for why we want to learn about how the Internet works. First students share what they currently know about how the Internet works through a KWL activity.  \r\n\r\nThen students watch a short video the introduces Vint Cerf and the Internet at high level.  Students then skim a memo written to the Internet Engineering Task Force (IETF) by Vint Cerf in 2002 entitled “The Internet is for Everyone,” which calls out a series of threats to the prospect that the Internet should be an open, easily and cheaply accessible resource for everyone on the planet. \r\n\r\nFinally we foreshadow the practice PT at the end of the unit.  Many of the questions and challenges raised by Vint Cerf still apply today, and students will be asked to research and present on one for the Practice PT.",
        "prep": "\r\n* Copies of the activity guide to distribute (or distribute online)"
    },
    "chapter-2/http-and-abstraction-on-the-internet": {
        "cs_content": "The main purpose of this lesson is round out understanding of one of the main Enduring Understandings and associated Learning Objective of the CSP Framework:\r\n\r\n * 6.1 The Internet is a network of autonomous systems.\r\n    * 6.1.1 Explain the abstractions in the Internet and how the Internet functions. [P3]\r\n\r\nThere are two main purposes to this lesson: \r\n\r\nFirst, simply getting a basic understanding of what HTTP is and what it's for. HTTP like DNS is an ASCII-text based protocol - it's just two computers sending text messages to each other.  What makes it a protocol are the rules of the \"conversation\" the two machines are having.  In the case of HTTP, it is a call-and-response protocol for a client/server relationship, where a client requests a web page or other content (image, sound, video, etc.) from a server.  The server looks for it and sends it back.\r\n\r\nSecond and perhaps more importantly, is understanding HTTP as a \"high level\" protocol that sits on top of *all* the other protocols and internet systems we've learned about in the course.  That text message conversation between the computers is being broken up into TCP/IP packets, and all the data gets sent as bits over wires and airwaves, taking different paths, and it gets interpreted reassembled at the end.  \r\n\r\nWe often talk about how the Internet works in \"layers\" and this is a perfect example of abstraction on the Internet, as one layer makes use of the functionality provided by the layer below it, without worrying about the details of how this functionality is achieved.  And HTTP doesn't have to worry about anything other than the text protocol of HTTP works.  The network software and devices on your and others' computers handle looking up addresses, breaking down data, packeting, routing, transmission and interpretation and reassembly.  It's really amazing.\r\n\r\nWhat we want students to understand is some degree of the \"Big Picture\".  We want them to be able to recognize that these layers exist and to reasonably explain how they work together for common web page requests.",
        "description": "Students learn about and investigate HTTP by looking at HTTP traffic generated within their own browser.  Students visit a variety of websites and use the browser’s built-in tools to view all the traffic.",
        "overview": "In this lesson students are introduced to another high-level protocols of the Internet, [v HTTP]. The lesson begins with a review of the layers of the Internet covered thus far, before transitioning to a video covering high-level protocols of the Internet, most notably HTTP. Students will investigate HTTP traffic generated within their own browser by accessing the browser’s developer tools and visiting a variety of websites. A handout summarizing the structure of HTTP is provided to help students understand the components of the HTTP requests and responses they will observe. The lesson concludes with students sharing their findings with their classmates and a reflection on how the layers of the Internet make use of abstraction.",
        "prep": "\r\n* Practice accessing the Developer Tools for the browser used in your classroom (see Worksheet for links to directions)"
    },
    "chapter-2/routers-and-reduncancy": {
        "cs_content": "The main purpose here is to use the Internet Simulator to dive into examining the network traffic that's generated by students in the class.  Seeing traffic like this in real life is very hard if not impossible since only engineers of large networks have access to router data on a large scale, and it's also more complicated to understand. While our network is simulated and provides a simple view, the basics are the same, and quick investigations reveal interesting things. We want students to simply get a taste for both the scale and the implications of what routers do.\r\n\r\nCS Background: A router is a computer designed to receive and redirect packets of information based upon the addressing information (e.g. an IP address) contained in the packet. Routers will either deliver a packet to its final desination or forward it to one of several other routers it is connected to. By monitoring current network conditions, a router can determine which of these will allow the packet to reach its destination fastest. There will often be redundant paths between two locations on the Internet, and so if one path is experiencing traffic or otherwise out of service, additional paths will be available. This redundancy makes the Internet more reliable and also helps the Internet to scale, accommodating new users (and routers!) as they are connected to the system.\r\n",
        "description": "Students use a new version of the Internet Simulator configured with simulated IP addresses and routers to explore the benefits (and potential security concerns) associated with routing traffic across the Internet. Students should see that messages go through many different routers, may not always take the same path to reach a destination, and all the traffic is publicly viewable!",
        "overview": "In this lesson students explore the benefits (and potential security concerns) associated with routing traffic across the Internet. Building on their introduction to IP addresses in the previous lesson, students use a version of the Internet Simulator that allows messages to be sent only to an intended recipient, as indicated by the IP address. The Internet Simulator also allows students to examine the traffic that goes through all of the (simulated) routers on the network. They will discover that messages go through many different routers, may not always take the same path to reach the final destinaton, and that the routers (and their owners) can *see all of this traffic*!",
        "prep": "\r\n* Review functionality of Internet Simulator with address fields as well as router / network tables"
    },
    "chapter-2/routers-and-reduncancy-1": {
        "cs_content": "This is a problem-solving lesson.  On the real Internet packet sizes are limited, and transmission is unreliable.  In this lesson we have setup the Internet simulator to restrict packet-size to be very small - 16-bits for the *to* and *from* addresses plus **only 8 ASCII characters**. Also, the **Simulator drops packets** pretty regularly.  In a set of 10 messages it's very likely one or two will be dropped.  You may need to justify these restrictions to students, acknowledging that, yes, this is a simulation, but these types of constraints are a very real problem on the Internet.\r\n\r\nThe problem students have to solve is how to use the 8-ASCII-characters-worth of data to include both a piece of message you're trying to send, as well as information about how many messages (packets) there are in the whole message, and which number *this* packet is.\r\n\r\nStudents should invent or at least appreciate the need for something like the Transmission Control Protocol [v TCP].  TCP was designed to overcome the inherent unreliability of the Internet. A small but non-negligible percentage of packets are lost in transmission because of faults in the infrastructure of the Internet. In order to constrain the extent of these errors, larger messages are divided into many packets which are individually routed to their recipient. The receiving computer will send an acknowledgement confirming the receipt of that packet. If the sending computer does not receive an acknowledgement, it will resend the packet until all packets have been acknowledged. \r\n\r\nSince packets may arrive out of order, additional data must be included to indicate the order in which the packets should be arranged. Thus, while individual packets cannot be guaranteed to arrive, eventually an entire message can be accurately reconstructed.\r\n",
        "description": "Through an unplugged activity students are introduced to packets, and issues with packets being delayed and dropped.  Students invent a protocol to reliably send a message over an unreliable network using the Internet Simulator now configured to be \"unreliable\" by delaying and randomly dropping packets sent between routers.",
        "overview": "In this lesson student develop a protocol for reliably sending a message over an unreliable internet.  The Internet Simulator has been setup for this lesson to restrict messages to no more than 8 characters each, and messages get dropped messages with some probability on every hop.\r\n\r\nStudents are given time to experiment with the Internet Simulator and develop their own protocol, possibly testing or demonstrating their protocol to their peers. At the conclusion of the lesson, students watch a short video explaining how these challenges are addressed in the real world with [v TCP] - the Transmission Control Protocol.\r\n",
        "prep": "\r\n* Review functionality of Internet Simulator with transmission failure\r\n* Copies of the Activity Guide"
    },
    "chapter-2/routers-and-reduncancy-1/algorithms-detour-minimum-spanning-tree": {
        "cs_content": "The MST is a problem in a field of study known as Graph Theory in mathematics and computer science. Problems involving graphs come up a lot in computer science, not only related to networking problems, but also in describing more sophisticated or interconnected relationships between data and information, for example, complicated scheduling problems, logistics, or even sociology problems, or interactions between molecules.  Many real-world problems can be expressed or visualized as graphs.\r\n\r\nThe MST problem is interesting because it has an optimal best solution, and the algorithm for finding the MST on a graph is relatively straightforward to understand.  The interesting thing about the MST is that a graph might have multiple “best” solutions, and there are several different algorithms for finding them.\r\n",
        "description": "In this and the subsequent lesson, we consider some of the strategies used to construct networks and find paths for data in them. While this has a connection to ideas about the Internet, the focus of these lessons is on algorithms, formal techniques, and processes for solving problems. Students will explore and solve the Minimum Spanning Tree (MST) problem, first, in an unplugged fashion on paper. The real challenge is not in solving a particular instance of the minimum spanning tree, but to develop an algorithm, a clear series of steps, that if followed properly, will solve any instance of the problem. There is a possible misconception to look out for: the MST has a definite, verifiable optimal solution, as opposed to the Text Compression problem (from Unit 1), which does not.",
        "overview": "In this and the subsequent lesson, we consider some of the strategies used to construct networks and find paths for data in them. While this has a connection to ideas about the Internet, the focus of these lessons is on algorithms, formal techniques, and processes for solving problems. Students will explore and solve the Minimum Spanning Tree (MST) problem, first, in an unplugged fashion on paper. The real challenge is not in solving a particular instance of the minimum spanning tree, but to develop an algorithm, a clear series of steps, that if followed properly, will solve any instance of the problem. There is a possible misconception to look out for: the MST has a definite, verifiable optimal solution, as opposed to the Text Compression problem (from Unit 1), which does not.\r\n",
        "prep": "\r\n* Copies of Activity Guide"
    },
    "chapter-2/routers-and-reduncancy-1/algorithms-detour-shortest-path": {
        "cs_content": "Algorithms for the [Shortest Path Problem](http://en.wikipedia.org/wiki/Shortest_path_problem) have many applications and it’s a widely studied class of problems in computer science. The web abounds with video lectures and presentations about it. [Dijkstra’s algorithm](http://en.wikipedia.org/wiki/Dijkstra%27s_algorithm), which students follow in the lesson, is one of the most famous shortest path algorithms. While shortest path algorithms are not required knowledge for CS Principles, understanding how algorithms are expressed, and being able to reason about and informally analyze algorithms is. This lesson should set a good foundation for the aspects of expressing and analyzing algorithms that make them challenging and interesting.\r\n",
        "description": "In this lesson students will explore the Single Source Shortest Path problem, by solving the problem with pencil and paper first, then by following a famous algorithm that solves the shortest path problem known as Dijkstra’s Algorithm.  Even though this is an algorithms detour, there is a strong connection in this lesson to routing algorithms used on the Internet.  This lesson also introduces ideas about how we analyze algorithms: looking for correctness, efficiency and running time.  As foreshadowing: in the next lesson students will act out another distributed shortest path algorithm used by routers to learn about the Internet dynamically.",
        "overview": "In this lesson students will explore the Single Source Shortest Path problem, by solving the problem with pencil and paper first, then by following a famous algorithm that solves the shortest path problem known as Dijkstra’s Algorithm.  Even though this is an algorithms detour, there is a strong connection in this lesson to routing algorithms used on the Internet.  This lesson also introduces ideas about how we analyze algorithms: looking for correctness, efficiency and running time.  As foreshadowing: in the next lesson students will act out another distributed shortest path algorithm used by routers to learn about the Internet dynamically.\r\n",
        "prep": "\r\n* Activity Guide printing:\r\n    * Page 1: one copy per student\r\n    * Pages 2-9 (8 different graph diagrams): each pair of students needs a copy of one of these pages"
    },
    "chapter-2/routers-and-reduncancy-1/how-routers-learn": {
        "cs_content": "Routers, like many systems on the Internet, are governed by protocols. In order to determine where a packet should be sent so that it can reach its desired destination, the router uses a static or dynamic routing protocol such as Routing Information Protocol (RIP) or Open Shortest Path First (OSPF), which both create and maintain a routing table. \r\n\r\nRouters are only able to communicate with their directly connected neighbors, so in order to generate an efficient table for sending packets they communicate with their neighbors, comparing who has the best way to reach a particular destination. As routers learn about more paths, they are able to share this information with their neighbors to help update and maintain their routing tables.\r\n",
        "description": "This lesson is the last of the algorithm series. Building off of the previous lesson about shortest path algorithms, the activity in this lesson shows how routers learn about the rest of the Internet in order to route traffic so it takes the shortest path. In the previous lessons, students use the Internet Simulator to send packets to other students through simulated routers. The path that the packet follows, and how the router knows where to send it, however, has been largely untouched. Today, students simulate the process of a router joining a network and generating a router table that would allow them to send packets to anyone else in their network as efficiently as possible. They then reflect on the process by comparing the similarities between the SSSP problem and the process the used today, and how it facilitates the structure of the Internet.",
        "overview": "This lesson is the last of the algorithm series. Building off of the previous lesson about shortest path algorithms, the activity in this lesson shows how routers learn about the rest of the Internet in order to route traffic so it takes the shortest path. In the previous lessons, students use the Internet Simulator to send packets to other students through simulated routers. The path that the packet follows, and how the router knows where to send it, however, has been largely untouched. Today, students simulate the process of a router joining a network and generating a router table that would allow them to send packets to anyone else in their network as efficiently as possible. They then reflect on the process by comparing the similarities between the SSSP problem and the process the used today, and how it facilitates the structure of the Internet.\r\n",
        "prep": "\r\n* Print activity guides for each group. Even if there are fewer than 8 students in a group, all 8 router worksheets must be printed.\r\n* Way to display the [Network Diagram](https://docs.google.com/document/d/1ipliYYBpThPt4Xsl7eZygnN6Z8Weyufyqc7XkTpMMN0/edit?usp=sharing)\r\n* Classroom Setup: There is more significant classroom setup for this lesson. See directions in the Activity Guide.\r\n* Chart paper and markers"
    },
    "chapter-2/the-internet-and-society": {
        "cs_content": "This lesson has dual purposes of honing \"rapid research\" skills and tying a temporary bow on the Internet Unit.\r\n\r\nThe act of doing \"rapid research\" is one that will come up over and over again in this course.  We want to build students' confidence and skills in researching  topic using a variety of sources.  In the case of this lesson we want students to read articles on the issues but scan for the terms and vocabulary they know like:  IP, DNS, HTTP, routing, packets, scaling, redundancy, reliability.  We want students to be able to explain with some level of technical proficiency *how* these things work as well as the potential beneficial and harmful effects.\r\n\r\nNet Neutrality and Internet Censorship are related issues having to do with organizations attempting to control internet traffic for a variety of reasons. There are many other large societal issues and dilemmas related to the Internet besides these that like: big data, surveillance, security and encryption. We address these issues in Unit 4: Big Data and Privacy.  For this practice PT we want to keep the focus on issues that relate more directly to the systems and protocols",
        "description": "In this Practice Performance Task students research and prepare a flash talk about the controversial issues around either Net Neutrality or Internet Censorship.  The talk and artifacts produced should exhibit students' knowledge of the Internet.",
        "overview": "This lesson is a capstone to the Internet unit. Students will research and prepare a flash talk about an issue facing society: either **[v Net Neutrality]** or **Internet Censorship**. Developing an informed opinion about these issues hinges on an understanding of how the Internet functions as a system.  Students will prepare and deliver a flash talk that should combine forming an opinion about the issue and an exhibition of their knowledge of the internet.\r\n\r\nThis lesson is good *practice* for certain elements of the AP Explore Performance Task.<sup>1</sup> The primary things practiced here are: doing a bit of research about impacts of computing (though here it’s specifically about the Internet), explaining some technical details related to ideas in computer science, and connecting these ideas to global and social impacts. Students will practice synthesizing information, and presenting their learning in a flash talk. \r\n\r\n<sup>1</sup>**Note:** This is NOT the official AP® Performance Task that will be submitted as part of the Advanced Placement exam; it is a practice activity intended to prepare students for some portions of their individual performance at a later time.",
        "prep": "\r\n* Review the Practice PT and decide how students should present (see Lesson Plan)"
    },
    "chapter-2/the-need-for-addressing": {
        "cs_content": "This lesson builds up to students learning about the “Internet Protocol” addressing system, commonly known as [v IP Addresses].\r\n\r\nUp to this point in the course, the Internet Simulator has only assumed point-to-point communication.  The \"protocols\" students were inventing mostly had to do with encoding information in binary, rather than also encoding communication information required for successful delivery of the message.\r\n\r\nThe lesson mimics a real problem that designers of the internet had to solve. Many computers are connected together by networks. So if a computer sends some bits out, those bits pass through many computers. How does a computer know who those bits are for?  If a response is necessary, how does it send it back?  This is a complicated question, but the first part of the answer is that you need an addressing system, and some kind of fixed structure for messages that everyone agrees on (a protocol) so messages can be interpreted properly.  (We'll get to routing later).\r\n\r\nThe Internet Simulator for this lesson is setup to “broadcast” every message to every person in the group. Since everyone receives any bits that were sent by anyone else, a method for identifying the intended sender and receiver of the message is needed. Students will invent a protocol for addressing messages.\r\n\r\nMany network systems, such as local ethernet and WiFi, rely on addressing schemes to make sure bits are received by the correct computer based on address and for other computers to simply ignore messages not intended for them. ",
        "description": "Students invent a protocol (similar to the real Internet Protocol IP) to encode the necessary elements for playing a simplified, but multi-person, game of Battleship. Students first play unplugged, then using a new version of the Internet Simulator configured to allow a user to broadcast messages to a group.",
        "overview": "In this lesson, students explore more deeply how communication between multiple computers can work over the Internet. They do this by playing a simplified game of Battleship, in which the first game is played unplugged, in their table groups, and the second game is played using the Internet Simulator, so that multiple students can connect to each other and see each other’s messages. Students must devise a messaging protocol that makes it clear who is sending the message and who the intended recipient is.\r\n\r\nStudents then devise a *binary protocol* for playing this game which will entail developing an addressing system for players, as a well as a formal packet structure for transmitting data about the state of the game.\r\n\r\n**NOTE**: this is a large lesson that will likely need to span 2 days of class.\r\n",
        "prep": "\r\n* Copies of the Battleship game board for each student\r\n* Poster paper or methods/materials for students to present\r\n"
    },
    "chapter-2/the-need-for-dns": {
        "cs_content": "The basic purpose of this lesson is to show students in kinesthetic and interactive ways some of the challenges solved, and created by, DNS.  At its core, the DNS is \"simply\" a hierarchical system of computers and databases, that maps IP addresses to domain names. It enables Internet users to connect human-language locations on the Internet with numeric addresses used by IP. While distributed and hierarchical, it can be treated in the abstract as a centralized registry of locations on the Internet, allowing users to quickly find locations they are looking for and register themselves so that others may find them. \r\n",
        "description": "Through an unplugged activity students see the difficulties in trying to maintain a universal name-to-IP address mapping.  The Domain Name System (DNS) is introduced and students can experiment with a simplified version using the Internet Simulator.",
        "overview": "The core idea of this lesson occurs in the unplugged activity that kicks off the lesson, in which students try to keep track of IP addresses that had been randomly assigned to each student in the class, while at the same time the teacher occasionally changes students' addresses.  This leads to identifying the need for an authoritative system for name-to-address mappings, known as the Domain Name System or [v DNS].\r\n\r\nStudents then briefly experiment with a DNS protocol in the Internet Simulator.  The activity is similar, in that students will have to grapple with IP addresses changing in real time and use the built in DNS protocol to resolve the issues. \r\n\r\nThe lesson ends with students doing some rapid research about DNS and some of its vulnerabilities, particularly what are known as Denial of Service Attacks.\r\n",
        "prep": "\r\n* MUST print out and have prepared IP Address Labels for students walking into class\r\n* Copies of Worksheet and Activity Guide\r\n* Familiarize yourself with the Getting Started activity and what you need to do"
    },
    "course1/artist-loops": {
        "description": "Returning to the artist, students learn to draw more complex images by looping simple sequences of instructions.",
        "overview": "Returning to the artist, students learn to draw more complex images by looping simple sequences of instructions."
    },
    "course1/artist-sequence": {
        "description": "In this lesson students will take control of the Artist to complete simple drawings on the screen.",
        "overview": "In this lesson students will take control of the Artist to complete simple drawings on the screen."
    },
    "course1/artist-shapes": {
        "description": "Returning to the Artist, the puzzles in this stage are focused on drawing, combining, and dividing squares and rectangles.",
        "overview": "Returning to the Artist, the puzzles in this stage are focused on drawing, combining, and dividing squares and rectangles."
    },
    "course1/bee-loops": {
        "description": "In the last stage students used loops to repeat simple movements. Now they're going to add to that the looping of actions in order to help the bee collect more nectar and make more honey.",
        "overview": "In the last stage students used loops to repeat simple movements. Now they're going to add to that the looping of actions in order to help the bee collect more nectar and make more honey."
    },
    "course1/bee-sequence": {
        "description": "In this lesson students will help their bees to collect nectar from flowers and create honey in honeycombs. This builds on the Maze levels by adding action blocks to the movement blocks students are already familiar with.",
        "overview": "In this lesson students will help their bees to collect nectar from flowers and create honey in honeycombs. This builds on the Maze levels by adding action blocks to the movement blocks students are already familiar with."
    },
    "course1/getting-loopy": {
        "description": "Loops are a handy way of describing actions that repeat a certain numbers of times. In this lesson, students will practice converting sets of actions into a single loop.",
        "overview": "Loops are a handy way of describing actions that repeat a certain numbers of times. In this lesson, students will practice converting sets of actions into a single loop.",
        "prep": "- [Lesson Video](http://youtu.be/Vo2woYRRogA?list=PL2DhNKNdmOtqBgWyF5kmy2oPh0U-Zfv2G)\r\n- Teacher Lesson Guide\r\n- Print one [Getting Loopy Activity Worksheet](https://levelbuilder.code.org/curriculum/course1/12/Activity12-GettingLoopy.pdf) for the class\r\n- Print Assessment Worksheet: [Getting Loopy Assessment](https://levelbuilder.code.org/curriculum/course1/12/Assessment12-GettingLoopy.pdf) for each student\r\n"
    },
    "course1/maze-debugging": {
        "description": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including missing blocks, extra blocks, and misordered blocks.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including missing blocks, extra blocks, and misordered blocks."
    },
    "course1/maze-loops": {
        "description": "Building on the concept of repeating instructions from Getting Loopy, this stage will have students using loops to more efficiently traverse the maze.",
        "overview": "Building on the concept of repeating instructions from Getting Loopy, this stage will have students using loops to more efficiently traverse the maze."
    },
    "course1/maze-sequence": {
        "description": "In this series of puzzles, students will build on the understanding of algorithms learned in the Happy Maps and Move It Unplugged activities. Featuring characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of the maze to the pig at the other side.",
        "overview": "In this series of puzzles, students will build on the understanding of algorithms learned in the Happy Maps and Move It Unplugged activities. Featuring characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of the maze to the pig at the other side."
    },
    "course1/play-lab-create-a-story": {
        "description": "In this culminating plugged activity, students will have the opportunity to apply all of the coding skills they've learned to create an animated story. It's time to get creative and create a story in the Play Lab!",
        "overview": "In this culminating plugged activity, students will have the opportunity to apply all of the coding skills they've learned to create an animated story. It's time to get creative and create a story in the Play Lab!"
    },
    "course1/spelling-bee": {
        "description": "Part puzzle, part word search, the Spelling Bee asks students to program a bee to find common words in a grid.",
        "overview": "Part puzzle, part word search, the Spelling Bee asks students to program a bee to find common words in a grid."
    },
    "course2/artist-debugging": {
        "description": "In this stage, students will continue practicing their debugging skills by helping the Artist to fix pictures that aren't coming out quite right.",
        "overview": "In this stage, students will continue practicing their debugging skills by helping the Artist to fix pictures that aren't coming out quite right."
    },
    "course2/artist-loops": {
        "description": "Returning to the artist, students learn to draw more complex images by looping simple sequences of instructions.",
        "overview": "Returning to the artist, students learn to draw more complex images by looping simple sequences of instructions."
    },
    "course2/artist-nested-loops": {
        "description": "Students use the Artist environment to write programs that have looped statements inside another loop, which is called a nested loop.",
        "overview": "Students use the Artist environment to write programs that have looped statements inside another loop, which is called a nested loop."
    },
    "course2/artist-sequence": {
        "description": "In this lesson students will take control of the Artist to complete simple drawings on the screen.",
        "overview": "In this lesson students will take control of the Artist to complete simple drawings on the screen."
    },
    "course2/bee-conditionals": {
        "description": "Up until this point all the programs your students have written should run exactly the same way every time - reliable, but not very flexible. In this stage we introduce the conditional statement, code that functions differently depending on the conditions it encounters.",
        "overview": "Up until this point all the programs your students have written should run exactly the same way every time - reliable, but not very flexible. In this stage we introduce the conditional statement, code that functions differently depending on the conditions it encounters."
    },
    "course2/bee-debugging": {
        "description": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and misordered blocks.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and misordered blocks."
    },
    "course2/bee-loops": {
        "description": "In the last stage students used loops to repeat simple movements. Now they're going to add to that the looping of actions in order to help the bee collect more nectar and make more honey.",
        "overview": "In the last stage students used loops to repeat simple movements. Now they're going to add to that the looping of actions in order to help the bee collect more nectar and make more honey."
    },
    "course2/maze-loops": {
        "description": "Building on the concept of repeating instructions from Getting Loopy, this stage will have students using loops to more effeciently traverse the maze.",
        "overview": "Building on the concept of repeating instructions from Getting Loopy, this stage will have students using loops to more effeciently traverse the maze."
    },
    "course2/maze-sequence": {
        "description": "In this series of puzzles students will build on the understanding of algorithms learned in the Graph Paper Programming and Real-Life Algorithms Unplugged activities. Featuring characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of the maze to the pig at the other side. To do this they will stack blocks together in a linear sequence to move straight or turn left and right.",
        "overview": "In this series of puzzles students will build on the understanding of algorithms learned in the Graph Paper Programming and Real-Life Algorithms Unplugged activities. Featuring characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of the maze to the pig at the other side. To do this they will stack blocks together in a linear sequence to move straight or turn left and right.",
        "prep": " - Watch [r csf-graph-paper-teacher-vid]"
    },
    "course2/play-lab-create-a-story": {
        "description": "In this culminating plugged activity, students will have the opportunity to apply all of the coding skills they've learned to create an animated story. It's time to get creative and create a story in the Play Lab!",
        "overview": "In this culminating plugged activity, students will have the opportunity to apply all of the coding skills they've learned to create an animated story. It's time to get creative and create a story in the Play Lab!"
    },
    "course3/artist": {
        "description": "This course is a review of artist concepts from Course 2. Students will draw images with the artist using a combination of sequences and loops.",
        "overview": "This course is a review of artist concepts from Course 2. Students will draw images with the artist using a combination of sequences and loops."
    },
    "course3/artist-functions": {
        "description": "As an introduction to functions (reuseable blocks of code), students will use functions to draw shapes on the screen and modify those functions to fit different purposes.",
        "overview": "As an introduction to functions (reuseable blocks of code), students will use functions to draw shapes on the screen and modify those functions to fit different purposes."
    },
    "course3/artist-nested-loops": {
        "description": "Students use the Artist environment to write programs that have looped statements inside another loop, which is called a nested loop.",
        "overview": "Students use the Artist environment to write programs that have looped statements inside another loop, which is called a nested loop."
    },
    "course3/artist-patterns": {
        "description": "Students use the Artist environment to explore nested loops that draw complex patterns.",
        "overview": "Students use the Artist environment to explore nested loops that draw complex patterns."
    },
    "course3/bee-conditionals": {
        "description": "In the Bee environment, students write programs with conditional statements. Students originally learned this concept in Course 2, but this lesson introduces more complex implementations of conditionals.",
        "overview": "In the Bee environment, students write programs with conditional statements. Students originally learned this concept in Course 2, but this lesson introduces more complex implementations of conditionals."
    },
    "course3/bee-debugging": {
        "description": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors including missing blocks, extra blocks, and misordered blocks.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors including missing blocks, extra blocks, and misordered blocks."
    },
    "course3/bee-functions": {
        "description": "Using the Bee environment, students use and modify functions to help the bee collect nectar and make honey.",
        "overview": "Using the Bee environment, students use and modify functions to help the bee collect nectar and make honey."
    },
    "course3/bee-nested-loops": {
        "description": "Students use the Bee environment to write programs using nested loops.",
        "overview": "Students use the Bee environment to write programs using nested loops."
    },
    "course3/bounce": {
        "description": "In this special level students get to build their own Flappy Bird clone. By using event handlers to detect mouse clicks and object collisions.",
        "overview": "In this special level students get to build their own Flappy Bird clone. By using event handlers to detect mouse clicks and object collisions."
    },
    "course3/computational-thinking": {
        "description": "For this activity, no instructions are provided. Instead, students will use examples of what imaginary players have done to figure out how to play the game. This lesson gives students the opportunity to practice the four arts of computational thinking (decomposition, pattern matching, abstraction, and algorithms) in one cohesive activity.",
        "overview": "For this activity, no instructions are provided. Instead, students will use examples of what imaginary players have done to figure out how to play the game. This lesson gives students the opportunity to practice the four arts of computational thinking (decomposition, pattern matching, abstraction, and algorithms) in one cohesive activity.",
        "prep": "- Watch the [r teacher-video-computational-thinking].\r\n- Watch the [r lesson-in-action-computational-thinking]\r\n- This Teacher Lesson Guide\r\n- Print one [Computational Thinking Kit](https://levelbuilder.code.org/curriculum/course3/1/Activity1-ComputationalThinking.pdf) per group\r\n- Print one [Computational Thinking Assessment](https://levelbuilder.code.org/curriculum/course3/1/Assessment1-CompThinking.pdf) for each student"
    },
    "course3/farmer-while-loops": {
        "description": "Using while loops, students control a farmer to shovel dirt into holes until they’re full and remove dirt from piles until it’s all gone.",
        "overview": "Using while loops, students control a farmer to shovel dirt into holes until they’re full and remove dirt from piles until it’s all gone."
    },
    "course3/functional-suncatchers": {
        "description": "In this lesson, students will make a suncatcher out of string, beads, and a special charm. The students will follow a series of repetitive steps, then be asked to identify certain sets of “skills” that are duplicated several times. Once those skills are defined, they will be called from a main program and the whole beautiful process of creation will be recorded on a single sheet of paper. The final program will be geared toward the entire class, whatever their type of string, beads, and charms. To effectively allow for this, students will need to “abstract out” the details of their specific materials and create vague terms for an individual’s supplies. This use of generic placeholders is a wonderful introduction to variables.",
        "overview": "In this lesson, students will make a suncatcher out of string, beads, and a special charm. The students will follow a series of repetitive steps, then be asked to identify certain sets of “skills” that are duplicated several times. Once those skills are defined, they will be called from a main program and the whole beautiful process of creation will be recorded on a single sheet of paper. The final program will be geared toward the entire class, whatever their type of string, beads, and charms. To effectively allow for this, students will need to “abstract out” the details of their specific materials and create vague terms for an individual’s supplies. This use of generic placeholders is a wonderful introduction to variables.",
        "prep": "- Watch the [r teacher-video-functional-suncatchers].\r\n- Watch the [r lesson-in-action-functional-suncatchers].\r\n- This Teacher Lesson Guide\r\n- Print one [Skills Sheet](https://levelbuilder.code.org/curriculum/course3/4/Activity4-FunctionalSuncatchers.pdf) per group\r\n- Print one [Fun-ctional Skills Assessment](https://levelbuilder.code.org/curriculum/course3/4/Assessment4-FunctionalSkills.pdf) for each student\r\n- Gather a variety of beading supplies as described above. (These can easily be found at craft warehouses, dollar stores, or even online.)\r\n"
    },
    "course3/maze": {
        "description": "This course is a review of maze concepts from Course 2. Students will help the zombie get to the sunflower using a combination of sequences and loops.",
        "overview": "This course is a review of maze concepts from Course 2. Students will help the zombie get to the sunflower using a combination of sequences and loops."
    },
    "course3/maze-conditionals": {
        "description": "Using the Maze environment, students write programs using conditionals.",
        "overview": "Using the Maze environment, students write programs using conditionals."
    },
    "course3/play-lab-create-a-game": {
        "description": "Building on the previous Play Lab activity, students will add deeper interactivity as they build their own video games.",
        "overview": "Building on the previous Play Lab activity, students will add deeper interactivity as they build their own video games."
    },
    "course3/play-lab-create-a-story": {
        "description": "In this activity, students will have the opportunity to apply all of the coding skills they've learned to create an animated story. It's time to get creative and create a story in the Play Lab!",
        "overview": "In this activity, students will have the opportunity to apply all of the coding skills they've learned to create an animated story. It's time to get creative and create a story in the Play Lab!"
    },
    "course4/abstraction-with-mad-glibs": {
        "description": "Abstraction is one of the most important skills for a computer scientist to understand. It simplifies problems and prevents unnecessary repetition. A good coder uses abstraction just about every time she creates a program. This activity will have your students analyze stories for differences so that they can abstract them away. Those abstracted stories become templates for fun and crazy new ones.",
        "overview": "Abstraction is one of the most important skills for a computer scientist to understand. It simplifies problems and prevents unnecessary repetition. A good coder uses abstraction just about every time she creates a program. This activity will have your students analyze stories for differences so that they can abstract them away. Those abstracted stories become templates for fun and crazy new ones.",
        "prep": "- Print one [Mad Glibs Abstraction Worksheet](https://levelbuilder.code.org/curriculum/course4/5/Activity5-MadGlibs.pdf) per student\r\n- Print one [Abstraction Assessment Worksheet](https://levelbuilder.code.org/curriculum/course4/5/Assessment5-MadGlibs.pdf)\r\n- Provide student with paper, pens & pencils"
    },
    "course4/algorithms-tangrams": {
        "description": "This lesson shows us something important about algorithms. If you keep an algorithm simple there are lots of ways to use it. If you want to make sure everyone ends up with the same thing, then your algorithm needs more detail.",
        "overview": "This lesson shows us something important about algorithms. If you keep an algorithm simple there are lots of ways to use it. If you want to make sure everyone ends up with the same thing, then your algorithm needs more detail.\r\n\r\nThis activity will show both options.",
        "prep": "- Watch the [r teacher-video-tangrams].\r\n- Print one [Algorithm Card](https://levelbuilder.code.org/curriculum/course4/1/Activity1-Algorithms.pdf) Images Pack per group\r\n- Print one [Tangram Set](https://levelbuilder.code.org/curriculum/course4/1/Activity1-Algorithms.pdf) per student\r\n- Print one [Tangram Assessment Worksheet](https://levelbuilder.code.org/curriculum/course4/1/Assessment1-Tangrams.pdf) per student\r\n- Provide student with scissors, paper, pens & pencils"
    },
    "course4/artist-for-loops": {
        "description": "Students use the Artist environment to write programs with for loops, similar to what they did in the previous Bee level.",
        "overview": "Students use the Artist environment to write programs with for loops, similar to what they did in the previous Bee level."
    },
    "course4/artist-functions": {
        "description": "Students use the Artist environment to draw complicated images using functions for repeated tasks.",
        "overview": "Students use the Artist environment to draw complicated images using functions for repeated tasks."
    },
    "course4/artist-functions-with-parameters": {
        "description": "Students will use the Artist environment to draw complicated images using functions with parameters to create similar shapes with small differences.",
        "overview": "Students will use the Artist environment to draw complicated images using functions with parameters to create similar shapes with small differences."
    },
    "course4/artist-loops-review": {
        "description": "This is a review of loops and nested loops. Students will use the traditional artist character, as well as a very artistic zombie, to complete and recreate repetitive drawings.",
        "overview": "This is a review of loops and nested loops. Students will use the traditional artist character, as well as a very artistic zombie, to complete and recreate repetitive drawings."
    },
    "course4/artist-variables": {
        "description": "In this lesson, students will explore the creation of repetitive designs using variables. Students will learn how variables can be used to make code more simple to write and easier to read.",
        "overview": "In this lesson, students will explore the creation of repetitive designs using variables. Students will learn how variables can be used to make code more simple to write and easier to read."
    },
    "course4/bee-for-loops": {
        "description": "Students use the Bee environment to write programs that use loops with embedded counters/index variables. These loops are called for loops, and they utilize predetermined start and stop values.",
        "overview": "Students use the Bee environment to write programs that use loops with embedded counters/index variables. These loops are called for loops, and they utilize predetermined start and stop values."
    },
    "course4/bee-functions-with-parameters": {
        "description": "This short stage illustrates how students can use their new skills with functions and parameters to change direction using binary logic.",
        "overview": "This short stage illustrates how students can use their new skills with functions and parameters to change direction using binary logic."
    },
    "course4/extreme-challenge-comprehensive": {
        "description": "The final stage in this course is intended to test comprehension and transfer of all concepts to blended puzzles.",
        "overview": "The final stage in this course is intended to test comprehension and transfer of all concepts to blended puzzles."
    },
    "course4/maze-and-bee": {
        "description": "This course is a review of maze concepts from Courses 2 and 3. Students will first help the zombie get to the sunflower using a combination of sequences and loops, then review conditionals with the flower-hunting bee.",
        "overview": "This course is a review of maze concepts from Courses 2 and 3. Students will first help the zombie get to the sunflower using a combination of sequences and loops, then review conditionals with the flower-hunting bee."
    },
    "course4/play-lab-for-loops": {
        "description": "Building on the previous Play Lab activity, students will add deeper interactivity as they build their own video games.",
        "overview": "Building on the previous Play Lab activity, students will add deeper interactivity as they build their own video games."
    },
    "course4/play-lab-functions-with-parameters": {
        "description": "Having experienced the creation and use of functions and parameters, students will get the opportunity to use the skill in the creation of Play Lab games. Later puzzles incorporate the use of multiple parameters.",
        "overview": "Having experienced the creation and use of functions and parameters, students will get the opportunity to use the skill in the creation of Play Lab games. Later puzzles incorporate the use of multiple parameters."
    },
    "course4/play-lab-variables": {
        "description": "In this activity, students will have the opportunity to play with variables in a situation that illustrates just how useful they can be. Students will edit games to give themselves the advantage and make their characters more powerful using variables as parameters.",
        "overview": "In this activity, students will have the opportunity to play with variables in a situation that illustrates just how useful they can be. Students will edit games to give themselves the advantage and make their characters more powerful using variables as parameters."
    },
    "course4/super-challenge-for-loops": {
        "description": "Students use a mix of different environments to test their knowledge of for loops.",
        "overview": "Students use a mix of different environments to test their knowledge of for loops."
    },
    "course4/super-challenge-functions-with-parameters": {
        "description": "This challenging stage allows students to hone their skills with functions and parameters to solve complex puzzles with grace and efficiency.",
        "overview": "This challenging stage allows students to hone their skills with functions and parameters to solve complex puzzles with grace and efficiency."
    },
    "course4/super-challenge-variables": {
        "description": "In this lesson, students will be challenged to dig deep into what they have learned throughout their journey to solve a handful of complex puzzles.",
        "overview": "In this lesson, students will be challenged to dig deep into what they have learned throughout their journey to solve a handful of complex puzzles."
    },
    "courseA/composite-functions": {
        "description": "In the past lessons students have defined Variables and written Fast Functions. In this stage, they will continue to explore function writing with ever increasing complexity. ",
        "overview": "In the past lessons students have defined Variables and written Fast Functions. In this stage, they will continue to explore function writing with ever increasing complexity. "
    },
    "courseA/defining-variables-and-substitution": {
        "cs_content": "As stated earlier, the programming paradigm that students are learning in this course is called [functional programming](https://en.wikipedia.org/wiki/Functional_programming), and it varies in several ways from programming paradigms that students may have seen elsewhere. One of the core tenants of functional programing is the concept of [immutability](https://en.wikipedia.org/wiki/Immutable_object). Immutable objects may not change state once they have been created, which allows variables to functional as we would expect them to in Algebra.",
        "description": "In this activity, students will learn to define variables that can be used to reference values and expressions. Once defined, their variables can be used repeatedly throughout a program as substitutes for the original values or expressions.",
        "overview": "In this activity, students will learn to define variables that can be used to reference values and expressions. Once defined, their variables can be used repeatedly throughout a program as substitutes for the original values or expressions."
    },
    "courseA/new-lesson": {
        "description": "In this lesson we will build on students' understanding variables by making functions that reduce the number of inputs required. These 'fast functions' allow students to practice using the Design Recipe to develop simple functions without the additional overhead of parsing a word problem.",
        "overview": "In this lesson we will build on students' understanding variables by making functions that reduce the number of inputs required. These 'fast functions' allow students to practice using the Design Recipe to develop simple functions without the additional overhead of parsing a word problem."
    },
    "courseA/rocket-height": {
        "description": "Using the Design Recipe, students will work through a series of word problems about calculating the height of a rocket after a given number of seconds from launch. The functions they write will be used to animate the rocket launch.",
        "overview": "Using the Design Recipe, students will work through a series of word problems about calculating the height of a rocket after a given number of seconds from launch. The functions they write will be used to animate the rocket launch."
    },
    "courseA/solving-word-problems-with-the-design-recipe": {
        "description": "In this stage students practice using the Design Recipe to write functions which solve for word problems. Towards the end of the lesson students should be ready to begin using the Design Recipe on problems from your own math curriculum.",
        "overview": "In this stage students practice using the Design Recipe to write functions which solve for word problems. Towards the end of the lesson students should be ready to begin using the Design Recipe on problems from your own math curriculum.",
        "prep": " * Print Blank Copies of the [r design-recipe-form-1]. \r\n * Review the [r design-recipe-word-problem-template] for extensions"
    },
    "courseA/the-design-recipe": {
        "cs_content": "The Design Recipe process for writing functions introduces students to some best practices in software design that most don't learn until college or later. By writing examples (or test cases, as they are often called in industry) before writing the body of the function students are following a practice called [test-driven development](https://en.wikipedia.org/wiki/Test-driven_development). In TDD software developers write failing test cases before adding a new features, and then works on their code until the test cases pass. This ensures that developers stay focused on writing code that does what they set out to do while also putting in place automated testing that ensures the program continues working as expected while more features are added.",
        "description": "In the last stage, students wrote some very simple functions - but more sophisticated functions demand a more thoughtful approach. The Design Recipe is a structured approach to writing functions that includes writing a purpose statement and test cases to ensure that the function works as expected. Once students have mastered the Design Recipe process, they can apply it to any word problem they encounter.",
        "overview": "In the last stage, students wrote some very simple functions - but more sophisticated functions demand a more thoughtful approach. The Design Recipe is a structured approach to writing functions that includes writing a purpose statement and test cases to ensure that the function works as expected. Once students have mastered the Design Recipe process, they can apply it to any word problem they encounter."
    },
    "courseA/writing-contracts": {
        "description": "Students will work their way through a number of new functions, first using each to solve a problem, and then writing a contract which describes it.",
        "overview": "Students will work their way through a number of new functions, first using each to solve a problem, and then writing a contract which describes it."
    },
    "courseB/boolean-operators": {
        "description": "Using Boolean operators, students will write code that compares values to make logical decisions.",
        "overview": "Using Boolean operators, students will write code that compares values to make logical decisions."
    },
    "courseB/booleans-and-logic": {
        "description": "Booleans are the fourth and final data type that students will learn about in this course. In this stage, students will learn about Boolean (true/false) values, and explore how they can be used to evaluate logical questions.",
        "overview": "Booleans are the fourth and final data type that students will learn about in this course. In this stage, students will learn about Boolean (true/false) values, and explore how they can be used to evaluate logical questions.",
        "prep": "* 3x5 cards"
    },
    "courseB/collision-detection-and-the-pythagorean-theorem": {
        "description": "Determining when objects on the screen touch is an important aspect of most games. In this lesson we'll look at how the Pythagorean Theorem and the Distance Formula can be used to measure the distance between two points on the plane, and then decide whether those two points (or game characters) are touching.",
        "overview": "Determining when objects on the screen touch is an important aspect of most games. In this lesson we'll look at how the Pythagorean Theorem and the Distance Formula can be used to measure the distance between two points on the plane, and then decide whether those two points (or game characters) are touching."
    },
    "courseB/conditionals-and-piecewise-functions": {
        "description": "Currently, even when passing parameters to functions, our outputs follow a very rigid pattern. Now, suppose we want parameters with some values to create outputs using one pattern, but other values to use a different pattern. This is where conditionals are needed. In this stage students will learn how conditional statements can create more flexible programs.",
        "overview": "Currently, even when passing parameters to functions, our outputs follow a very rigid pattern. Now, suppose we want parameters with some values to create outputs using one pattern, but other values to use a different pattern. This is where conditionals are needed. In this stage students will learn how conditional statements can create more flexible programs."
    },
    "courseB/conditionals-and-update-player": {
        "description": "Using conditionals, students will write functions and programs that change their behavior based on logical evaluation of input values.",
        "overview": "Using conditionals, students will write functions and programs that change their behavior based on logical evaluation of input values."
    },
    "courseB/sam-the-bat": {
        "description": "Using Boolean operators, students will write code that checks the location of a sprite to make sure it doesn't go off-screen.",
        "overview": "Using Boolean operators, students will write code that checks the location of a sprite to make sure it doesn't go off-screen."
    },
    "courseB/the-big-game-animation": {
        "description": "Returning to the Big Game we started in stage 7, students will use the Design Recipe to develop functions that animate the Target and Danger sprites in their games.",
        "overview": "Returning to the Big Game we started in stage 7, students will use the Design Recipe to develop functions that animate the Target and Danger sprites in their games."
    },
    "courseB/the-big-game-booleans": {
        "description": "Using the same logic from the previous lesson, students will write code that checks whether their Target and Danger sprites have left the screen. If their function determines that a sprite is no longer visible on screen, it will be reset to the opposite side.",
        "overview": "Using the same logic from the previous lesson, students will write code that checks whether their Target and Danger sprites have left the screen. If their function determines that a sprite is no longer visible on screen, it will be reset to the opposite side."
    },
    "courseB/the-big-game-collision-detection": {
        "description": "To finish up their video games, students will apply what they have learned in the last few stages to write the final missing functions. We'll start by using booleans to check whether keys were pressed in order to move the player sprite, then move on to applying the Pythagorean Theorem to determine when sprites are touching.",
        "overview": "To finish up their video games, students will apply what they have learned in the last few stages to write the final missing functions. We'll start by using booleans to check whether keys were pressed in order to move the player sprite, then move on to applying the Pythagorean Theorem to determine when sprites are touching."
    },
    "courseB/the-big-game-variables": {
        "description": "Students get their first look at the inside of their own video games. They will start development by substituting in new Images, Strings, and Numbers for existing variables.",
        "overview": "Students get their first look at the inside of their own video games. They will start development by substituting in new Images, Strings, and Numbers for existing variables."
    },
    "coursea/events": {
        "cs_content": "Students will further develop their understanding of events using Play Lab today. Events are very common in most computer programs. In this activity, students will use events to make a character move around the screen, make noises, and change backgrounds based on user-initiated events.",
        "overview": "In this online activity, students will have the opportunity to learn how to use events in Play Lab and to apply all of the coding skills they've learned to create an animated game. It's time to get creative and make a story in the Play Lab!",
        "prep": " - Play through the [r csf-course-a] in stage 12 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursea/going-places-online": {
        "cs_content": "Common Sense Education has created this lesson to teach kids the importance of being safe online. By relating places in the real world to websites on the internet, students will make important connections between safe websites and safe places in their own neighborhood.",
        "overview": "In collaboration with [r common-sense-media], this lesson helps students learn that many websites ask for information that is private and discusses how to responsibly handle such requests. Students also find out that they can go to exciting places online, but they need to follow certain rules to remain safe.",
        "prep": "- Watch the [r teacher-video-going-places].\r\n- Prepare to show the [r going-places-safely].\r\n- Live access or print-off of [SecretBuilders](http://www.secretbuilders.com/gameplay/gameplay.html) sign-up page (Click “New Player,” select an age, and then select “I’m a Girl” or “I’m a Boy.”).\r\n- Print one [r csf-keep-it-private-assessment]\tfor each student.\r\n- Make sure each student has a [r think-spot-journal].\r\n- Review [r csf-online-safety-doc] for more online safety content.\r\n"
    },
    "coursea/jigsaw-learn-to-drag-and-drop": {
        "cs_content": "The main goal of this lesson is to build students' experience with computers. By covering the most basic computer functions such as clicking, dragging, and dropping, we are creating a more equal playing field in the class for future puzzles. This lesson also provides a great opportunity to introduce proper computer lab behavior.",
        "overview": "This lesson will give students an idea of what to expect when they head to the computer lab. It begins with a brief discussion introducing them to computer lab manners, then they will progress into using a computer to complete online puzzles.",
        "prep": " - Watch the [r class-section-video]. Create your own class section on Code.org and make sure every student has a card with their **passcode** on it.\r\n - Have the school IT person add a quick link for your class section to the computer desktop.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "coursea/loops": {
        "cs_content": "This lesson gives a different perspective on how loops can create things in programming. Students can also reflect on the inefficiency of programming without loops here because of how many blocks the program would require without the help of `repeat` loops.",
        "overview": "Returning to loops, students learn to draw images by looping simple sequences of instructions. In the previous plugged lesson, loops were used to traverse a maze and collect treasure. Here, loops are creating patterns. At the end of this stage, students will be given the opportunity to create their own images using loops.",
        "prep": " - Play through the [r csf-course-a] in stage 10 to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "coursea/loops-intro": {
        "cs_content": "In this lesson, students will be learning more about loops and how to implement them in Blockly code. Using _loops_ is an important skill in programming because manually repeating commands is tedious and inefficient. With the Code.org puzzles, students will learn to add instructions to existing loops, gather repeated code into loops, and recognize patterns that need to be looped.",
        "overview": "Building on the concept of repeating instructions from \"Happy Loops,\" this stage will have students using loops to collect treasure more efficiently on Code.org.",
        "prep": " - Play through the [r csf-course-a] in stage 9 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Review [r csf-lesson-recommend]\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "coursea/loops-unplugged-happy-loops": {
        "cs_content": "This lesson serves as an introduction to loops. Loops allow for students to simplify their code by grouping commands that need to be repeated. Students will develop critical thinking skills by noticing repetition in movements of their classmates and determining how many times to repeat commands. By seeing \"Happy Maps\" again, students will get the chance to relate old concepts such as sequencing to the new concept of repeat loops.",
        "overview": "This activity revisits Happy Maps. This time, student will be solving bigger, longer puzzles with their code, leading them to see utility in structures that let them write longer code in an easier way.",
        "prep": " - Watch the [r teacher-video-happy-loops]\r\n - Print out a [r happy-map-cards] to display for the class\r\n - Print out [r happy-map-game-pieces] for each group\r\n - Print out [r happy-map-cards-xl] for each group\r\n - Print out [r happy-map-game-pieces-bonus-pack] for each group\r\n - Make sure each student has a [r think-spot-journal]"
    },
    "coursea/persistence-frustration-stevie-and-the-marbles": {
        "cs_content": "The goal of this lesson is to help students realize that failure and frustration are common when working on projects, but that doesn't mean that they should give up.\r\n\r\nIn this lesson, students will develop an understanding of what it means to be frustrated while working on a large project. It's possible that not every student will experience frustration with this activity, but there are many opportunities to open a discussion about moments in the past where students have felt frustrated but nevertheless persisted. ",
        "overview": "When students run into a barrier while answering a question or working on a project, it’s so easy for them to get frustrated and give up.  This lesson will introduce students to the idea that frustration can be an important part of learning. Here, frustration is presented as a step in the creative process, rather than a sign of failure.\r\n\r\nThis lession can be done over one or two class sessions.  If you have more time, feel free to draw out the building and revising phase of the Marble Run activity.",
        "prep": " - Watch the [r teacher-video-stevie-big-project].\r\n - Pre-read \"Stevie and the Big Project\" to identify appropriate questions for your class.\r\n - Follow instructions in the [r marble-run-teacher-prep-guide] to make a Marble Run.\r\n - Print copies of the **Marble Run Ruler** (page 2 of teacher guide) for each student or pair of students.\r\n - Prepare a resource station with cardstock, safety scissors, tape, and anything else you think might be fun for students to build with.  Include a stack of the **“Marble Run Hints”** pages from the Teacher Prep Guide, but do not advertise their existence.\r\n - (Optional) Allow students to bring cardboard, popsicle sticks, string, or other tidbits from home to add to the resource station.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "coursea/programming": {
        "cs_content": "In this lesson, students will develop programming and debugging skills on a computer platform. The block-based format of these puzzles help students learn about sequence and concepts, without having to worry about perfecting syntax.",
        "overview": "Using characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of a maze to the pig at the other side. To do this they will stack code blocks together in a linear sequence, making them move straight, turn left, or turn right.",
        "prep": " - Play through the [r csf-course-a] in stage 6 to find any potential problem areas for your class\r\n - Locate or reprint supplies for Happy Maps\r\n - Make sure each student has a [r think-spot-journal]\r\n - Cut enough [r course-ab-blockly-blocks] of each direction (N, S, E, W) to give two sets to every pair of students (if you choose Bridging Option #1)"
    },
    "coursea/programming-unplugged-happy-maps": {
        "cs_content": "The bridge from algorithms to programming can be a short one if students understand the difference between planning out a sequence and encoding that sequence into the appropriate language.  This activity will help students gain experience reading and writing in shorthand code.",
        "overview": "This unplugged lesson brings together teams with a simple task: get the \"flurb\" to the fruit. Students will practice writing precise instructions as they work to translate instructions into the symbols provided. If problems arise in the code, students should also work together to recognize bugs and build solutions.",
        "prep": " - Watch the [r teacher-video-happy-maps-2].\r\n - Print out [r happy-map-cards] for each group.\r\n - Print out [r happy-map-game-pieces] for each group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "coursea/real-life-algorithms-plant-a-seed": {
        "cs_content": "In this lesson, students will learn that algorithms are everywhere in our daily lives. For example, it is possible to write an algorithm to plant a seed. Instead of giving vague or over-generalized instructions, students will break down a large activity into smaller and more specific commands. From these commands, students must determine a special sequence of instructions that will allow their classmate to plant a seed.",
        "overview": "In this lesson, students will relate the concept of algorithms back to everyday, real-life activities by planting an actual seed. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.\r\n",
        "prep": "- Watch the [r teacher-video-plant-seed-2].\r\n- Prepare supplies for planting seeds. You'll need seeds, dirt, and paper cups for each student or group.\r\n- Print one [r csf-real-life-algorithms-plant-a-seed] for each student.\r\n- Print one [r csf-real-life-algorithms-assessment] for each student.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "coursea/test-lesson": {
        "cs_content": "Research shows that some students have less trouble debugging a program than writing one when they first learn to code. In this lesson, we introduce the idea of debugging in a real world sense.\r\n\r\nThe goal in this lesson is to teach students steps to spot a bug and to increase persistence by showing them that it's normal to find mistakes. In later lessons, students will debug actual programs on Code.org.",
        "overview": "This lesson will guide students through the steps of debugging.  Students will learn the mantra: \"What happened?  What was supposed to happen? What does that tell you?\"",
        "prep": "- Watch the [r teacher-video-unspotted-bugs].\r\n- Review the Unspotted Bugs Story ([r view-story-online])\r\n- Pre-read Unspotted Bugs to identify appropriate questions for your classroom\r\n- Follow instructions in the [r marble-run-teacher-prep-guide] to make a Marble Run (which will be arranged incorrectly at the start)\r\n- Give a [r think-spot-journal] to each student"
    },
    "coursea/the-big-event": {
        "cs_content": "Today, students will learn to distinguish events from actions. The students will see activities interrupted by having a \"button\" pressed on a paper remote. When seeing this _event_, the class will react with a unique action. Events are widely used in programming and should be easily recognizable after this lesson.",
        "overview": "Events are a great way to add variety to a pre-written algorithm. Sometimes you want your program to be able to respond to the user exactly when the user wants it to. That is what events are for.",
        "prep": "- Watch the [r teacher-video-big-event-2].\r\n- Print one [r csf-the-big-event-activity-worksheet].\r\n- Print [r csf-the-big-event-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "courseb/debugging-unspotted-bugs": {
        "cs_content": "Research shows that some students have less trouble debugging a program than writing one when they first learn to code. In this lesson, we introduce the idea of debugging in a real world sense.\r\n\r\nThe goal in this lesson is to teach students steps to spot a bug and to increase persistence by showing them that it's normal to find mistakes. In later lessons, students will debug actual programs on Code.org.",
        "overview": "This lesson will guide students through the steps of debugging. Students will learn the mantra: \"What happened? What was supposed to happen? What does that tell you?\"",
        "prep": "- Watch the [r teacher-video-unspotted-bugs].\r\n- Review the Unspotted Bugs Story ([r view-story-online]).\r\n- Pre-read Unspotted Bugs to identify appropriate questions for your classroom.\r\n- Follow instructions in the [r marble-run-teacher-prep-guide] to make a Marble Run (which will be arranged incorrectly at the start).\r\n- Give a [r think-spot-journal] to each student."
    },
    "courseb/events": {
        "cs_content": "In this online activity, students will learn how to use events in Play Lab. They will start by training the knight to move when an arrow key is pressed, then end with the opportunity to showcase the rest of the skills that they learned throughout this course, including sequence and looping, as part of the final freeplay puzzle.",
        "overview": "In this online activity, students will have the opportunity to learn how to use events in Play Lab and apply all of the coding skills that they've learned to create an animated game. It's time to get creative and make a game in Play Lab!",
        "prep": " - Play through the [r csf-course-b] in stage 12 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "courseb/events-unplugged-the-big-event": {
        "cs_content": "Today, students will learn to distinguish events from actions. The students will see activities interrupted by having a \"button\" pressed on a paper remote. When seeing this _event_, the class will react with a unique action. Events are widely used in programming and should be easily recognizable after this lesson.",
        "overview": "Events are a great way to add variety to a pre-written algorithm. Sometimes you want your program to be able to respond to the user exactly when the user wants it to. That is what events are for.",
        "prep": "- Watch the [r teacher-video-big-event-2].\r\n- Print one [r csf-the-big-event-activity-worksheet].\r\n- Print one [r csf-the-big-event-assessment] for each student.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "courseb/jigsaw-learn-to-drag-and-drop": {
        "cs_content": "The main goal of this lesson is to build experience with computers. By covering the most basic computer functions such as clicking, dragging, and dropping, we are creating a more equal playing field in the class for future puzzles. This lesson also provides a great opportunity to introduce  appropriate computer lab behavior.",
        "overview": "This lesson will give students an idea of what to expect when they head to the computer lab. It begins with a brief discussion introducing them to computer lab manners, then they will progress into using a computer to complete online puzzles.",
        "prep": " - Watch the [r class-section-video]. Create a class section and make sure every student has a card with their passcode on it.\r\n - Have the school IT person add a quick link for your class section to the computer desktop.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "courseb/loops": {
        "cs_content": "This lesson gives a different perspective on how loops can create things in programming. Students will test their critical thinking skills by evaluating given code and determining what needs to be added in order to solve the puzzle. Students can also reflect on the inefficiency of programming without loops here because of how many blocks the program would require without the help of `repeat` loops.",
        "overview": "Returning to loops, students learn to draw images by looping simple sequences of instructions. In the previous online lesson, loops were used to traverse a maze and collect treasure. Here, students use loops to create patterns. At the end of this stage, students will be given the opportunity to create their own images using loops.",
        "prep": " - Play through the [r csf-course-b] before the lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "courseb/loops-intro": {
        "cs_content": "In this lesson, students will be learning more about loops and how to implement them in Blockly code. Using _loops_ is an important skill in programming because manually repeating commands is tedious and inefficient. With these Code.org puzzles, students will learn to add instructions to existing loops, gather repeated code into loops, and recognize patterns that need to be repeated.",
        "overview": "Building on the concept of repeating instructions from \"My Loopy Robotic Friends,\" this stage will have students using loops to collect treasure more efficiently on Code.org.",
        "prep": " - Review the previous unplugged lesson and develop questions to remind students why loops are used.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "courseb/loops-unplugged-looping-with-my-robotic-friends": {
        "cs_content": "This lesson serves as a reintroduction to loops, using the now familiar set of \"robot\" programming instructions. Students will develop critical thinking skills by looking for patterns of repetition in the movements of classmates and determining how to simplify those repeated patterns using loops.",
        "overview": "Building on the initial \"My Robotic Friends\" activity, students tackle larger and more complicated designs. In order to program their \"robots\" to complete these bigger designs, students will need to identify repeated patterns in their instructions that could be replaced with a loop.",
        "prep": " - Make sure each student has a [r think-spot-journal]\r\n - Watch the [r my-loopy-rf-teacher-vid]\r\n - Prepare a stack of 20 paper cups for each group of 4 students \r\n   \r\n - (Optional) Print out one [r my-loopy-rf-packet] per group of 4 students  \r\n \r\n**OR**\r\n\r\n - Display the [r symbol-key] where students can reference throughout the lesson.\r\n - Print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n"
    },
    "courseb/more-programming-in-maze": {
        "cs_content": "With transfer of knowledge in mind, this lesson gives students a new environment to practice the skills that they have been cultivating. Star Wars fans will jump for joy when they see these puzzles. Each puzzle in this series has been added to provide a deeper understanding of the basic concepts that they will be using throughout the rest of this course.",
        "overview": "In this lesson, students will use their newfound programming skills in more complicated ways to navigate a tricky course with BB-8.",
        "prep": " - Play through the [r csf-course-b] corresponding with this lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "courseb/persistence-frustration-stevie-and-the-marbles": {
        "cs_content": "The goal of this lesson is to help students realize that failure and frustration are common when working on projects, but that doesn't mean that they should give up.\r\n\r\nIn this lesson, students will develop an understanding of what it means to be frustrated while working on a large project. It's possible that not every student will experience frustration with this activity, but there are many opportunities to open a discussion about moments in the past where students have felt frustrated but nevertheless persisted.\r\n\r\n",
        "overview": "When students run into a barrier while answering a question or working on a project, it’s so easy for them to get frustrated and give up. This lesson will introduce students to the idea that frustration can be an important part of learning. Here, frustration is presented as a step in the creative process, rather than a sign of failure.\r\n\r\nThis lesson can be done over one or two class sessions.  If you have more time, feel free to draw out the building and revising phase of the Marble Run activity.",
        "prep": "- Watch the [r teacher-video-stevie-big-project].\r\n- Pre-read \"Stevie and the Big Project\" to identify appropriate questions for your class.\r\n- Follow instructions in the [r marble-run-teacher-prep-guide] to make a Marble Run.\r\n- Print copies of the **Marble Run Ruler** (page 2 of teacher guide) for each student or pair of students\r\n- Prepare a resource station with cardstock, safety scissors, tape, and anything else you think might be fun for students to build with.  Include a stack of the **“Marble Run Hints”** pages from the Teacher Prep Guide, but do not advertise their existence.\r\n- (Optional) Allow students to bring cardboard, popsicle sticks, string, or other tidbits from home to add to the resource station.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "courseb/programming": {
        "cs_content": "In this lesson, students will develop programming and debugging skills on a computer platform. The block-based format of these puzzles help students learn about sequence and concepts, without having to worry about perfecting syntax.",
        "overview": "Using characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of a maze to the pig at the other side. To do this they will stack code blocks together in a linear sequence, making them move straight, turn left, or turn right.",
        "prep": " - Play through the [r csf-course-b] in stage 7 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "courseb/programming-unplugged-my-robotic-friends": {
        "cs_content": "This unplugged lesson brings the class together as a team with a simple task to complete: get a \"robot\" to stack cups in a specific design. This activity lays the groundwork for the programming that students will do throughout the course as they learn the importance of defining a clearly communicated algorithm.",
        "overview": "Using a set of symbols in place of code, students will design algorithms to instruct a \"robot\" to stack cups in different patterns. Students will take turns participating as the robot, responding only to the algorithm defined by their peers. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.",
        "prep": " - Watch the [r my-robotic-friends].\r\n - (Optional) Print out one [r symbol-key] per group or 2-3. Alternatively, find a place to display this information where students can reference throughout the lesson.\r\n - Prepare a stack of 10 disposable cups per group of 2-3 students, OR\r\n - (Optional) print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "courseb/sequences-algorithms-unplugged": {
        "cs_content": "In this lesson, students will learn that algorithms are everywhere in our daily lives. For example, it is possible to write an algorithm to plant a seed. Instead of giving vague or over-generalized instructions, students will break down a large activity into smaller and more specific commands. From these commands, students must determine a special sequence of instructions that will allow their classmate to plant a seed.",
        "overview": "In this lesson, students will relate the concept of algorithms back to everyday, real-life activities by planting an actual seed. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.",
        "prep": "- Watch the [r teacher-video-plant-seed-2].\r\n- Prepare supplies for planting seeds. You'll need seeds, dirt, and paper cups for each student or group.\r\n- Print one [r csf-real-life-algorithms-plant-a-seed] for each student.\r\n- Print one [r csf-real-life-algorithms-assessment] for each student.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "courseb/your-digital-footprint": {
        "cs_content": "Common Sense Education has created this lesson to teach kids the importance of understanding the permanence of something posted on the internet. By relating footprints on a map to what a student might post online, students will make important connections between being tracked by a physical footprint on a path and being tracked based on information posted online.",
        "overview": "In collaboration with [r common-sense-media], this lesson helps students learn about the similarities of staying safe in the real world and when visiting websites. Students will also learn that the information they put online leaves a digital footprint or “trail.” This trail can be big or small, helpful or hurtful, depending on how they manage it.",
        "prep": "- Watch this [r teacher-video-digital-footprint].\r\n- Prepare to show [r your-digital-footprint].\r\n- (Optional) Prepare to show [r common-sense-media-pause-think].\r\n- Common Sense Education's [r csf-follow-the-digital-trail-activity] game.\r\n- Print one [Animal Tracks](https://code.org/curriculum/course2/18/followthedigitaltrail.pdf) chart (page 7) for each student.\r\n- Print one [r csf-digital-footprint-assessment] for each student.\r\n- Review [r csf-online-safety-doc] for more online safety content."
    },
    "coursec/at-the-dog-park": {
        "cs_content": "In this lesson, students will be practicing their programming skills using a new character, Laurel the Adventurer. When someone starts _programming_ they piece together instructions in a specific order using something that a machine can read. Through the use of programming, students will develop an understanding of how a computer navigates instructions and order. Using a new character with a different puzzle objective will help students widen their scope of experience with sequencing and algorithms in programming.",
        "description": "Write algorithms to help Laurel the Adventurer collect lots of gems!",
        "overview": "In this series of puzzles, students will continue to develop their understanding of algorithms and debugging. With a new character, Laurel the Adventurer, students will create sequential algorithms to get Laurel to pick up treasure as she walks along a path.",
        "prep": " - Play through [r csf-course-c] stage 5 to find potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursec/binary-bracelets": {
        "cs_content": "In this lesson students will learn how information is represented in a way such that a computer can interpret and store it. When learning _binary_, students will have the opportunity to write codes and share them with peers as secret messages. This can then be related back to how computers read a program, translate it to binary, use the information in some way, then reply back in a way humans can understand. For example, when we type a sentence into a document then press save, a computer translates the sentence into binary, stores the information, then posts a message indicating the document has been saved.",
        "description": "Create your very own binary bracelet and learn how computers remember information!",
        "overview": "Binary is extremely important in the world of computers. The majority of computers today store all sorts of information in binary form. This lesson helps demonstrate how it is possible to take something from real life and translate it into a series of ons and offs.",
        "prep": "- Watch the [r teacher-video-binary-bracelets-2].\r\n- Watch the [r lesson-in-action-binary-bracelets].\r\n- Gather markers for the bracelets. Other decorations like beads and pipecleaners are optional.\r\n- Print one [r csf-binary-bracelets-activity] per student.\r\n- Print one [r csf-binary-bracelets-assessment] per student.\r\n- Make sure every student has a [r think-spot-journal].\r\n- (Optional) Write a short message on the board in binary.\r\n- Prepare to show the [r csf-bit-byte-video]."
    },
    "coursec/building-a-foundation": {
        "cs_content": "While this lesson may not at first seem connected to Computer Science, it plays an essential role in preparing students to tackle some of the more difficult challenges that will come their way when approaching new CS content. This lesson teaches that failure is not the end of a journey, but rather a step towards success. The majority of students should feel frustrated at some point in this lesson, but it's important to emphasize that failure and frustration are common steps that lead to creativity and success. ",
        "description": "Build a structure that can hold a textbook. You might feel frustrated- remember to be persistent! ",
        "overview": "In this lesson, students are asked to build a load-bearing structure using common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. The goal of this activity is to engage students in a difficult challenge to highlight strategies for showing persistence in the face of frustration. Most students will not get this right the first time, but if they continue trying and iterating, you can help them identify techniques to make struggle productive.",
        "prep": "-  Watch [r teacher-video-practicing-persistence].\r\n-  Watch the [r lesson-in-action-foundation].\r\n-  Print [r csf-building-a-foundation-activity].\r\n-  Gather enough building elements (marshmallows or gumdrops with toothpicks or popsicle sticks) for each group. You don't have to give any certain amount; just make sure you put some limit on materials.\r\n-  Give a [r think-spot-journal] to each student."
    },
    "coursec/debugging-in-maze": {
        "cs_content": "Students in your class might become frustrated with this lesson because of the essence of debugging. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "description": "Find problems in puzzles and practice your debugging skills.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and blocks that are out of order.",
        "prep": " - Play through the [r csf-course-c] in stage 3 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal].\r\n - Review [r csf-debugging-handout] with the class."
    },
    "coursec/events-puppy-introduction": {
        "cs_content": "Here, students will further develop their understanding of events using Play Lab. Students will use events to make characters move around the screen, make noises, and change backgrounds based on user input. At the end of the puzzle sequence, students will be presented with the opportunity to share their projects.  ",
        "description": "It's time to get creative and make a game in Play Lab!",
        "overview": "In this online activity, students will have the opportunity to learn how to use events in Play Lab and to apply all the coding skills they've learned to create an animated game. It's time to get creative and make a game in Play Lab!",
        "prep": " - Play through the [r csf-course-c] in stage 12 to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursec/flappy": {
        "cs_content": "Events are very common in computer programs. In this lesson, students will further develop their understanding of events by making a Flappy Bird game. Students will learn to make their character move across the screen, make noises, and react to obstacles based on user-initiated events.",
        "description": "Build you own Flappy Bird game however you like, then share it with your friends!",
        "overview": "In this special stage, students get to build their own Flappy Bird game by using event handlers to detect mouse clicks and object collisions. At the end of the level, students will be able to customize their game by changing the visuals or rules.",
        "prep": " - Play through [r csf-course-c] in stage 11 to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursec/getting-loopy": {
        "cs_content": "At this point in the course, students should have developed comfort with programming a set of linear instructions. Frequently the linear set of instructions includes patterns that are repeated multiple times and as students want to write more complex and interesting programs, manually duplicating that code becomes cumbersome and inefficient. To enable students to write more powerful programs, we'll need to rely on structures that break out of the that single linear list. _Loops_ allow for students to structure their code in a way that repeats. In this lesson, we will focus on identifying patterns in physical movement before moving back onto the computer to look for patterns in our code.",
        "description": "In this lesson, we'll have a dance party using repeat loops!",
        "overview": "As we start to write longer and more interesting programs, our code often contains a lot of repetition. In this lesson, students will learn about how loops can be used to more easily communicate instructions that have a lot of repetition by looking at the repeated patterns of movement in a dance.",
        "prep": "- Watch the [r teacher-video-getting-loopy-2].\r\n- Print one [r csf-getting-loopy-activity-worksheet] for the class.\r\n- Print one [r csf-getting-loopy-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursec/loops-in-artist": {
        "cs_content": "This series highlights the power of loops with creative and personal designs.  \r\n\r\nOffered as a project-backed sequence, this progression will allow students to build on top of their own work and create amazing artifacts.",
        "description": "In this lesson, loops make it easy to make even cooler images with Artist!",
        "overview": "Watch student faces light up as they make their own gorgeous designs using a small number of blocks and digital stickers! This lesson builds on the understanding of loops from previous lessons and gives students a chance to be truly creative.  This activity is fantastic for producing artifacts for portfolios or parent/teacher conferences.",
        "prep": " - Play through the [r csf-course-c] corresponding to this course to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursec/loops-in-harvester": {
        "cs_content": "It may seem unnecessarily repetitive to have two plugged stages introducing loops, but the practice of using loops for different reasons develops a student's understanding of what loops can do. In \"Loops in Maze\" students only used loops to repeat movements. In this lesson, students will use loops to repeat other actions like harvesting pumpkins. New patterns will emerge and students will use creativity and logical thinking to determine what code needs to be repeated and how many times.",
        "description": "Let's use loops to help the harvester collect some veggies!",
        "overview": "In the preceding stage, students used loops to create fantastic drawings. Now they're going to loop new actions in order to help the harvester collect multiple veggies growing in large bunches.\r\n",
        "prep": " - Play through the [r csf-course-c] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursec/make-a-dog-tag": {
        "cs_content": "Building off of the students' previous experience with sequencing, this lesson will work to inspire more creativity with coding. The purpose of this lesson is to solidify knowledge on sequencing by introducing new blocks and goals. In this case, students learn more about pixels and angles using the new blocks, while still practicing their sequencing skills. Also, students will be able to visualize new goals such as coding the Artist to draw a square.",
        "description": "Create beautiful images by programming the Artist.",
        "overview": "In this lesson, students will take control of the Artist to complete drawings on the screen. This Artist stage will allow students to create images of increasing complexity using new blocks like `move forward by 100 pixels` and `turn right by 90 degrees`.",
        "prep": " - Play through the [r csf-course-c] in stage 6 to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - (Optional) Obtain protractors for your class to visualize the angles they must use to complete the puzzles.\r\n - Print one [r csf-turns-angles-doc] for each student."
    },
    "coursec/programming-at-home-with-my-pet": {
        "cs_content": "In this lesson, students will develop programming and debugging skills on a computer platform. The block-based format of these puzzles help students learn about sequence and concepts, without having to worry about perfecting syntax.",
        "description": "Learn about sequences and algorithms with Angry Birds.",
        "overview": "Using characters from the game Angry Birds, students will develop sequential algorithms to move a bird from one side of a maze to the pig at the other side. To do this they will stack code blocks together in a linear sequence, making them move straight, turn left, or turn right.",
        "prep": " - Play through the [r csf-course-c] in stage 2 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Make sure every student has a [r think-spot-journal]"
    },
    "coursec/puppy-loops": {
        "cs_content": "In this lesson, students will be learning more about _loops_ and how to implement them in Blockly code. Using _loops_ is an important skill in programming because manually repeating commands is tedious and inefficient. With the Code.org puzzles, students will learn to add instructions to existing loops, gather repeated code into loops, and recognize patterns that need to be looped. It should be noted that students will face puzzles with many different solutions. This will open up discussions on the various ways to solve puzzles with advantages and disadvantages to each approach.",
        "description": "Help BB-8 through mazes using loops! ",
        "overview": "Building on the concept of repeating instructions from \"Getting Loopy,\" this stage will have students using loops to help BB-8 traverse a maze more efficiently than before.",
        "prep": " - Play through the [r csf-course-c] in stage 8 to determine if there will be any problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursec/real-life-algorithms-paper-airplanes": {
        "cs_content": "This lesson exists to help students see that an \"algorithm\" is just a list of steps that someone can take to finish a task.  Students will also learn that the order of the individual steps can make a difference in the final product.  This should help lay a foundation of understanding for arranging blocks into programs.",
        "description": "Let's make paper airplanes using algorithms!",
        "overview": "In this lesson, students will relate the concept of algorithms back to everyday activities. After discussing their steps, students will make paper planes using an algorithm. The goal here is to start building the skills to translate real world situations to online scenarios and vice versa.",
        "prep": "- Watch the [r teacher-video-paper-planes].\r\n- Watch the [r lesson-in-action-paper-airplanes].\r\n- Gather paper for students to construct paper airplanes from.\r\n- Print out [r csf-real-life-algorithms-worksheet-paper-airplanes] for each student.\r\n- Print [r csf-daily-algorithms] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursec/screen-for-mean": {
        "cs_content": "Students may not ever have the misfortune of experiencing cyberbullying, but we want to make sure that the students are prepared for and knowledgeable about it, in case they ever witness it during an online situation. Students will learn how to identify cyberbullying and what steps they should take to make it stop. This may become helpful in later puzzles when students have the opportunity to share their work. If someone negatively responds to a student's work, this lesson will provide them with the tools that they need to handle the situation.",
        "description": "In this lesson, you'll learn what to do if something online makes you feel angry, sad, or scared.",
        "overview": "This lesson helps children to recognize that it is essential to tell a trusted adult if something online makes them feel angry, sad, or scared. \r\n\r\nStudents learn that other people can sometimes act like bullies when they are online. They will explore what cyberbullying means and what they can do when they encounter it. After reading a scenario about mean online behavior, students discuss what cyberbullying is, how it can make people feel, and how to respond. Finally, they use their knowledge to create a simple tip sheet on cyberbullying in their journal.\r\n",
        "prep": " - Review [r csf-screen-out-mean] from Common Sense Education's website.\r\n - Print out a worksheet from the link above (page 6) for each student.\r\n - Print out an assessment from the link at the top (page 7) for each student.\r\n - Make sure every student has a [r think-spot-journal].\r\n - Print or display the [r common-sense-stop-poster] for the class to see.\r\n - Review [r csf-online-safety-doc] for more online safety content."
    },
    "coursec/the-big-event": {
        "cs_content": "Today, students will learn to distinguish events and actions. The students will see activities interrupted by having a \"button\" pressed on a paper remote. When seeing this _event_, the class will react with a unique action. Events are widely used in programming and should be easily recognizable after this lesson.",
        "description": "Play a fun game to learn about events. ",
        "overview": "Students will soon learn that events are a great way to add flexibility to a pre-written algorithm. Sometimes you want your program to be able to respond to the user exactly when the user wants it to. Events can make your program more interesting and interactive.",
        "prep": "- Watch the [r teacher-video-big-event-2].\r\n- Print one [r csf-the-big-event-activity-worksheet] and Event Controller.\r\n- Print one [r csf-the-big-event-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursed/binary-artist": {
        "cs_content": "This will help reinforce the fact that computers can do a multitude of things with 0s and 1s.",
        "description": "In this lesson, you will learn how to make images using on and off.",
        "overview": "This series of online lessons will have students learning to make images using on and off.",
        "prep": " - Play through the [r csf-course-d] corresponding to this course to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/binary-images": {
        "cs_content": "In this lesson students will learn how information is represented in a way such that a computer can interpret and store it. When learning _binary_, students will have the opportunity to write code and share it with peers to view as images. This can then be related back to how computers read a program, translate it to binary, use the information in some way, then reply back in a way humans can understand. For example, when we type a sentence into a document then press \"save\", a computer translates the sentence into binary, stores the information, then posts a message indicating the document has been stored.",
        "description": "Learn how computers store pictures using simple ideas like on and off. ",
        "overview": "Though many people think of binary as strictly zeros and ones, students will be introduced to the idea that information can be represented in a variety of binary options. This lesson takes that concept one step further as it illustrates how a computer can store even more complex information (such as images and colors) in binary, as well.",
        "prep": "- Watch the [r teacher-video-binary-images-2].\r\n- Print one [r csf-binary-images-worksheet] per pair.\r\n- Print one [r csf-binary-image-assessment] per student.\r\n- Gather groupings of items that can show opposites for students to use when coming up with their own binary encodings (Optional).\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursed/build-a-play-lab-game": {
        "cs_content": "Students will use events to make characters move around the screen, make noises, and change backgrounds based on user input. This lesson offers a great introduction to events in programming and even gives a chance to show creativity! At the end of the puzzle sequence, students will be presented with the opportunity to share their projects.",
        "description": "This lesson will guide you through making your very own video game.",
        "overview": "In this online activity, students will have the opportunity to learn how to use events in Play Lab and to apply all of the coding skills they've learned to create an animated game. It's time to get creative and make a game in Play Lab!",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/conditionals-in-bee": {
        "cs_content": "After being introduced to conditionals in \"Conditionals with Cards,\" students will now practice using them in their programs. The `if / else` blocks will allow for a more flexible program. The bee will only collect nectar **if** there is a flower or make honey **if** there is a honeycomb. Students will also practice and recognize a connection between `if / else` blocks and `while` loops in this set of puzzles.",
        "description": "Now that you understand conditionals, it's time to program Bee to use them when collecting honey and nectar. ",
        "overview": "Up until this point students have been writing code that executes exactly the same way each time it is run - reliable, but not very flexible. In this lesson, your class will begin to code with conditionals, allowing them to write code that functions differently depending on the specific conditions the program encounters.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/conditionals-loops-in-farmer": {
        "cs_content": "Practicing the use of conditionals in different scenarios helps to develop a student's understanding of what conditionals can do. In the previous lesson, students only used conditionals to move around a maze. In this lesson, students will use conditionals to help the farmer know when to harvest crops. New patterns will emerge and students will use creativity and logical thinking to determine the conditions where code should be run and repeated.",
        "description": "It's not always clear when to use each conditional.  This lesson will help you get practice deciding what to do.",
        "overview": "Students will practice `while` loops, `until` loops, and `if / else` statements. All of these blocks use conditionals. By practicing all three, students will learn to write complex and flexible code.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/conditionals-loops-in-maze": {
        "cs_content": "This set of puzzles will work to solidify and build on the knowledge of conditionals and loops. By pairing these concepts together, students will be able to explore the potential for creating complex and innovative programs.",
        "description": "You can do some amazing things when you use conditionals and loops together!",
        "overview": "In this lesson, students will be pairing together two key concepts: loops and conditionals. This set of puzzles bridges the gaps in understanding that occur when working on puzzles that use multiple kinds of blocks. By bringing two ideas together, students will create more complex code that shows both impressive creativity and critical thinking!",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/conditionals-with-cards": {
        "cs_content": "One of the best parts of teaching _conditionals_ is that students already understand the concept from their everyday lives. \r\n\r\nThis lesson merges computer science into the real world by building off of their ability to tell if a condition is true or false. Students will learn to use `if` statements to declare when a certain command should be run, as well as `if / else` statements to declare when a command should be run and what do run otherwise. Students may not recognize the word _conditionals_, but most students will understand the idea of using \"if\" to make sure that some action only occurs when it is supposed to.",
        "description": "It's time to play a game where you earn points only under certain conditions!",
        "overview": "This lesson demonstrates how conditionals can be used to tailor a program to specific information. We don’t always have all of the information we need when writing a program. Sometimes you will want to do something different in one situation than in another, even if you don't know what situation will be true when your code runs. That is where conditionals come in. Conditionals allow a computer to make a decision, based on the information that is true any time your code is run.\r\n\r\n",
        "prep": "- Watch the [r teacher-video-conditionals-cards-2].\r\n- Watch the [r lesson-in-action-conditional-cards].\r\n- Gather decks of cards or something similar.\r\n- One [r csf-conditionals-with-cards-sample-program] for the class to look at.\r\n- Print one [r csf-conditionals-with-cards-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursed/debugging-in-bee": {
        "cs_content": "The purpose of this lesson is to teach students that failure is normal when learning a new skill. Students will be given pre-written programs that do NOT work. They will be asked to fix these programs. This process, called \"debugging\", teaches students essential problem solving and critical thinking skills. These skills transfer over as students proceed to harder and harder programming projects.",
        "description": "Have you ever run into problems while coding? In this lesson, you will learn about the secrets of debugging. Debugging is the process of finding and fixing problems in your code.",
        "overview": "In this online activity, students will practice debugging in the \"collector\" environment. Students will get to practice reading and editing code to fix puzzles with simple algorithms, loops and nested loops.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/digital-citizenship": {
        "cs_content": "As students spend more time on computers, they should be aware that the internet is not always a safe space. In this lesson, students are taught what information is safe to share and what information should remain private. Students will create \"superheros\" and learn what it means to be a Digital Citizen on the internet.",
        "description": "Some information is not safe to share online. This lesson will help you learn the difference between safe and private information.",
        "overview": "In collaboration with Common Sense Education, this lesson helps students learn to think critically about the user information that some websites request or require. Students learn the difference between private information and personal information, distinguishing what is safe and unsafe to share online.\r\n\r\nStudents will also explore what it means to be responsible and respectful to their offline and online communities as a step toward learning how to be good digital citizens.",
        "prep": "- Watch the [r teacher-video-digital-citizenship].\r\n- Print out a good selection of male and female [r csf-cubecraft-superheroes] sheets for the whole class.\r\n- Print one [r csf-super-digital-citizen-assessment] for each student.\r\n- Review [r csf-online-safety-doc] for more online safety content."
    },
    "coursed/events-in-bounce": {
        "cs_content": "Events are very common in computer programs, especially in video games.  \r\n\r\nIn this lesson, students will develop their understanding of events by making a sports-based game. Students will learn to make their paddle move according to arrow keys, and make noises when objects collide. At the very end, they will get to customize their game to make it more unique!",
        "description": "Ever wish you could play video games in school? In this lesson, you will get to make your own!",
        "overview": "In this online activity, students will learn what events are, and how computers use them in programs like video games. Students will work through puzzles making the program react to events (like arrow buttons being pressed.) At the end of the puzzle, students will have the opportunity to customize their game with different speeds and sounds.",
        "prep": " - Make sure every student has a [r think-spot-journal].\r\n - Play through [r csf-course-d] in stage 3 to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend]."
    },
    "coursed/graph-paper-programming": {
        "cs_content": "The goal of this activity is to build critical thinking skills and excitement for the course, while introducing some of the fundamental programming concepts that will be used throughout the course. By introducing basic concepts like sequencing and algorithms to the class in an unplugged activity, students who are intimidated by computers can still build a foundation of understanding on these topics. In this lesson, students will learn how to develop an algorithm and encode it into a program. ",
        "description": "In this lesson, you will program your friend to draw pictures!",
        "overview": "By \"programming\" one another to draw pictures, students get an opportunity to experience some of the core concepts of programming in a fun and accessible way. The class will start by having students use symbols to instruct each other to color squares on graph paper in an effort to reproduce an existing picture. If there’s time, the lesson can conclude with images that the students create themselves.  ",
        "prep": "- Watch the [r teacher-video-graph-paper-2].\r\n- Watch the [r lesson-in-action-graph-paper].\r\n- Print out one [r csf-graph-paper-programming-worksheet] for each group.\r\n- Print one [r csf-graph-paper-programming-assessment] for each student.\r\n- Supply each group with several drawing grids, paper, and pens/pencils.\r\n- Make sure every student has a [r think-spot-journal].\r\n"
    },
    "coursed/introduction-remembering-ideas-from-course-c": {
        "cs_content": "We recognize that every classroom has a spectrum of understanding for every subject. Some students in your class may be computer wizards, while others haven't had much experience at all. In order to create an equal playing (and learning) field, we have developed this \"Ramp Up Stage\" for Course D. This can be used as either an introduction or a review of how to use Code.org and basic computer science concepts. This stage covers all prerequisites needed to start Course D.",
        "description": "This lesson will give you practice in the skills you will need for this course.",
        "overview": "In this set of puzzles, students will begin with an introduction (or review depending on the experience of your class) of Code.org's online workspace. There will be videos pointing out the basic functionality of the workspace including the `Run`, `Reset`, and `Step` buttons. Also discussed in these videos: dragging Blockly blocks, deleting Blockly blocks, and connecting Blockly blocks. Next, students will practice their _sequencing_ and _debugging_ skills in maze. From there, students will see new types of puzzles like Collector, Artist, and Harvester when they learn the very basics of _loops_.",
        "prep": " - Play through the [r csf-course-d] to find any potential problem areas for your class.\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/nested-loops-in-artist": {
        "cs_content": "In this online activity, students will create designs in Artist that they can proudly share with their loved ones.  \r\n\r\nThe purpose of this activity is to utilize nested loops as a way to inspire students with artistic minds to see coding as another creative outlet. This set of puzzles was built to develop critical thinking skills, an understanding of elementary geometry, and creativity -- all within the scope of nested loops!",
        "description": "More nested loops! This time, you get to make some AMAZING drawing with nested loops.",
        "overview": "Students will create intricate designs using Artist in today's set of puzzles. By continuing to practice nested loops with new goals, students will see more uses of loops in general. This set of puzzles also offers a lot more potential for creativity with an opportunity for students to create their own design at the end of the stage.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal].\r\n - Either display or print out copies of [r csf-turns-angles-doc] for students to reference while working through the online puzzles."
    },
    "coursed/nested-loops-in-maze": {
        "cs_content": "In this introduction to _nested loops_, students will go outside of their comfort zone to create more efficient solutions to puzzles.  \r\n\r\nIn earlier puzzles, loops pushed students to recognize repetition. Here, students will learn to recognize patterns *within* repeated patterns to develop these _nested loops_. This stage starts off by encouraging students try to solve a puzzle where the code is irritating and complex to write out the long way. After a video introduces _nested loops_, students are shown an example and asked to predict what will happen when a loop is put inside of another loop. This progression leads into plenty of practice for students to solidify and build on their understanding of looping in programming.",
        "description": "Loops inside loops inside loops. What does this mean? This lesson will teach you what happens when you place a loop inside another loop.",
        "overview": "In this online activity, students will have the opportunity to push their understanding of loops to a whole new level. Playing with the Bee and Plants vs Zombies, students will learn how to program a loop to be inside of another loop. They will also be encouraged to figure out how little changes in either loop will affect their program when they click `Run`.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/nested-loops-with-frozen": {
        "cs_content": "In this series, students will get practice nesting loops while creating images that they will be excited to share. \r\n\r\nBeginning with a handful of instructions, students will make their own decisions when it comes to creating designs for repetition.  They will then spin those around a variety of ways to end up with a work of art that is truly unique.",
        "description": "Anna and Elsa have excellent ice-skating skills, but need your help to create patterns in the ice. Use nested loops to create something super COOL. ",
        "overview": "Now that students know how to layer their loops, they can create so many beautiful things.  This lesson will take students through a series of exercises to help them create their own portfolio-ready images using Anna and Elsa's excellent ice-skating skills!",
        "prep": " - Play through the [r csf-course-e] corresponding to this lesson to find and potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursed/relay-programming": {
        "cs_content": "Teamwork is very important in computer science. Teams write and debug code with each other, instead of working as individuals. In this lesson, students will learn to work together while being as efficient as possible. \r\n\r\nThis activity also provides a sense of urgency that will teach students to balance their time carefully and avoid mistakes without falling too far behind.",
        "description": "Remember at the beginning of the course when you made drawings with code? In this lesson, you will be working with a team to do something very similar!",
        "overview": "This activity will begin with a short review of \"Graph Paper Programming,\" then will quickly move to a race against the clock, as students break into teams and work together to write a program one instruction at a time.",
        "prep": "- Watch the [r teacher-video-relay-programming-2].\r\n- Locate a wide open space for this activity, such as the gym or outdoor field.\r\n- Print out one [r csf-relay-programming-activity-packet] for each group.\r\n- Supply each group with plenty of paper and pens/pencils.\r\n- Print one [r csf-relay-programming-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursed/while-loops-in-farmer": {
        "cs_content": "As your students continue to deepen their knowledge of loops, they will come across problems where a command needs to be repeated, but it is unknown how many times it needs to be repeated. This is where `while` loops come in. In today's lesson, students will develop a beginner's understanding of condition-based loops and also expand their knowledge of loops in general. ",
        "description": "Loops are so useful in coding. This lesson will teach you about a new kind of loop: while loops!",
        "overview": "By the time students reach this lesson, they should already have plenty of practice using `repeat` loops, so now it's time to mix things up. \n\n_While loops_ are loops that continue to repeat commands while a condition is met. `While` loops are used when the programmer doesn't know the exact number of times commands need to be repeated, but does know what condition needs to be true in order for the loop to continue repeating. For example, students will be working to fill holes and dig dirt in Farmer. They will not know the size of the holes or the height of the mountains of dirt, but the students will know they need to keep filling the holes and digging the dirt as long as the ground is not flat.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/build-a-play-lab-game": {
        "cs_content": "Students will use events to make characters move around the screen, make noises, and change backgrounds based on user input. This lesson offers a great introduction to events in programming and even gives a chance to show creativity! At the end of the puzzle sequence, students will be presented with the opportunity to share their projects.",
        "description": "Practice making games to share with your friends and family.",
        "overview": "This lesson features Play Lab, a platform where students can create their own games and have interactions between characters and user input. Students will work with events to create keyboard controls. This set of puzzles will also loosely guide students through game development, but with freedom to add their own ideas.",
        "prep": " - Play through the [r csf-course-e] associated with this lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure ever student has a [r think-spot-journal]."
    },
    "coursee/build-a-star-wars-game": {
        "cs_content": "CS Fundamentals is not simply about teaching computer science, it is about making computer science fun and exciting. In this series, students will learn about events using popular characters from Star Wars. These puzzles blur the lines between \"learning\" and \"fun\". Also, students will learn to recognize regular programming practices in games so that when they play games at home, they can see common computer science principles being used.",
        "description": "Feel the force as you build your own Star Wars game in this lesson.",
        "overview": "In this lesson, students will practice using events to build a game that they can share online. Featuring R2-D2 and other Star Wars characters, students will be guided through events, then given space to create their own game.",
        "prep": " - Play through puzzles in [r csf-course-e] and find any potential problem areas.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/build-your-project": {
        "cs_content": "This lesson provides students with ample time to build and revise their projects. The trial and error inevitably involved in this lesson will teach problem solving and persistence.",
        "description": "Get those hands ready for plenty of coding! It's time to start building your project.",
        "overview": "Over the course of four lessons, students will be building up to programming a project of their own design using either Play Lab or Artist as their programming environment. Now the students will be given their own space to create their project with either Artist or Play Lab. This is likely to be the longest stage of the project. The lesson guide for all four stages of the process can be found in the first stage of this project process [here](https://curriculum.code.org/csf/coursee/12/)."
    },
    "coursee/building-a-foundation": {
        "cs_content": "This lesson teaches that failure is not the end of a journey, but a hint for how to succeed. The majority of students will feel frustrated at some point in this lesson, but it's important to emphasize that failure and frustration are common steps to creativity and success.",
        "description": "Build a structure that can hold a textbook. You might feel frustrated- remember to be persistent!",
        "overview": "New and unsolved problems are often pretty hard. If we want to have any chance of making something creative, useful, and clever, then we need to be willing to attack hard problems even if it means failing a few times before we succeed. In this lesson, students will be building a structure with common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. Most students will not get this right the first time, but it's important they push through and keep trying.",
        "prep": "-  Watch the [r teacher-video-building-foundation].\r\n-  Watch the [r lesson-in-action-foundation].\r\n-  Print [r csf-building-a-foundation-activity].\r\n-  Gather enough building elements (marshmallows or gumdrops with toothpicks or popsicle sticks) for each group. You don't have to give any certain amount; just make sure you put some limit on materials.\r\n-  Give a [r think-spot-journal] to each student."
    },
    "coursee/common-sense-media-private-and-personal-information": {
        "cs_content": "Common Sense Education has created this lesson to teach kids the importance of security on the internet. By discussing the difference between personal and private information, students will be able to recognize what information should and shouldn't be shared. Students will also learn what signs you should look for to determine if a website is safe or not.",
        "description": "The internet is fun and exciting, but it's important to stay safe too. This lesson teaches you the difference between information that is safe to share and information that is private.",
        "overview": "Developed by Common Sense Education, this lesson is about the difference between information that is safe to share online and information that is not.\r\n\r\nAs students visit sites that request information about their identities, they learn to adopt a critical inquiry process that empowers them to protect themselves and their families from identity theft. In this lesson, students learn to think critically about the user information that some websites request or require. They learn the difference between private information and personal information, as well as how to distinguish what is safe or unsafe to share online.",
        "prep": " - Copy the _Protect Yourself Student Handout_ (7th page of the teacher prep guide), one for each student.\r\n - Copy the _All About Me Student Handout_ (6th page of the teacher prep guide), one for each student.\r\n - Print out an assessment (8th page of the teacher prep guide) for each student. Teacher version is the page after the student assessment.\r\n - Preview websites like [Neopets](http://www.neopets.com/), [Nickelodeon](http://www.nick.com/), and [BookAdventure](http://www.bookadventure.com/Home.aspx) and prepare to show them to the class.\r\n - Review [r csf-online-safety-doc] for more online safety content."
    },
    "coursee/crowdsourcing": {
        "cs_content": "It's very rare that one computer scientist works completely alone on a project. Even when that does happen, there is always benefit in numbers. Today, students will learn what it means to crowdsource a project. This activity builds teamwork and creates an efficient environment for students to solve problems.",
        "description": "This lesson will teach you about crowdsourcing, the process of building a project with a team.",
        "overview": "In computer science, we face some big, daunting problems. Challenges such as finding large prime numbers or sequencing DNA are almost impossible to do as an individual. Adding the power of others makes these tasks manageable. This lesson will show your students how helpful teamwork can be in the industry of computer science.",
        "prep": "- Watch the [r teacher-video-crowdsourcing].\r\n- Review [r csf-crowdsourcing-activity].\r\n- Obtain a jar of lots of something (pennies, buttons, slips of paper, etc) and a deck of cards.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursee/debugging-in-scrat": {
        "cs_content": "Students in your class might become frustrated with this lesson because of the essence of debugging. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "description": "Find problems in Ice Age puzzles and practice your debugging skills.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and blocks that are out of order.",
        "prep": " - Play through the [r csf-course-e] to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal].\r\n - Review [r csf-debugging-handout] with the class."
    },
    "coursee/determine-the-concept-in-bee": {
        "cs_content": "It's important for students to remember that computer science provides plenty of opportunities to be creative. Every topic can be combined with another to make something bigger and better. \r\n\r\nIn this lesson, students will use previously learned concepts together, allowing for a \"big picture\" view of programming projects. This lesson will also bridge any gaps in understanding of when to use certain programming tools over others.",
        "description": "We aren't giving away any secrets! This lesson could use any of the skills you've learned so far.",
        "overview": "This series brings together concepts from previous lessons and gives students a chance to think critically about how they would solve each problem, but without telling them which concept to apply. Students will review basic algorithms, debugging, `repeat` loops, conditionals, `while` loops, and functions.",
        "prep": " - Play through the [r csf-course-e] associated with this level to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/dice-race": {
        "cs_content": "By introducing a basic concept like _algorithms_ to the class in an unplugged activity, students who are intimidated by computers can still build a foundation of understanding on these topics. Algorithms are essential to computer science. In this lesson, students will learn how to translate instructions into a algorithm and how that plays a role in programming. ",
        "description": "Learn how to describe a game from the computer's point of view in this lesson on algorithms.",
        "overview": "In this lesson, students will relate the concept of algorithms back to real-life activities by playing the Dice Race game. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.",
        "prep": "- Watch the [r teacher-video-dice-race].\r\n- Print one [r csf-dice-race-worksheet] per group.\r\n- Print one [r csf-dice-race-assessment] per student.\r\n- Give every student a [r think-spot-journal]."
    },
    "coursee/explore-project-ideas": {
        "cs_content": "Exploring project ideas is meant to inspire students with realistic and entertaining ideas for their culminating projects.",
        "description": "Here are several games and drawings. Play with each of them to get ideas for projects of your own!",
        "overview": "The next four lessons provide an opportunity for students to put their coding skills to use in a capstone project. This project will help individuals gain experience with coding and produce an exemplar to share with peers and loved ones. Intended to be a multi-lesson or multi-week experience, students will spend time exploring brainstorming, learning about the design process, building, and presenting their final work. \r\n\r\nIn the explore stage, students will play with pre-built examples of projects in both Artist and Play Lab for inspiration. Next, students will learn about the design process and how to implement it in their own projects. They will then be given the space to create their own project in Artist, Play Lab, or another interface that they have become familiar with (this is likely the longest stage of the project). Finally, students will be able to present their finished work to their peers.",
        "prep": " - Play through the online [r course-e-project-examples] to get an idea of the strengths, weaknesses, and limitations of the tool.\r\n - Print one copy of the [r design-process] for each student.\r\n - Modify the [r rubric-csf-final-projects] to fit your class goals and print out a copy for each student.\r\n - Modify the [r final-project-design-worksheet] to fit your class and print one packet for each student."
    },
    "coursee/functions-in-artist": {
        "cs_content": "One of the most important components to this lesson is providing students with a space to create something they are proud of. These puzzles progress to more and more complex images, but each new puzzle only builds off the previous puzzle. At the end of this lesson, students will feel confident with themselves and proud of their hard work.",
        "description": "Make complex drawings more easily with functions!",
        "overview": "Students will be introduced to using functions on Code.org. Magnificent images will be created and modified with functions in Artist. For more complicated patterns, students will learn about nesting functions by calling one function from inside another.",
        "prep": " - Play through puzzles in [r csf-course-e] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/functions-in-bee": {
        "cs_content": "Students will discover the versatility of programming by practicing functions in different environments. Here, students will recognize patterns in the bee's maze. The bee will need to navigate the play area, collect nectar, and make honey. Students will learn to organize their programs and create functions for repeated code. ",
        "description": "Don't write too much code to gather all of the nectar and honey. Use functions instead!",
        "overview": "In the second round of practice with online functions, students will navigate complex paths, collect plenty of nectar, and make lots of honey.",
        "prep": " - Play through [r csf-course-e] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/functions-in-farmer": {
        "cs_content": "This lesson is meant to further push students to use functions in more creative ways. By also using conditionals and loops, students will learn there are many ways to approach a problem, but some are more efficient than others. These puzzles are intended to increase problem solving and critical thinking skills.",
        "description": "Functions will save you lots of work as you help the farmer with her harvest!",
        "overview": "Students have practiced creating impressive designs in Artist and navigating mazes in Bee, but today they will use functions to harvest crops in Farmer. This lesson will push students to use functions in the new ways by combining them with `while` loops and `if / else` statements.",
        "prep": " - Play through [r csf-course-e] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/intro-to-conditionals": {
        "cs_content": "A basic understanding of conditionals is a recommended prerequisite for Course E. We created this introduction to give a review for the students already familiar to conditionals and allow practice for the students that are just learning. If you find that the understanding of conditionals varies widely in your classroom, we recommend a strategic pairing of students when completing this online lesson.",
        "description": "You will get to tell the computer what to do under certain conditions in this fun and challenging series.",
        "overview": "This lesson introduces students to `while` loops and `if / else` statements. _While loops_ are loops that continue to repeat commands as long as a condition is true. While loops are used when the programmer doesn't know the exact number of times the commands need to be repeated, but the programmer does know what condition needs to be true in order for the loop to continue looping. `If / Else` statements offer flexibility in programming by running entire sections of code only if something is true, otherwise it runs something else.",
        "prep": " - Play through puzzles in [r csf-course-e] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]"
    },
    "coursee/introduction-course-warm-up": {
        "cs_content": "We recognize that every classroom has a spectrum of understanding for every subject. Some students in your class may be computer wizards, while others haven't had much experience at all. In order to create an equal playing (and learning) field, we have developed this \"Ramp-Up Stage\" for Course E. This can be used as either an introduction or a review to the Code.org interface and basic computer science concepts. This stage, along with the three that follow, cover all prerequisites needed to start Course E.",
        "description": "This lesson will give you practice in the skills you will need for this course.",
        "overview": "In this progression, students will begin with an introduction (or review depending on the experience of your class) of Code.org's online workspace. Students will learn the basic functionality of the interface including the `Run`, `Reset`, and `Step` buttons. Dragging, deleting, and connecting Blockly blocks is also introduced in the beginning video. In the puzzles, students will practice their sequencing and debugging skills in Maze and Artist.",
        "prep": " - Play through puzzles on [r csf-course-e] to find any potential problem areas for your class.\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/loops-in-artist": {
        "cs_content": "This series highlights the power of loops with creative and personal designs.  \r\n\r\nOffered as a project-backed sequence, this progression will allow students to build on top of their own work and create amazing artifacts.",
        "description": "In this lesson, loops make it easy to make even cooler images with Artist!",
        "overview": "Watch student faces light up as they make their own gorgeous designs using a small number of blocks and digital stickers! This lesson builds on the understanding of loops from previous lessons and gives students a chance to be truly creative.  This activity is fantastic for producing artifacts for portfolios or parent/teacher conferences.",
        "prep": " - Play through the [r csf-course-e] corresponding to this course to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/my-loopy-robotic-friends": {
        "cs_content": "This unplugged lesson brings the class together as a team with a simple task to complete: get a \"robot\" to stack cups in a specific design. Students will work to recognize real world actions as potential instructions in code. The art of following precise instructions will also be practiced, as  students work to translate algorithms into code, using the symbols provided. If problems arise in the code, students should work together to recognize bugs and build solutions. This activity lays the groundwork for the programming that students will do throughout the course as they learn the importance of defining a clearly communicated algorithm.",
        "description": "Turn your friends into robots and tell them what to do!",
        "overview": "Using a special set of offline commands, students will design algorithms to instruct a \"robot\" to stack cups in different patterns. Students will take turns participating as the robot, responding only to the algorithm defined by their peers. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.",
        "prep": " - Watch the [r my-robotic-friends].\r\n - (Optional) Print out one [r symbol-key] per group or 4 students. Alternatively, find a place to display this information where students can reference throughout the lesson.\r\n - Prepare a stack of 10 disposable cups per group of 4 students, OR\r\n - (Optional) print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "coursee/nested-loops": {
        "cs_content": "In this introduction to _nested loops_, students will go outside of their comfort zone to create more efficient solutions to puzzles.  \r\n\r\nIn earlier puzzles, loops pushed students to recognize repetition. Here, students will learn to recognize patterns *within* repeated patterns to develop these _nested loops_. This stage starts off by encouraging students try to solve a puzzle where the code is irritating and complex to write out the long way. After a video introduces _nested loops_, students are shown an example and asked to predict what will happen when a loop is put inside of another loop. This progression leads into plenty of practice for students to solidify and build on their understanding of looping in programming.",
        "description": "Loops inside loops inside loops. What does this mean? This lesson will teach you what happens when you place a loop inside another loop.",
        "overview": "In this online activity, students will have the opportunity to push their understanding of loops to a whole new level. Playing with the Bee and Plants vs Zombies, students will learn how to program a loop to be inside of another loop. They will also be encouraged to figure out how little changes in either loop will affect their program when they click `Run`.",
        "prep": " - Play through [r csf-course-e] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/nested-loops-with-frozen": {
        "cs_content": "In this series, students will get practice nesting loops while creating images that they will be excited to share. \r\n\r\nBeginning with a handful of instructions, students will make their own decisions when it comes to creating designs for repetition.  They will then spin those around a variety of ways to end up with a work of art that is truly unique.",
        "description": "Anna and Elsa have excellent ice-skating skills, but need your help to create patterns in the ice. Use nested loops to create something super COOL. ",
        "overview": "Now that students know how to layer their loops, they can create so many beautiful things.  This lesson will take students through a series of exercises to help them create their own portfolio-ready images using Anna and Elsa's excellent ice-skating skills!",
        "prep": " - Play through the [r csf-course-e] corresponding to this lesson to find and potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/present-your-project": {
        "cs_content": "At this point, students have worked very hard on their projects, so this lesson is meant to offer a space for the students to share their projects. This lesson will build a supportive community where students will build their own confidence and feel connected to their hardworking peers.",
        "description": "Get ready to show off! It's time to present your finished project to your peers.",
        "overview": "Over the course of four lessons, students will be building up to programming a project of their own design using either Play Lab or Artist as their programming environment. Finally, students will be able to present their finished work to their peers or share with their loved ones with a special link. The lesson guide for all four stages of the process can be found in the first stage of this project process [here](https://curriculum.code.org/csf/coursee/12/)."
    },
    "coursee/programming-in-artist": {
        "cs_content": "Building off of the students' previous experience with sequencing, this lesson will work to inspire more creativity with coding. The purpose of this lesson is to solidify knowledge on sequencing by introducing new blocks and goals. In this case, students learn more about pixels and angles using the new blocks, while still practicing their sequencing skills. Also, students will be able to visualize new goals such as coding the Artist to draw a square.",
        "description": "Create beautiful images by programming the Artist.",
        "overview": "In this lesson, students will take control of the Artist to complete drawings on the screen. This Artist stage will allow students to create images of increasing complexity using new blocks like `move forward by 100 pixels` and `turn right by 90 degrees`.",
        "prep": " - Play through the [r csf-course-e] in stage 6 to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - (Optional) Obtain protractors for your class to visualize the angles they must use to complete the puzzles.\r\n - Print one [r csf-turns-angles-doc] for each student."
    },
    "coursee/programming-my-robotic-friends": {
        "cs_content": "This lesson serves as a reintroduction to loops, using the now familiar set of \"robot\" programming instructions. Students will develop critical thinking skills by looking for patterns of repetition in the movements of classmates and determining how to simplify those repeated patterns using loops.",
        "description": "Turn your friends into robots and tell them what to do using loops!",
        "overview": "Building on the initial \"My Robotic Friends\" activity, students learn to use loops when programming their robots in order to build bigger structures more efficiently.",
        "prep": " - Make sure each student has a [r think-spot-journal]\r\n - Watch the [r my-loopy-rf-teacher-vid]\r\n - Prepare a stack of 20 paper cups for each group of 4 students \r\n   \r\n - (Optional) Print out one [r my-loopy-rf-packet] per group of 4 students  \r\n \r\n**OR**\r\n\r\n - Display the [r symbol-key] where students can reference throughout the lesson.\r\n - Print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n"
    },
    "coursee/sequences-in-maze": {
        "cs_content": "We recognize that every classroom has a spectrum of understanding for every subject. Some students in your class may be computer wizards, while others haven't had much experience at all. In order to create an equal playing (and learning) field, we have developed this \"Ramp Up Stage\" for Course E. This can be used as either an introduction or a review of how to use Code.org and basic computer science concepts.",
        "description": "In this lesson, you will learn how to write your very own programs!",
        "overview": "In this set of puzzles, students will begin with an introduction (or review depending on the experience of your class) of Code.org's online workspace. There will be videos pointing out the basic functionality of the workspace including the `Run`, `Reset`, and `Step` buttons. Also discussed in these videos: dragging Blockly blocks, deleting Blockly blocks, and connecting Blockly blocks. Next, students will practice their _sequencing_ and _debugging_ skills in maze.",
        "prep": " - Play through the [r csf-course-e] to find any potential problem areas for your class.\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursee/songwriting": {
        "cs_content": "The use of functions helps simplify code and develop the student's ability to organize their program. Students will quickly recognize that writing functions can make their long programs easier to read and easier to debug if something goes wrong. ",
        "description": "Even rockstars need programming skills. This lesson will teach you about functions using lyrics from songs.",
        "overview": "One of the most magnificent structures in the computer science world is the function. Functions (sometimes called procedures) are mini programs that you can use over and over inside of your bigger program. This lesson will help students intuitively understand why combining chunks of code into functions can be such a helpful practice.",
        "prep": "- Watch the [r teacher-video-songwriting-functions].\r\n- Watch the [r lesson-in-action-songwriting].\r\n- Print several [r csf-songwriting-worksheets] for each group.\r\n- Print one [r csf-songwriting-assessment] for each student.\r\n- Access to the internet, or pre-downloaded songs and lyrics for activity.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursee/the-design-process": {
        "cs_content": "Students may be ready to jump straight into building their projects, but this lesson will help shape their ideas into plans. This structure will keep the dreamers grounded and illuminate a path for those feeling left in the dark.",
        "description": "Projects this big take time and plenty planning. Here, you will learn about the design process that you'll use to build your own creation.",
        "overview": "Over the course of four lessons, students will be building up to programming a project of their own design using either Play Lab or Artist as their programming environment. In this portion of the project, students will learn about the design process and how to implement it in their own projects. The lesson guide for all four stages of the process can be found in the first stage of this project process [here](https://curriculum.code.org/csf/coursee/21/)."
    },
    "coursee/the-internet": {
        "cs_content": "If you have been doing every lesson in this course, then each student in your classroom has used the internet...but how many know how it works? Learning more about the internet will help students develop a better understanding of its endless possibilities.",
        "description": "Ever wondered how information travels across the internet? It's not magic! This lesson will teach you the basics of how the internet works.",
        "overview": "Even though many people use the internet daily, not very many know how it works. In this lesson, students will pretend to flow through the internet, all the while learning about connections, URLs, IP Addresses, and the DNS.",
        "prep": "- Watch the [r teacher-video-internet].\r\n- Print enough [r csf-ip-address-cards-and-delivery-type-cards] for each group.\r\n- Print one [r csf-internet-assessment] for each student.\r\n- Access to the internet (such as [get-site-ip.com](http://get-site-ip.com/)).\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursef/algorithms-tangrams": {
        "cs_content": "By introducing a basic concept like _algorithms_ to the class in an unplugged activity, students who are intimidated by computers can still build a foundation of understanding on these topics. Algorithms are essential to computer science. In this lesson, students will learn how to translate instructions into a algorithm and how that plays a role in programming.",
        "description": "Here you will learn about algorithms using puzzles called tangrams!",
        "overview": "This lesson shows us something important about algorithms. As long as you keep an algorithm simple, there are lots of ways to use it. However, if you want to make sure everyone produces the same outcome, then your algorithm needs more detail. Students will learn the difference between a detailed and general algorithm while playing with tangrams.",
        "prep": " - Watch the [r teacher-video-tangrams-2].\r\n - Give every student a [r think-spot-journal].\r\n - Print out a [r csf-tangram-packet] for every student.\r\n - Print out a [r csf-tangram-assessment] for every student."
    },
    "coursef/build-your-project": {
        "cs_content": "This lesson provides students with ample time to build and revise their projects. The trial and error inevitably involved in this lesson will teach problem solving and persistence.",
        "description": "Finally you can start building your project!",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. Now the students will be given their own space to create their project with either Artist or Play Lab. This will be the longest portion of the project. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/coursef/15/)."
    },
    "coursef/building-a-foundation": {
        "cs_content": "This lesson teaches that failure is not the end of a journey, but a hint for how to succeed. The majority of students will feel frustrated at some point in this lesson, but it's important to emphasize that failure and frustration are common steps to creativity and success.",
        "description": "Build a structure that can hold a textbook. You might feel frustrated- remember to be persistent! ",
        "overview": "New and unsolved problems are often pretty hard. If we want to have any chance of making something creative, useful, and clever, then we need to be willing to attack hard problems even if it means failing a few times before we succeed. In this lesson, students will be building a structure with common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. Most students will not get this right the first time, but it's important they push through and keep trying.",
        "prep": "-  Watch the [r teacher-video-building-foundation].\r\n-  Watch the [r lesson-in-action-foundation].\r\n-  Print [r csf-building-a-foundation-activity].\r\n-  Gather enough building elements (marshmallows or gumdrops with toothpicks or popsicle sticks) for each group. You don't have to give any certain amount; just make sure you put some limit on materials.\r\n-  Give a [r think-spot-journal] to each student."
    },
    "coursef/common-sense-media-the-power-of-words": {
        "cs_content": "This lesson will provide students with the tools that they need to handle cyberbullying if they are ever in the situation of having someone negatively responds to their online postings. \r\n\r\nStudents may not ever have the misfortune of experiencing cyberbullying, but they should understand what it is so that they can spot it online. Students will learn how to identify cyberbullying and what steps they should take to make it stop. This may become helpful in later puzzles when students have the opportunity to share their work. ",
        "description": "Bullying is never okay. This lesson will teach you about what is and isn't okay to say online.",
        "overview": "Students consider that while they are enjoying their favorite websites they may encounter messages from other kids that can make them feel angry, hurt, sad, or fearful. They explore ways to handle cyberbullying and how to respond in the face of upsetting language online.\r\n\r\nStudents discuss all the ways they use technology for communication and explore the similarities and differences between in-person and online communication. Students then brainstorm ways to respond to cyberbullying. ",
        "prep": " - Preview the [r common-sense-media-power-of-words] and prepare to show it to your class.\r\n - Print out the **Words Can Hurt Handout** from [r common-sense-media-power-of-words] (page 7) for each group of four.\r\n - Print out the **Talk and Take Action Handout** from [r common-sense-media-power-of-words] (page 6) for each student.\r\n - Print out the assessment on page 8-9 of [r common-sense-media-power-of-words].\r\n - Obtain colored pencils and a string the length of the classroom."
    },
    "coursef/conditionals-and-functions-in-bee": {
        "cs_content": "Students will discover the versatility of programming by practicing functions in different environments. Here, students will recognize patterns in the bee's maze. The bee will need to navigate the play area, collect nectar, and make honey. Students will learn to organize their programs and create functions for repeated code. ",
        "description": "The bee needs your help again! Here you will be using functions to get nectar and make honey!",
        "overview": "This lesson teaches students how to create simple functions using our sophisticated “modal” function editor, preparing the way for them to incorporate parameters in future lessons. ",
        "prep": " - Play through the [r csf-course-f] associated with this lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/conditionals-in-minecraft": {
        "cs_content": "This set of puzzles will work to solidify and build on the knowledge of conditionals and loops. By pairing these two concepts together, students will be able to explore the potential for creating complex and innovative programs in a new and exciting environment.",
        "description": "Avoid the lava! Here you will learn about conditionals in the world of Minecraft.",
        "overview": "This lesson gives students a chance to learn and practice conditionals. It features characters and settings from Minecraft, and students will complete tasks such as mining and building structures using their programs.",
        "prep": " - Play through the [r csf-course-f] associated with this lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/debugging-with-scrat": {
        "cs_content": "Students in your class might become frustrated with this lesson because of the essence of debugging. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "description": "Find problems in Ice Age puzzles and practice your debugging skills.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and blocks that are out of order.",
        "prep": " - Play through the [r csf-course-f] to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal].\r\n - Review [r csf-debugging-handout] with the class."
    },
    "coursef/events-in-ice-age": {
        "cs_content": "Students will use events to make characters from Ice Age move around the screen, display messages, and interact with other characters based on user input. This lesson offers an entertaining introduction to events in programming, while providing the opportunity to show creativity! At the end of the puzzle sequence, students will be able to share their projects with friends and family.",
        "description": "Think of your favorite video game. Ever wondered how it was made? In these puzzles you will develop a video game of your own with friends from Ice Age!",
        "overview": "In this lesson, students are guided through a story featuring characters from Ice Age. Students will work with events and loops to make characters move on the screen, and will get the chance to create their own game or story after the guided levels.",
        "prep": " - Play through [r csf-course-f] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/explore-project-ideas": {
        "cs_content": "Exploring project ideas is meant to inspire students with realistic and entertaining ideas for their culminating projects.",
        "description": "Time to get some inspiration! These puzzles will show you a handful of pre-built games and illustrations to help develop your plan for your BIG project.",
        "overview": "The next five lessons provide an opportunity for students to put their coding skills to use in a capstone project. This project will help individuals gain experience with coding and produce an exemplar to share with peers and loved ones. This is intended to be a multi-lesson or multi-week project where students spend time brainstorming, learning about the design process, building, and then presenting their final work. \r\n\r\nIn the \"Explore\" stage, students will play around with pre-built Artist and Play Lab programs for inspiration. Next, students will learn about the design process and how to implement it in their own projects. They will then be given the space to create their own project in Artist, Play Lab, or any other interface that you are comfortable providing. (This is likely the longest stage of the project.) Students will then revise their code after testing and peer review. Finally, students will be able to present their finished work to their classmates.",
        "prep": " - Play through the online [r course-f-project-examples] to get an idea of the strengths, weaknesses, and limitations of the tool.\r\n - Decide whether or not you will have your students do the section on [Revisions](https://studio.code.org/s/coursef/stage/28/puzzle/1) (recommended for Course F).\r\n - Print one copy of the [r design-process] for each student.\r\n - Modify the [r rubric-csf-final-projects] to fit your class goals and print out a copy for each student.\r\n - Modify the [r final-project-design-worksheet] to fit your class and print one packet for each student."
    },
    "coursef/for-loop-fun": {
        "cs_content": "At this point, students have become masters of loops. Today, they will learn about another loop commonly used in programming. The `for` loop repeats commands a certain number of times, but also keeps track of the values it is iterating over. For example, a `for` loop that begins at 4, ends with 8, and has a step value of 1 will repeat 4 times, but the values 4, 5, 6, and 7 will also be captured for use elsewhere. Using this structure with variables can create some pretty fantastic programs. Today, students will simply be learning the basics of a `for` loop before diving into programming with them next time!",
        "description": "You're going to have loads of fun learning about `for` loops!",
        "overview": "We know that loops allow us to do things over and over again, but now we’re going to learn how to use loops that have extra structures built right in. These new structures will allow students to create code that is more powerful and dynamic. ",
        "prep": "- Watch the [r teacher-video-for-loop-fun-2].\r\n- Watch the [r lesson-in-action-for-loop-fun].\r\n- Print one [r csf-for-loop-fun-worksheet] per group.\r\n- Print one [r csf-for-loop-fun-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursef/for-loops-in-artist": {
        "cs_content": "Creativity and critical thinking come together beautifully in this lesson. Students will continue their practice with `for` loops and variables while they create jaw-dropping images. This lesson inspires a creative mind while teaching core concepts to computer science.",
        "description": "Get ready to make your next masterpiece. Here you will be using `for` loops to make some jaw-dropping pictures.",
        "overview": "In this lesson, students continue to practice `for` loops, but this time with Artist. Students will complete puzzles combining the ideas of variables, loops, and `for` loops to create complex designs. At the end, they will have a chance to create their own art in a freeplay level.",
        "prep": " - Play through the [r csf-course-f] associated with this lesson to find and potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/for-loops-in-bee": {
        "cs_content": "Today's concept, `for` loops, are a very important topic in computer science. Not only are they widely used, the process of learning `for` loops enhances the learning of other important concepts (such as variables and parameters.) Students will have plenty of practice critically thinking through problems by determining the starting, ending, and stepping values for each `for` loop. This concept uses plenty of math as well, so feel free to pair it with a math lesson for an even deeper learning experience.",
        "description": "Buzz buzz. In these puzzles you will be guiding a bee to nectar and honey using `for` loops!",
        "overview": "Featuring Bee, this lesson focuses on `for` loops and using an incrementing variable to solve more complicated puzzles. Students will begin by reviewing loops from previous lessons, then they'll walk through an introduction to `for` loops so they can more effectively solve complicated problems.",
        "prep": " - Play through the [r csf-course-f] associated with this lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/functions-with-parameters-in-artist": {
        "cs_content": "This lesson is providing students with a space to create something that they are proud of. \r\n\r\nThese puzzles allow students to create complex images by building off of previous, more simple projects. At the end of this lesson, students will have images to be proud of.",
        "description": "Get your programming fingers ready. In these puzzles you will make impressive drawings in Artist using functions with parameters.",
        "overview": "In this lesson, students continue working with functions with and without parameters. Students will get the chance to create their own drawings before modifying functions in a freeplay level.",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/functions-with-parameters-in-bee": {
        "cs_content": "Functions are incredibly important in computer science for many reasons. The ability to break down and categorize code will become immensely important as the programs your students write become more and more complex. Functions with parameters require an extra level of skill. Using functions with parameters teaches your students to recognize when a function is needed and if that function can be generalized enough to be used for multiple cases. This lesson, along with the previous lessons on functions with parameters, builds a strong set of critical thinking and problem solving skills.",
        "description": "You've had a little practice using functions with parameters. This lesson will continue your practice with Bee!",
        "overview": "This lesson features the bee environment, and continues along the concept of functions with parameters from the previous Artist stage. Students will practice writing and using functions to follow complex paths and collect patterns of nectar and honey.",
        "prep": " - Play through the [r csf-course-f] associated with this level to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/introduction-course-warm-up": {
        "cs_content": "Code.org works hard to make sure everyone has the chance to learn computer science. These \"introduction\" lessons create a level playing field for all students in your class. From beginners to experts, everyone will be taught the basics of programming on Code.org as well as some foundational concepts that the students will later build on.",
        "description": "This lesson will give you practice in the skills you will need for this course.",
        "overview": "In this lesson, students will be introduced to sequences, loops, and nested loops to prepare them for more complicated concepts in the later part of the course. This \"ramp up\" lesson equalizes the playing field between the experts and the beginners in your class. ",
        "prep": " - Play through the [r csf-course-f] puzzles to find potential problem areas for your class.\r\n - Read [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/loops-in-artist": {
        "cs_content": "This series highlights the power of loops with creative and personal designs.  \r\n\r\nOffered as a project-backed sequence, this progression will allow students to build on top of their own work and create amazing artifacts.",
        "description": "In this lesson, loops make it easy to make even cooler images with Artist!",
        "overview": "Watch student faces light up as they make their own gorgeous designs using a small number of blocks and digital stickers! This lesson builds on the understanding of loops from previous lessons and gives students a chance to be truly creative.  This activity is fantastic for producing artifacts for portfolios or parent/teacher conferences.",
        "prep": " - Play through the [r csf-course-f] corresponding to this course to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/nested-loops": {
        "cs_content": "In this introduction to _nested loops_, students will go outside of their comfort zone to create more efficient solutions to puzzles.  \r\n\r\nIn earlier puzzles, loops pushed students to recognize repetition. Here, students will learn to recognize patterns *within* repeated patterns to develop these _nested loops_. This stage starts off by encouraging students try to solve a puzzle where the code is irritating and complex to write out the long way. After a video introduces _nested loops_, students are shown an example and asked to predict what will happen when a loop is put inside of another loop. This progression leads into plenty of practice for students to solidify and build on their understanding of looping in programming.",
        "description": "Loops inside loops inside loops. What does this mean? This lesson will teach you what happens when you place a loop inside another loop.",
        "overview": "In this online activity, students will have the opportunity to push their understanding of loops to a whole new level. Playing with the Bee and Plants vs Zombies, students will learn how to program a loop to be inside of another loop. They will also be encouraged to figure out how little changes in either loop will affect their program when they click `Run`.",
        "prep": " - Play through [r csf-course-f] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/nested-loops-with-frozen": {
        "cs_content": "In this series, students will get practice nesting loops while creating images that they will be excited to share. \r\n\r\nBeginning with a handful of instructions, students will make their own decisions when it comes to creating designs for repetition.  They will then spin those around a variety of ways to end up with a work of art that is truly unique.",
        "description": "Anna and Elsa have excellent ice-skating skills, but need your help to create patterns in the ice. Use nested loops to create something super COOL. ",
        "overview": "Now that students know how to layer their loops, they can create so many beautiful things.  This lesson will take students through a series of exercises to help them create their own portfolio-ready images using Anna and Elsa's excellent ice-skating skills!",
        "prep": " - Play through the [r csf-course-f] corresponding to this lesson to find and potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/present-your-project": {
        "cs_content": "At this point, students have worked very hard on their projects, so this lesson is meant to offer a space for the students to share their projects. This lesson will build a supportive community where students will build their own confidence and feel connected to their hardworking peers.",
        "description": "Time to show your work! Here you will be presenting your awesome project to your peers.",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. Finally, students will be able to present their finished work to their peers or share with their loved ones with a special link. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/coursef/15/)."
    },
    "coursef/programming-in-artist": {
        "cs_content": "Building off of the students' previous experience with sequencing, this lesson will work to inspire more creativity with coding. The purpose of this lesson is to solidify knowledge on sequencing by introducing new blocks and goals. In this case, students learn more about pixels and angles using the new blocks, while still practicing their sequencing skills. Also, students will be able to visualize new goals such as coding the Artist to draw a square.",
        "description": "Create beautiful images by programming the Artist.",
        "overview": "In this lesson, students will take control of the Artist to complete drawings on the screen. This Artist stage will allow students to create images of increasing complexity using new blocks like `move forward by 100 pixels` and `turn right by 90 degrees`.",
        "prep": " - Play through the [r csf-course-f] in stage 6 to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - (Optional) Obtain protractors for your class to visualize the angles they must use to complete the puzzles.\r\n - Print one [r csf-turns-angles-doc] for each student."
    },
    "coursef/programming-my-robotic-friends": {
        "cs_content": "This lesson serves as a reintroduction to loops, using the now familiar set of \"robot\" programming instructions. Students will develop critical thinking skills by looking for patterns of repetition in the movements of classmates and determining how to simplify those repeated patterns using loops.",
        "description": "Turn your friends into robots and tell them what to do using loops!",
        "overview": "Building on the initial \"My Robotic Friends\" activity, students learn to use loops when programming their robots in order to build bigger structures more efficiently.",
        "prep": " - Watch the [r my-loopy-rf-teacher-vid].\r\n - (Optional) Print out one [r symbol-key] per group or 4 students. Alternatively, find a place to display this information where students can reference throughout the lesson.\r\n - Prepare a stack of 20 paper cups for each group of 4 students.\r\nOR\r\n - (Optional) print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "coursef/revise-your-project": {
        "cs_content": "This lesson helps students take a step back and view their project from a new perspective. Here, students will be able to decide if they have reached their goals. If they haven't, this lesson gives them time and space to complete the project.",
        "description": "Rome wasn't built in a day and your project shouldn't be, either. Take time to edit and revise your project to make it the best it can be.",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. Now that the projects are built, students are given the opportunity to get feedback from peers and revise their projects. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/coursef/15/)."
    },
    "coursef/sequences-in-maze": {
        "cs_content": "We recognize that every classroom has a spectrum of understanding for every subject. Some students in your class may be computer wizards, while others haven't had much experience at all. In order to create an equal playing (and learning) field, we have developed this \"Ramp Up Stage\" for Course D. This can be used as either an introduction or a review of how to use Code.org and basic computer science concepts. ",
        "description": "In this lesson, you will learn how to write your very own programs!",
        "overview": "In this set of puzzles, students will begin with an introduction (or review depending on the experience of your class) of Code.org's online workspace. There will be videos pointing out the basic functionality of the workspace including the `Run`, `Reset`, and `Step` buttons. Also discussed in these videos: dragging Blockly blocks, deleting Blockly blocks, and connecting Blockly blocks. Next, students will practice their _sequencing_ and _debugging_ skills in maze. ",
        "prep": " - Play through the [r csf-course-f] to find any potential problem areas for your class.\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "coursef/songwriting-with-parameters": {
        "cs_content": "Using functions helps simplify code and develops the student's ability to organize their program. Parameters will help the students customize their functions so that they can be used for patterns that are similar, though not identical. Students will quickly recognize that writing functions will make their long programs easier to read and easier to debug if something goes wrong.",
        "description": "You just might release the next big hit single! In this lesson, you will be learning what parameters are and how they make some fantastic songs!",
        "overview": "One of the most magnificent structures in the computer science world is the function. Functions (sometimes called procedures) are mini programs that you can use over and over inside of your bigger program. This lesson will help students intuitively understand why combining chunks of code into functions is such a helpful practice, and how they can use those structures even when chunks of code are slightly different.",
        "prep": "- Watch the [r teacher-video-songwriting-functions].\r\n- Watch the [r lesson-in-action-songwriting-parameters].\r\n- Print several [r csf-songwriting-parameter-worksheet] for each group.\r\n- Print one [r csf-songwriting-parameter-assessment] for each student.\r\n- Access to the internet, or pre-downloaded songs and lyrics for activity.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursef/the-design-process": {
        "cs_content": "Students may be ready to jump straight into building their projects, but this lesson will help shape their ideas into plans. This structure will keep the dreamers grounded and illuminate a path for those feeling left in the dark.",
        "description": "Projects this big take time and plenty planning. Here, you will learn about the design process that you'll use to build your own creation.",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. In this portion of the project, students will learn about the design process and how to implement it in their own projects. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/coursef/25/)."
    },
    "coursef/variables-in-artist": {
        "cs_content": "Variables are essentially placeholders for values that are unknown at the time that you run your program or for values that can change during the execution of a program. These constructs are vital to creating dynamic code because they allow your program to change and grow based on any number of potential modifications.  This stage teaches students what variables are, using the most basic capabilities of setting and using them.",
        "description": "Don't forget to bring creativity to class! In these puzzles you will be making fantastic drawings using variables.",
        "overview": "In this lesson, students will explore the creation of repetitive designs using variables in the Artist environment. Students will learn how variables can be used to make code easier to write and easier to read. After guided puzzles, students will end in a freeplay level to show what they have learned and create their own designs.",
        "prep": "- Play through the [r csf-course-f] associated with this lesson to find any potential problem areas for your class.\r\n- Review [r csf-lesson-recommend].\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursef/variables-in-envelopes": {
        "cs_content": "Variables are very helpful in programming. Students will be introduced to this topic using envelopes to represent variables that have been given names. The value of the variable will be written on a card inside of an envelope. This lesson helps students understand how names can be a placeholder for values in the physical world, so that programming with variables will seem less confusing in the virtual world.",
        "description": "Envelopes and variables have something in common: both can hold valuable things. Here you will learn what variables are and the awesome things they can do.",
        "overview": "Variables are used as placeholders for values such as numbers or words. Variables allow for a lot of freedom in programming. Instead of having to type out a phrase many times or remember an obscure number, computer scientists can use variables to reference them. This lesson helps to explain what variables are and how we can use them in many different ways. The idea of variables isn't an easy concept to grasp, so we recommend allowing plenty of time for discussion at the end of the lesson.",
        "prep": "- Watch the [r teacher-video-envelope-variables-2].\r\n- Obtain 6 or more blank envelopes for warm up plus some for the main activity.\r\n- Print one [r csf-envelope-variables-worksheet] per student.\r\n- Print one [r csf-variables-assessment-worksheet] for each student.\r\n- Provide students with envelopes, paper, pens & pencils.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "coursef/variables-in-play-lab": {
        "cs_content": "This lesson lets students use variables to display phrases or conversations based on user input. This lesson serves as a wonderful practice exercise for variables in programming, with an extra dose of creativity! At the end of the puzzle sequence, students will be presented with the opportunity to share their projects with family and friends.",
        "description": "Soon you will learn about making characters interact in a game using variables!",
        "overview": "Students will get further practice with variables in this lesson by creating scenes in Play Lab. Students will work with user input to set the values of their variables, then get space to create their own mini-project with variables.",
        "prep": " - Play through the [r csf-course-f] associated with this lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "csp-create-performance-task/create-performance-task": {
        "cs_content": "\r\nThere are no new CS concepts covered in this lesson. Students will work individually or with a collaborative partner on the Create Performance Task.",
        "description": "The lesson includes some final reminders and guidelines for completing the Create PT before officially starting. For a total of 12 class hours, you will work on your project with only types of teacher support allowed (essentially: Advise on process, not ideas).  You may also work with a collaborative partner in *in development of you program* - written responses must be done on your own.",
        "overview": "It is finally time for students to take on the Create Performance Task. For a total of 12 class hours, students should work on their projects with only types of teacher support allowed (essentially: Advise on process, don’t influence or evaluate ideas).  Students may also work with a collaborative partner in *in development of their program* - written responses must be done on their own.\r\n\r\nThe lesson includes reminders about how you can interact with students while they are working on their projects, and suggestions about time line. The Create PT requires a minimum of 12 hours of class time.  At the end, students will submit their program code, program video, and written responses through their AP digital portfolio.",
        "prep": "* Review the [r csp-ced-2018] to understand the teacher's role on the Create PT\r\n* Review how to create a stand-alone App Lab project to assist students"
    },
    "csp-create-performance-task/preparing-for-the-create-pt": {
        "cs_content": "There are no new CS concepts covered in this lesson. It is a review of the processes and requirements of the Create Performance Task before students begin working on it individually. ",
        "description": "This lesson uses the Create PT Survival Guide as the backbone for a series of activities to ramp up to doing the actual Create PT. It contains activities to help students understand the algorithm and abstraction requirements of the task, as well as activities to help them narrow down and brainstorm ideas for their actual project.",
        "overview": "This lesson uses the [r create-pt-survival-guide] as the backbone for a series of activities to ramp up to doing the actual Create PT. It contains activities to help students understand the algorithm and abstraction requirements of the task, as well as activities to help them narrow down and brainstorm ideas for their actual project.\r\n\r\nThe lesson concludes by providing students with resources to make a plan to complete the task staring in the next lesson."
    },
    "csp-create-performance-task/review-the-create-performance-task": {
        "cs_content": "The Create PT is in many ways straightforward: you complete a self-directed programming project and respond to prompts about your program and process. As you dig into the details of the task, however, you quickly come across some of the nuances of individual components of the task and how they're scored. This lesson is designed to introduce what these nuances are, and begin to provide some answers to the questions that will inevitably arise. Keep in mind that the next lesson provides a more structured set of responses to those questions, and so today students are just diving in to what the task looks like.",
        "description": "This lesson contains a series of activities you can use to help students familiarize themselves with Create Performance Task, how it is scored, and some example tasks provided by the College Board.",
        "overview": "This lesson contains a series of activities you can use to help students familiarize themselves with Create Performance Task, how it is scored, and some example tasks provided by the College Board.\r\n\r\nStudents review the Submission Requirements and Scoring Guidelines for the Create PT. Subsequently they review three example scored Create PT submissions with commentary to better understand how the Submission Requirements and Scoring Guidelines are used together. In a wrap-up conversation they identify a piece of advice, a \"gotcha\", and a remaining question they have about the Create PT.\r\n\r\nNote: Much the sample tasks, scores, and commentary on scoring shared in this lesson come directly from the College Board. Code.org's commentary is noted where applicable.",
        "prep": "* Print or prepare to distribute digital copies of [r AP PT directions]"
    },
    "csp-explore-performance-task/explore-performance-task": {
        "cs_content": "There are no new CS concepts covered in this lesson. Students will individually work on the Explore Performance Task.",
        "description": "This lesson contains guidelines for teachers during administration of the Explore PT.  It includes reminders about how you can interact with students while they are working on their projects, and suggestions about timeline.  The Explore PT requires a minimum of 8 hours of class time.  At the end, students will submit their computational artifact and written responses through their AP digital portfolio.",
        "overview": "It is finally time for students to take on the Explore Performance Task. For a minimum of 8 class hours, students should work on their projects with only types of teacher support allowed (essentially: Advise on process, don’t influence or evaluate ideas). \r\n\r\nThe lesson includes reminders about how you can interact with students while they are working on their projects, and suggestions about time line. The Explore PT requires a minimum of 8 hours of class time.  At the end, students will submit their computational artifact and written responses through their AP digital portfolio.\r\n",
        "prep": "* Forum\r\n* [Implementation Guidelines](https://docs.google.com/document/d/1QB6vo46nJcj59OoPAlTTsA8aZ32mOc98CNbKJxTJkJM)\r\n"
    },
    "csp-explore-performance-task/explore-pt-prep-reviewing-the-task": {
        "cs_content": "The Explore PT is in many ways straightforward: you perform research on a computing innovation and present your findings. As you dig into the details of the task, however, you quickly come across some of the nuances of individual components of the task and how they're scored. This lesson is designed to introduce what these nuances are, and begin to provide some answers to the questions that will inevitably arise. Keep in mind that the next lesson provides a more structured set of responses to those questions, and so today students are just diving in to what the task looks like.",
        "description": "This lesson contains a series of activities you can use to help students familiarize themselves with Explore Performance Task, how it is scored, and some example tasks provided by the College Board.",
        "overview": "This lesson contains a series of activities you can use to help students familiarize themselves with Explore Performance Task, how it is scored, and some example tasks provided by the College Board.\r\n\r\nStudents review the Submission Requirements and Scoring Guidelines for the Explore PT. Subsequently they review three example scored Explore PT submissions with commentary to better understand how the Submission Requirements and Scoring Guidelines are used together. In a wrap-up conversation they identify a piece of advice, a \"gotcha\", and a remaining question they have about the Explore PT.\r\n\r\nNote: Most the exemplar task, scores, and commentary on scoring shared in this lesson come directly from the College Board. Code.org's commentary is noted where applicable.",
        "prep": "* Print or prepare to distribute digital copies of [r AP PT directions]"
    },
    "csp-explore-performance-task/preparing-for-the-explore-pt": {
        "cs_content": "These activities are designed to approach reviewing the Explore Performance Task in a whole-class-discussion inquiry-based way. It's not required that you do this, but there is a fair amount of reading to get through and this should help break it up.",
        "description": "This lesson uses the Explore PT Survival Guide - Student Guide as the backbone for a series of activities to ramp up to doing the actual Explore PT.  It contains some brainstorming activities around what qualifies as a \"computing innovation\" for the task as well practical advice and strategies for handling some of the nuances of the task such as distinguising between a \"harmful effect\" and a \"data security or privacy concern.\"",
        "overview": "This lesson uses the [r explore-pt-survival-guide] as the backbone for a series of activities to ramp up to doing the actual Explore PT.  It contains some brainstorming activities around what qualifies as a \"computing innovation\" for the task as well practical advice and strategies for handling some of the nuances of the task such as distinguising between a \"harmful effect\" and a \"data security or privacy concern.\"\r\n\r\nThe lesson concludes by providing students with resources to make a plan to complete the task staring in the next lesson.",
        "prep": "* Review the [r explore-pt-survival-guide]\r\n* Decide whether you are going to print the [r explore-pt-survival-guide] - either in whole or in parts, or have students review and use the documents online.\r\n* Reference the actual [r AP PT directions] and [r Explore PT scoring guidelines] if necessary.\r\n"
    },
    "css-and-style/for-dani": {
        "cs_content": "Up until this point, the only styling students have been able to do is styling by element, which means that every element of a particular kind has the same style. Classes allow for web developers to group together a set of elements they want to style.  This means students can single out a certain element they want to style or group together elements from one or more types of elements. Once elements are in a class, the class can be used as a selector in a style rule. \r\n\r\nNote: Single elements can also be selected by id, but this type of selection is possible with a class applied only to that single element.  Because id selection does not add any extra functionality, it is not taught in this course.",
        "description": "This lesson covers classes and custom colors. The class first learns how to specify custom colors using RGB (red, green, blue) values, then applies these colors to a new Four Seasons web page, which uses CSS classes.  Using classes, the class adds more styles to the Four Seasons web page, then use them to style their personal websites.",
        "overview": "In this lesson, students first learn how to specify custom colors using their RGB (red, green, blue) values.  They then apply these colors to a new Four Seasons web page, which uses CSS classes.  CSS classes allow web developers to treat groups of elements they want styled differently than other elements of the same type. Using classes, students add more styles to the Four Seasons web page, then use them to style their personal websites.",
        "prep": "* Print a copy of [r rgb-colors] for every student."
    },
    "css-and-style/introduction-to-styling-with-css": {
        "cs_content": "While there are many CSS properties, the properties highlighted in the levels are simple properties that can style text elements. Students will use these properties often. More properties are covered in subsequent lessons. ",
        "description": "This lesson introduces CSS as a way to style elements on the page. The class learns the basic syntax for CSS rule-sets and then explores properties that impact HTML text elements.  Finally, everyone applies text styles to their personal websites.",
        "overview": "This lesson introduces CSS as a way to style elements on the page. Students learn the basic syntax for CSS rule-sets and then explore properties that impact HTML text elements. They work on a HTML page about Guinness World Record holders, adding their own style to the provided page. In the last level, students apply what they have learned about styles for text elements to their personal web page.\r\n\r\n",
        "prep": "* Create a new poster titled **CSS Properties** if your students will not be tracking new CSS properties in their journals"
    },
    "css-and-style/personal-website-finalizing-site": {
        "cs_content": "This project emphasizes many of the core practices of this course. Students will need creativity, problem solving skills, and persistence to complete their websites.  This final section of the project requires those practices as well as collaboration and communication. Peer review will encourage students to leverage their peers as resources. The final reflection and presentation allow students to practice communication about their work.\r\n",
        "description": "In the last few days of the unit, the class finalizes their personal websites, working with peers to get feedback, review the rubric, and put the finishing touches on the site. To cap off the unit, everyone shares their projects and how they were developed.",
        "overview": "Students have spent a lot of time throughout the unit working on their Personal Website. In the final couple of days students finalize their websites.  They work with peers to get feedback, put the finishing touches on the websites, review the rubric and reflect on their process. To cap off the unit, they will share their projects and also a overview of the process they took to get to that final design.\r\n",
        "prep": "* Figure out a way to showcase all the students projects and get as many users as possible to check them out\r\n* Plan out the day breakdown based on your class schedule\r\n* Print a copy of [r final-peer-review] for each student.\r\n* Print a copy of [r personal-website-1] for each student.\r\n* Print a copy of [r final-personal-website-1] for each student."
    },
    "css-and-style/sources-and-search-engines": {
        "cs_content": "Students use search engines all the time. They take for granted how hard it is to produce search engine results in seconds. In order to give them a deeper understanding of the algorithms that control modern search, students will develop their own algorithms. \r\n\r\nThis lesson connects back to Unit 1, which is explicitly called out in the Wrap Up. This a problem that humans and computers solve differently. In fact it's a problem that computers solve better than humans, as a human would take too much time to search through huge amounts of data. Humans, however, still have a major role to play in searching effectively, as computers are unable to reliably tell us which websites contain trustworthy information and which are scams. Through this lesson, students will collaboratively create a class checklist that they can use to vet websites they come across for relevance and trustworthiness.",
        "description": "After first completing a web search scavenger hunt, the class learns about the inner workings of search engines and has an opportunity to flex their analytical skills in a search for strange and unlikely animals.",
        "overview": "This lesson encourages students to think more critically about how web searches work and how to find relevant and trustworthy information online. After viewing and discussion a video about how search engines work, students will search for information about several unlikely animals. They'll need to analyze the sites they find for reliability in order to identify which of the animals is actually a hoax.",
        "prep": "* Print a copy of [r internet-scavenger-hunt] for each pair of students.\r\n* Print a copy of [r strange-animals] for each pair of students.\r\n* Create a blank poster titled **Trustworthiness Checklist** and place it on the wall.\r\n"
    },
    "css-and-style/styling-elements-with-css": {
        "cs_content": "This lesson builds on what students previously learned about CSS properties, this time looking at properties that can be used all elements.  These new properties impact the visual look of the web page beyond its text and give students more precise control over the layout of their pages. As students expand their knowledge of style properties, many may have questions about how they can do even more with CSS. Curious students can explore more properties at <a href=\"http://www.w3schools.com/cssref/\"> W3 Schools </a>.",
        "description": "This lesson continues the introduction to CSS style properties, this time focusing more on non-text elements. The class begins by investigating and modifying the new CSS styles on a Desserts of the World page. Afterwards, everyone applies this new knowledge to their personal websites.",
        "overview": "This lesson continues the introduction to CSS style properties, this time focusing more on non-text elements. Students begin this lesson by looking at a website about Desserts of the World. They investigate and modify the new CSS styles on this website, adding their own styles to the page. After working on the Desserts page, students apply their knowledge of new CSS properties to do more styling of their personal websites."
    },
    "curriculum/csp/unit1/5/encoding-numbers-in-the-real-world": {
        "cs_content": "Determining the number of bits that will be used in each binary number can have a profound impact on computing systems we rely upon. Many older operating systems and protocols for encoding time made use of 32-bit numbers. As computational power and time have both progressed, standards have migrated to larger binary numbers, usually 64-bit, in order to accommodate changing demands of these systems. Moving all members of the computing community over to these new standards can take some time, however, as many users continue to expect to receive and send information using the older 32-bit protocol. ",
        "description": "In this lesson, students explore some fascinating stories from the news and history (and the future) about number encodings in computers. These stories should serve to illuminate how the kinds of decisions students have been making about number encodings are the same kinds of things that real scientists in the world have to worry about, sometimes with disastrous consequences. While this lesson has the possibility of running long, it is meant only as a short excursion into real-world application and should be limited to one class period.",
        "overview": "In this lesson, students explore some fascinating stories from the news and history (and the future) about number encodings in computers. These stories should serve to illuminate how the kinds of decisions students have been making about number encodings are the same kinds of things that real scientists in the world have to worry about, sometimes with disastrous consequences. While this lesson has the possibility of running long, it is meant only as a short excursion into real-world application and should be limited to one class period.",
        "prep": "\r\n- (Optional) A set of articles about number encoding tailored for your class/students\r\n"
    },
    "data-representation/ascii": {
        "cs_content": "This lesson is an opportunity to make some real world connections from the previous lesson and review some of the concepts students saw in that activity. Students are formally introduced to the concept of binary, learn what a bit of information is, and get practice using a binary system. Students review the fact that patterns of bits can be used to represent information and consider why having patterns that are all the same length (in this case 7 bits) makes it easier to use a system.",
        "description": "This lesson introduces a formal binary system for encoding information, the ASCII system for representing letters and other characters. At the beginning of the lesson the teacher introduces the fact that computers must represent information using either \"on\" or \"off\". The class is then introduced to the ASCII system for representing text using binary symbols and practices using this system before encoding their own messages using ASCII.",
        "overview": "In this lesson students learn to use their first binary system for encoding information, the ASCII system for representing letters and other characters. At the beginning of the lesson the teacher introduces the fact that computers must represent information using either \"on\" or \"off\". Then students are introduced to the ASCII system for representing text using binary symbols. Students practice using this system before encoding their own message using ASCII. At the end of the lesson a debrief conversation helps synthesize the key learning objectives of the activity.",
        "prep": "* Print copies of [r ascii-text-activity-guide]\t"
    },
    "data-representation/binary-numbers": {
        "cs_content": "Students learn how to use the binary system to represent integers.  Unlike ASCII, which is presented as an arbitrary mapping of bit patterns to characters, binary numbers are introduced within the context of patterns of numbers.  Students use the patterns to determine the binary representations of different numbers, rather than simply looking them up in a table.\r\n\r\nThis lesson borrows heavily from a similar activity in [CS Unplugged](http://csunplugged.org/binary-numbers/).",
        "description": "This lesson introduces the binary number system.  With a set of cards that represent the place values in a binary (base-2) number system, the class turns bits \"on\" or \"off\" by turning cards face up and face down, then observes the numbers that result from these different patterns.  Eventually, the pattern is extended to a generic 4-bit system.",
        "overview": "In this lesson, students learn about the binary number system.  With a set of cards that represent the place values in a binary (base-2) number system by a collection of dots, students turn bits \"on\" or \"off\" by turning cards face up and face down, then observe the numbers that result from these different patterns.  Eventually, students extend the pattern to a generic 4-bit system."
    },
    "data-representation/black-and-white-images": {
        "cs_content": "This lesson introduces another commonly used system of representing information in binary. The most obvious takeaways from the Pixelation Widget will obviously be that a 1 means an \"On\" and a 0 means an \"Off\". What might be less obvious, however, is that the width and height of the image need to be agreed upon in order to interpret the binary image information as well. Finally this is an opportunity to explore how systems for representing information are created. A \"raw\" image is really hard to represent. The idea to turn an image into a grid of black and white squares significantly simplifies this challenge and makes it into the kind of problem that computer scientists knew how to solve. While the activity in this lesson may feel like just typing 0s and 1s, it actually reveals a lot about how people think about representing information in binary, and what challenges and tradeoffs are created as a result.",
        "description": "This lesson continues the study of binary representation systems, this time with images. The class is introduced to the concept of splitting images into squares or \"pixels\" which can then be turned on or off individually to make the entire image. After doing a short set of challenges using the Pixelation Widget, the class makes connections between the system for representing images and the system for representing text they learned in the previous lesson.",
        "overview": "In this lesson students learn how computers represent images. To begin the lesson they consider the challenge of turning all the complexity of vision into a binary pattern. Through a series of images showing how this transformation is made students are introduced to the concept of splitting images into squares or \"pixels\" which can then be turned on or off individually to make the entire image. Students then do a short set of challenges using the Pixelation Widget in order to draw black and white images. Puzzles are designed to call out some of the challenges of representing images in this way. In the wrap up students make connections between the system for representing images and the system for representing text they learned in the previous lesson.",
        "prep": "* Practice using the Pixelation Widget for ~10 mins to prepare to respond to questions"
    },
    "data-representation/combining-representations": {
        "cs_content": "In previous lessons, students used different representation systems in isolation.  Here, they see various representation systems used together within the same record.  They should see that it's important not only to know the various codes, but to create rules about which codes are being used at which points in the record.  Without this structure, it is impossible to decode a series of bits.",
        "description": "This lesson combines all three types of binary representation systems (ASCII characters, binary number, and images) to allow for the encode of more complex types information in a record.  After seeing a series of bits and being asked to decode them, the class is introduced to the idea that  understanding binary information requires understanding both the system that is being used and the meaning of the information encoded.",
        "overview": "In this lesson, students use all three types of binary representation systems (ASCII characters, binary number, and images) to decode information in a record.  After seeing a series of bits and being asked to decode them, students are introduced to the idea that in order to understand binary information, they must understand both the system that is being used and the meaning of the information encoded.  They then decode a record representing a pet based on a given structure."
    },
    "data-representation/hiding-data": {
        "cs_content": "As students have been encoding and decoding with data, they have not been worried about the securing of the data that they are using.   In this lesson, they begin to think about how they can ensure that only the intended recipient can read the data that they send.  They will use a simple cipher to encode a message.  Students should understand that in order to encrypt a message, they need both an algorithm and a key, and that it is important that the key be kept secret.  ",
        "description": "Students have a discussion on the different levels of security they would like for personal data.  Once the class has developed an understanding of the importance of privacy, they learn about the process of encrypting information by enciphering a note for a partner and deciphering the partner's note.  The class concludes with a discussion about the importance of both physical and digital security.",
        "overview": "Students have a discussion on the different levels of security they would like for personal data.  Once the class has developed an understanding of the importance of privacy, they learn about the process of encrypting information by enciphering a note for a partner and deciphering the partner's note.  The class concludes with a discussion about the importance of both physical and digital security."
    },
    "data-representation/represent-a-thing": {
        "cs_content": "This lesson forces students to grapple with some of the challenges of representing information to a computer. Computers are good at representing some kinds of information like numbers or characters, but this forces people to represent information in ways that might not always capture the full analog experience of an object or event. The project also serves as a cumulative project for the chapter, bringing together the different representation systems students have learned. As students move into the next chapter they'll look more closely at how information is used to make decisions once it's in a format that can be input to a computer.",
        "description": "The class designs structure to represent their perfect day using the binary representation systems they've learned in this chapter. After deciding which pieces of information the record should capture, the class will decide how a punch card of bytes of information will be interpreted to represent those pieces of information. Afterwards, everyone will use the ASCII, binary number, and image formats they have learned to represent their perfect days try to decipher what a partner's perfect day is like.",
        "overview": "In this lesson students design a structure to represent their perfect day using the binary representation systems they've learned in this chapter. Students will first write a short description of their perfect day and then review with a partner to identify the key pieces of information they think a computer could capture. As a class students will decide how a punch card of bytes of information will be interpreted to represent those pieces of information. Students will then use the ASCII, binary number, and image formats they have learned to represent their perfect days. Students then trade punch cards and try to decipher what the other student's perfect day is like. The lesson ends with a reflection."
    },
    "data-representation/representation-matters": {
        "cs_content": "This lesson introduces a number of important ideas that students will explore in this chapter. They'll see that the same objects can be represented in a number of different ways. In Chapter 1 they'll learn the different representation systems that computers use to represent information. They'll also see in this lesson that representation matters when we use data to make decisions. In Chapter 2 of this unit students will explore more deeply how data can be used by humans and computers to make decisions.",
        "description": "This first lesson provides an overview of what data is and how it is used to solve problems.  Groups use a data set to make a series of meal recommendations for people with various criteria.   Afterwards, groups compare their responses and discuss how the different representations of the meal data affected how the students were able to solve the different problems.",
        "overview": "In the first lesson of the data unit, students get an overview of what data is and how it is used to solve problems.  Students start off with a brief discussion to come to a common understanding of data.  They then split into groups and use a data set to make a series of meal recommendations for people with various criteria.  Each group has the choices of meal represented in a different way (pictures, recipes, menu, nutrition) that gives an advantage for one of the recommendations.  Afterwards, groups compare their responses and discuss how the different representations of the meal data affected how the students were able to solve the different problems.",
        "prep": "* Print copies of [r meals-data] so that each group can get one of the four pages\r\n* Print one copy of [r representation-matters] for each group"
    },
    "data-representation/representing-information-with-cards": {
        "cs_content": "In this lesson students get to explore for themselves the qualities of a good system for representing information. They should find through creating and testing their systems that\n\n1. there are typically many possible systems for representing information\n2. people must agree on a common set of rules for a system to work\n\nThe features of the systems students create in this lesson serve as a reference point in coming lessons when students explore the representation systems actually used in computers.\n\nIn the next lesson students will be introduced to the concept of binary and how computers use on-off signals or \"0's and 1's\" to represent information. Even though this concept is hinted at in the introductory yes-no activity, it shouldn't be introduced until the next lesson.",
        "description": "This lesson looks closer at what is needed to create a system of representation.  Groups create systems that can represent any letter in the alphabet using only a single stack of cards, then create messages with their systems and exchange with other groups to ensure the system worked as intended.   The class discusses commonalities between working systems while recognizing that there are many possible working solutions.",
        "overview": "In this lesson students create their own system for representing information. They begin by brainstorming all the different systems they already use to represent yes-no responses. They then work in small groups to create a system that can represent any letter in the alphabet using only a single stack of cards. The cards used have one of 6 different possible drawings (6 animals, 6 colors, etc.) and so to represent the entire alphabet students will need to use patterns of multiple cards to represent each letter. Students create messages with their systems and exchange with other groups to ensure the system worked as intended. In the wrap-up discussion the class  reviews any pros and cons of the different systems. They discuss commonalities between working systems and recognize that there are many possible solutions to this problem and what's important is that everyone use the same arbitrary system to communicate.",
        "prep": "* Print one copy of the [r representing-information-with-cards] for each group of 2-3\r\n* Print and cut up one copy of [r animal-shapes] for each group  of 2-3"
    },
    "day-1/11": {
        "cs_content": "Add Purpose",
        "description": "Welcome teachers to TeacherCon and explain what the week will look like.",
        "overview": "Welcome teachers to TeacherCon and explain what the week will look like.",
        "prep": "Room Setup:\n\n* Projector Screens at front of room\n* Microphone for speaker\n* At least 2 runner microphones\n* Projection controlled from the podium\n* Audio controlled from podium\n* Ballroom style session\n* Tables are large rounds of 10\n* Tables set-up with the regional breakout rooms written on table tents, encrypted with a caesar cipher.\n* Teal books on tables\n* Purple books on tables\n* All facilitators are sitting with their home region\n\nFacilitator Supplies:\n\n* Add\n\nTeacher Materials:\n\n* Teal Book\n* Purple Book"
    },
    "day-1/11-1": {
        "cs_content": "Kick off the week! Get to know the people you are with and understand what will happen during the week.",
        "description": "Kick off the week! Get to know the people you are with and understand what will happen during the week.",
        "overview": "Kick off the week! Get to know the people you are with and understand what will happen during the week.",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-local-summer-workshop]\n* ADD STUFF\n\nTeacher Materials:\n\n* Teal Books\n* Computers\n* ADD STUFF\n"
    },
    "day-1/12": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-teachercon-slides-2017-1]\n\nTeacher Materials:\n\n* [r cs-principles-course-exam-description-2017-2018]\n* Post-it notes\n"
    },
    "day-1/12-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* [r csp-local-summer-workshop]\n\nTeacher Materials:\n\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book]\n* Post-it Notes"
    },
    "day-1/13": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-1/13-1": {
        "cs_content": "Add stuff",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-local-summer-workshop]\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]"
    },
    "day-1/14": {
        "cs_content": "Set context for unit 1 before diving into lesson ",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Create an outline of a map on chart paper for the region(s) represented in your room \n\nFacilitator Supplies:\n\n* [r csp-teachercon-slides-2017]\n\nTeacher Materials:\n\n* [r csp-teal-book]\n"
    },
    "day-1/14-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Maker materials for lesson\r\n* Lesson planning packet\r\n"
    },
    "day-1/15": {
        "cs_content": "Introduce the curriculum and the TLO process by experiencing lessons as a learner\n\n**Model Lesson:**\n\n* **Engagement:** everyone can make things out of junk!\n* **CS content:**\n* Communicating a binary state over a physical distance is what the stuff that makes up the internet does.\n*  Foreshadowing: the rate at which you can reliably send and receive those bits is the bitrate - the “speed” of the connection. To send different information send a sequence of binary states, rather than inventing new states for your device.\n* **Pitfalls:** At the start of the lesson, there can be some confusion about the goal (providing instructions in writing can help with this).  most devices will actually have a 3rd “do nothing” state, which means it’s not truly binary.  That’s okay.  This is why we demonstrate with a flashlight in the next lesson.\n",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Maker materials for lesson (examples below)\n* Cups\n* Strings\n* Slinky\n* Flash Lights\n* Construction Paper\n* Markers\n* Etc.\t\n* Lesson planning packet (The Activity Guide, [r binary-message-devices], for Lesson will be in the packet.)\n"
    },
    "day-1/15-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Make sure everyone has joined the right section (join URLS in the slide deck)\r\n\r\nFacilitator Supplies:\r\n\r\n* [r csp-local-summer-workshop]\r\n\r\nTeacher Materials:\r\n\r\n* Laptops (Ideally 1:1)\r\n* Lesson plan packet \r\n\r\n\r\n"
    },
    "day-1/16": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-1/16-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Participants sitting with their co-planners \n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Computers\n* Lesson Plan Packets\n"
    },
    "day-1/17": {
        "cs_content": "ADD STUFF\n\n**Model Lesson**\n\n* **Engagement:** Exploration and discovery of the “mystery” of the Internet Simulator.  \n* **CS Content:** the internet simulator enforces the rules of truly binary states, and that the sender and receiver are blind to the state of the wire unless they set it or choose to read it. Protocols coordinate the setting and reading of the wire using a clock (pulse timer), and describing rules for which party is sending and which is receiving. \n* **Pitfalls:** a misconception is that clocks need to be synchronized - i.e. “tick” at the same instant. It’s actually better if they’re out of sync because it gives more buffer for human error.  Explaining the setup of blind sender/receiver and what “setting” and “reading” the wire really means is challenging. It works out better to let people play and discover, and if necessary, explain afterward.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Make sure everyone has joined your section\n\nFacilitator Supplies:\n\n* Flashlight or [r flashlight test]\n\nTeacher Materials:\n\n* Laptops (ideally 1:1)\n* Lesson plan packet\n"
    },
    "day-1/17-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Journals\n* Chart paper\n* Markers \n* Lesson planning packet"
    },
    "day-1/18": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Name badges\r\n"
    },
    "day-1/18-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Gots and Needs charts around the room\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Computers\n"
    },
    "day-1/break": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-1/break-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-1/break-2": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-1/break-3": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-1/day-1-wrap-up": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n* Gots and Needs charts around the room\r\n"
    },
    "day-1/lesson-1": {
        "cs_content": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "description": "Kick off the day by discussing how things are going and generating topics of interest.",
        "overview": "Kick off the day by discussing how things are going and generating topics of interest.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q3 and Q4 2 Day Workshop Page](https://curriculum.code.org/plcsp/q3-and-q4/)\r\n* Posters up for people to add post-its to as they come in\r\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r csp-q3-and-q4-2-day]\r\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\r\n* [r csp-q3-and-q4-2-day-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n* [r cs-discoveries-facilitator-playbook]\r\n* Poster Paper (Regional Partner Provides)\r\n* [r workshop-dashboard]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book](Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Journal (Should bring with them.)\r\n* Post-its"
    },
    "day-1/lesson-2": {
        "cs_content": "Introduce teachers to Unit 4.",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)"
    },
    "day-1/lesson-3": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the activity in lessons that are coming up.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* One sheet of chart paper per lesson demo’d, hung around the room \n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r cs-discoveries-facilitation-guide]\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\n* Chart Paper\n* Post-its\n\nTeacher Materials:\n\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Laptops\n* Journals"
    },
    "day-1/lesson-4": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There **WILL NOT** be time later in the day to focus on lesson planning for these lessons so make sure **ALL** questions about the lesson have been answered.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* Notes from previous session\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Laptops\n* Journals\n* Chart Paper\n* Post-its\n"
    },
    "day-1/lesson-5": {
        "cs_content": "Score sample student work. After scoring look at the college board commentary and discuss how the rubric is being applied to student work.",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* 3 [Score Sharing Charts](https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screen-Shot-2017-11-13-at-3.43.17-PM.png) on chart paper - 1 for each sample\r\n* Your local copy of the [r csp-q3-and-q4-2-day]\r\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\r\n* [r csp-q3-and-q4-2-day-1]\r\n* College Board Commentary on Sample Explore Tasks\r\n* [r cb-explore-pt-sample-c-88]\r\n* [r cb-explore-pt-sample-d-58]\r\n* [r cb-explore-pt-sample-e-28]\r\n\r\nTeacher Materials:\r\n\r\n* 1 printed copy of the [Explore Task Rubric](https://apcentral.collegeboard.org/pdf/2018-explore-performance-tasks-sg.pdf?course=ap-computer-science-principles) for each teacher\r\n* [r cs-principles-course-exam-description-2017-2018]\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n\r\n"
    },
    "day-1/lesson-6": {
        "cs_content": "Time to dig deeper on two important and confusing components of the explore task: identifying a computing innovation and harmful effect.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day]\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n* Your local copy of the [r csp-q3-is-it-a-harmful-effect]\n* Your local copy of the [r csp-q3-is-it-a-good-computing-innovation]\n* Answer key for the two activities - [r csp-explore-prep-computing-innovation-brainstorm-activity]\n\nTeacher Materials:\n\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "day-1/lesson-7": {
        "cs_content": "Make a plan for preparing for and doing the explore PT with your students",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day]\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n\nTeacher Materials:\n\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "day-1/lesson-8": {
        "cs_content": "Answer any outstanding questions and wrap up the day.\r\n\r\nIn addition it should give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Grab and organize the question parking lot\r\n* Your local copy of the [r csp-q3-and-q4-2-day]\r\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\r\n* [r csp-q3-and-q4-2-day-1]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Computers"
    },
    "day-1/lesson-planning-exploring-the-materials": {
        "cs_content": "To provide an overview of the lesson teachers are going to deliver during their TLO session, and give them space to explore the lesson materials",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Participants sitting with their co-planners from their TLO rooms\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan packets\r\n* Computers\r\n"
    },
    "day-1/lunch": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-1/s": {
        "cs_content": "Close out conversations about Unit 4 and begin thinking about how it connects to the Explore PT.",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* [r cs-principles-course-exam-description-2017-2018]\r\n"
    },
    "day-2/21": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Journals\r\n"
    },
    "day-2/21-1": {
        "cs_content": "* ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-local-summer-workshop]\n* ADD STUFF\n\nTeacher Materials:\n\n* Journals"
    },
    "day-2/22": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/22-1": {
        "cs_content": "* ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Participants sitting in groups with others who are using the same implementation (AP or non-AP). People who are doing both should sit with AP\r\n\r\nFacilitator Supplies:\r\n\r\n* [r csp-local-summer-workshop]\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Teal Books\r\n* Computers/Code Studio\r\n* CED\r\n* Journal"
    },
    "day-2/23": {
        "cs_content": "To better understand AP elements of the course, and to see connections between AP and writing requirements",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Participants will be in the room based on their background with AP and CSP implementation plan \r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* CED\r\n* [r csp-teal-book]\r\n* Journal\r\n* Laptop/Code Studio\r\n"
    },
    "day-2/23-1": {
        "cs_content": "* ADD STUFF!",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson Packets\r\n* Computers"
    },
    "day-2/24": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/24-1": {
        "cs_content": "* ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/25": {
        "cs_content": "To develop a plan for delivering TLO lessons",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Laptops\r\n* Lesson packets\r\n"
    },
    "day-2/25-1": {
        "cs_content": "* ADD STUFF!",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* Binary slides\n* [r csp-local-summer-workshop]\n* [Intro to Binary](https://www.youtube.com/watch?v=91HLBUjCHbs)\n\nTeacher Materials:\n\n* Flippy do (one per person)"
    },
    "day-2/26": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/26-1": {
        "cs_content": "* ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/27": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan\r\n* Activity packet\r\n"
    },
    "day-2/27-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson Packets\r\n* Notes from the day"
    },
    "day-2/28": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/28-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Teaching practice table tents on tables\r\n* Gots and Needs charts around the room\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Computers"
    },
    "day-2/bio-break": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/break": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/break-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/break-2": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/lesson-10": {
        "cs_content": "Introduce teachers to Unit 5.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "day-2/lesson-11": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the activity in lessons that are coming up.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* One sheet of chart paper per lesson demo’d, hung around the room \n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r cs-discoveries-facilitation-guide]\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\n* Chart Paper\n* Post-its\n\nTeacher Materials:\n\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Laptops\n* Journals"
    },
    "day-2/lesson-12": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There WILL NOT be time later in the day to focus on lesson planning for these lessons so make sure ALL questions about the lesson have been answered.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day]\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* Notes from previous session\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Laptops\n* Journals\n* Chart Paper\n* Post-its"
    },
    "day-2/lesson-13": {
        "cs_content": "Close out conversations about Unit 5 and begin thinking about how it connects to the Create PT.",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* [r cs-principles-course-exam-description-2017-2018]\r\n"
    },
    "day-2/lesson-14": {
        "cs_content": "Score sample student work. After scoring look at the College Board commentary and discuss how the rubric is being applied to student work.",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* 3 [Score Sharing Charts](https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screen-Shot-2017-11-13-at-3.43.17-PM.png) on chart paper - 1 for each sample  \r\n* Your local copy of the [r csp-q3-and-q4-2-day]\r\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\r\n* [r csp-q3-and-q4-2-day-1]\r\n* College Board Commentary on Sample Create Tasks\r\n* [r create-sample-c]\r\n* [r create-sample-d]\r\n* [r create-sample-j]\r\n\r\nTeacher Materials:\r\n\r\n* 1 printed copy of the [Create PT Rubric](https://apcentral.collegeboard.org/pdf/2018-create-performance-tasks-sg.pdf?course=ap-computer-science-principles) for each teacher\r\n* [r cs-principles-course-exam-description-2017-2018]\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Create Examples - links found in the notes document\r\n"
    },
    "day-2/lesson-15": {
        "cs_content": "Time to dig deeper into two important and tough components of the Create Task: deciding on a project and identifying an algorithm.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day]\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n* [r create-pt-survival-guide-KEY]\n\n\nTeacher Materials:\n\n* [r create-pt-survival-guide]\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "day-2/lesson-16": {
        "cs_content": "Make a plan for preparing for and doing the explore PT with your students",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day]\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n\n\nTeacher Materials:\n\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)"
    },
    "day-2/lesson-9": {
        "cs_content": "Kick off the day by reviewing gots and needs from the day before. Introduce the themes of the day.",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r csp-q3-and-q4-2-day]\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n* Gots and Needs from previous day\n\nTeacher Materials:\n\n* None"
    },
    "day-2/lunch": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-2/prev-on": {
        "cs_content": "Introduce the binary number system in sufficient detail that people can do the TLO activities. ",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* [Intro to binary video](https://www.youtube.com/watch?v=91HLBUjCHbs)\r\n\r\nTeacher Materials:\r\n\r\n* Binary slides (in master deck)\r\n* Flippy do (one per person)\r\n"
    },
    "day-2/s": {
        "cs_content": "Answer any outstanding questions and wrap up the day.\r\n\r\nIn addition it should give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Wrap up the 2 day workshop.",
        "overview": "Wrap up the 2 day workshop.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Grab and organize the question parking lot\n* Your local copy of the [r csp-q3-and-q4-2-day]\n* Your local copy of the [r csp-q3-and-q4-2-day-1-2]\n* [r csp-q3-and-q4-2-day-1]\n* For closing the workshop: [r workshop-dashboard]\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Computers"
    },
    "day-2/tlo-2": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan \r\n* Activity packet\r\n* Laptops\r\n"
    },
    "day-2/tues": {
        "cs_content": "To think about how to scaffold AP prep over time",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson packets\r\n* Notes from the day\r\n"
    },
    "day-2/wrapup": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Gots and Needs charts around the room\r\n\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n"
    },
    "day-3/31": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/31-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Journals\n"
    },
    "day-3/32": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/32-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Homework from the night before (program and written description)\n"
    },
    "day-3/33": {
        "cs_content": "Bring all teachers from a region together so they can share ideas about meeting the needs of their communities",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Participants will be in the room based on their region. All CSP and CSD teachers from the region will be there. Ask that they sit in MIXED GROUPS\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Journal\n* Laptops\n* [r csp-teal-book]"
    },
    "day-3/33-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* [r csp-local-summer-workshop]\r\n\r\nTeacher Materials:\r\n\r\n* Course and exam descriptions\r\n* Pen\r\n* Computers\r\n\r\n"
    },
    "day-3/34": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/34-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/35": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan \r\n* Activity packet\r\n* Laptops\r\n"
    },
    "day-3/35-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/36": {
        "cs_content": "To explore code studio, and practice making your own section",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]\n* Laptop\n* Scavenger hunt handout\n"
    },
    "day-3/36-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/37": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/37-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-local-summer-workshop]\n\nTeacher Materials:\n\n* [r csp-teal-book]\n"
    },
    "day-3/38": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan\r\n* Activity packet\r\n* Laptops\r\n"
    },
    "day-3/38-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Lesson plans or code studio to look at sample reflection questions \n"
    },
    "day-3/39": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/bio-break": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/break": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/break-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/day-3": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Gots and Needs charts around the room\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n"
    },
    "day-3/lunch": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-3/test-pls-dont-break-lol-day-3-wrapup": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Gots and Needs charts around the room\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Computers"
    },
    "day-3/tlo-5": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan\r\n* Activity packet\r\n* Laptop\r\n"
    },
    "day-3/unit-1-wrap-up": {
        "cs_content": "To wrap up on unit 1 (highlight was wasn’t covered during teachercon, nod to assessments and PTs) and give space to reflect and debrief on the day",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-teachercon-slides-2017]\n\nTeacher Materials:\n\n* [r csp-teal-book]\n* Lesson planning packet\n"
    },
    "day-4/41": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/42": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/43": {
        "cs_content": "Develop an actionable plan for recruiting diverse students and support students with diverse learning needs ",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Participants will be in the room based on their region (same group as the day before). All CSP and CSD teachers from the region will be there. Ask that they sit in HOMOGENEOUS GROUPS\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]\n* Journals\n* Laptops\n"
    },
    "day-4/43-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/44": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/44-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Journals\r\n* Laptops\r\n* General session packet\r\n"
    },
    "day-4/45": {
        "cs_content": "To provide context for unit 2 before starting unit 2 TLO lessons",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]\n"
    },
    "day-4/45-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/46": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan \r\n* Activity packet\r\n"
    },
    "day-4/46-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]\n"
    },
    "day-4/47": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/47-1": {
        "cs_content": "ADD STUFF",
        "description": "4.7",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/48": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan\r\n* Activity packet\r\n"
    },
    "day-4/48-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/break": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/break-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/break-2": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/classroom-practice-7-unit-2-lesson-3": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/classroom-practice-8-unit-2-lesson-10": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/d4-wu": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/daily-debrief-equity-in-the-course": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/day-4-wrap-up": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-4/tlo-8": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* Lesson plan\r\n* Activity packet\r\n"
    },
    "day-4/unit-2-wrap": {
        "cs_content": "To wrap up on unit 1 (highlight was wasn’t covered during teachercon, nod to assessments and PTs) and give space to reflect and debrief on the day",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]\n\n"
    },
    "day-4/unit-2-wrap-up": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-local-summer-workshop]\n\nTeacher Materials:\n\n* [r csp-teal-book]\n"
    },
    "day-5/51": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-5/51-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* [r csp-local-summer-workshop]\n\nTeacher Materials:\n\n* ADD STUFF\n"
    },
    "day-5/52": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-5/52-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Sitting in homogeneous groups \n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Computers\n* [r csp-teal-book]\n"
    },
    "day-5/53": {
        "cs_content": "Build a plan for assessment that meets the needs established by your school while building towards the performance tasks ",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* Participants will be in the room based on how assessment and grading works in their school. \n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* Computers\n* [r csp-teal-book]\n"
    },
    "day-5/53-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-5/54": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-5/54-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* 4 people per table\r\n* 1 deck of cards per person (given out the night before) \r\n\r\nFacilitator Supplies:\r\n\r\n* Handouts:\r\n* Answer key - (For facilitators **only**. Pages 1-3 from [here](https://docs.google.com/document/d/1FlyC0DVAWhd44Ee6uK0ZzA5eP_mPv2cGeTYlI-dqwJE/edit))\r\n\r\nTeacher Materials:\r\n\r\n* One deck of cards (given out the night before for homework) \r\n* Handouts:\r\n    * Human Machine Language Reference + Examples (in lesson activity packet) \r\n    * Cut Human Machine Language strips \r\n"
    },
    "day-5/55": {
        "cs_content": "Teaching Programming to Everyone. Demonstrate our approach to teaching programming in the curriculum.",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* 4 people per table\r\n* 1 deck of cards per person (given out the night before) \r\n\r\nFacilitator Supplies:\r\n\r\n* [Answer key](https://docs.google.com/document/d/1FlyC0DVAWhd44Ee6uK0ZzA5eP_mPv2cGeTYlI-dqwJE/edit) (For facilitators **only**)\r\n\r\nTeacher Materials:\r\n\r\n* Human Machine Language Reference + Examples (in lesson activity packet)\r\n* Cut Human Machine Language strips \r\n\r\n"
    },
    "day-5/55-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-5/56": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* ADD STUFF\r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-5/56-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]\n* Journal\n* Laptops\n"
    },
    "day-5/57": {
        "cs_content": "Help teachers make a plan for 1) getting to the school year (map out what else they need to review or do; and 2) pacing once the school year has started (when they’re planning to land units, etc)\r\n",
        "description": "Room Setup:",
        "prep": "Room Setup:\n\n* ADD STUFF\n\nFacilitator Supplies:\n\n* ADD STUFF\n\nTeacher Materials:\n\n* [r csp-teal-book]\n* Journal\n* Laptops\n"
    },
    "day-5/57-1": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Sitting with teaching group\r\n\r\nFacilitator Supplies:\r\n\r\n* [r csp-local-summer-workshop]\r\n* Certificates of completion \r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "day-5/58": {
        "description": "Break"
    },
    "day-5/closing-ceremonies": {
        "cs_content": "ADD STUFF",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Sitting with TLO rooms (room table tents on tables) \r\n\r\nFacilitator Supplies:\r\n\r\n* ADD STUFF\r\n\r\nTeacher Materials:\r\n\r\n* ADD STUFF\r\n"
    },
    "dead-3rd-party-lessons/cs4fn": {
        "description": "This lesson plan is outside of Code Studio and uses CS4FN. View the Lesson Plan here",
        "overview": "This lesson plan is outside of Code Studio and uses CS4FN. View the Lesson Plan [here](https://teachinglondoncomputing.files.wordpress.com/2014/02/activity-create-a-face.pdf)"
    },
    "dead-3rd-party-lessons/kodable-fuzzfamily-fiesta": {
        "description": "This lesson plan is outside of Code Studio and uses Kodable. Sign up for Kodable and view the unplugged lesson plan on conditionals here",
        "overview": "This lesson plan is outside of Code Studio and uses Kodable. Sign up for Kodable and view the unplugged lesson plan on conditionals [here](https://dashboard.kodable.com/#/curriculum/2/4)",
        "prep": " - Make sure to add Kodable.com to the list \"whitelisted\" websites in your district.\r\n - Watch the [Kodable video](https://www.youtube.com/watch?v=d59m7rtS0EI)"
    },
    "dead-3rd-party-lessons/more-programming-with-scratch": {
        "description": "If your students are looking for more programming -- try Scratch!",
        "overview": "If your students are looking for more programming -- [try Scratch](https://scratch.mit.edu/projects/editor/?tip_bar=home)!"
    },
    "dead-3rd-party-lessons/run-marco": {
        "description": "This lesson plan is outside of Code Studio and uses Run Marco. Sign up for Run Marco here",
        "overview": "This lesson plan is outside of Code Studio and uses Run Marco. Sign up for Run Marco [here](https://www.allcancode.com/runmarco)"
    },
    "dead-3rd-party-lessons/the-foos": {
        "description": "This lesson plan is outside of Code Studio and uses The Foos. Sign up for The Foos and follow along with this programming challenge",
        "overview": "This lesson plan is outside of Code Studio and uses [The Foos](http://thefoos.com/). Sign up for The Foos and follow along with [this programming challenge](https://www.youtube.com/watch?v=YAvkRJdIFgs&list=PLr1MW6uOOeUCvqwqFas4LbrzHNZFhJGBD&feature=share)"
    },
    "encoding-and-compressing-complex-information/bytes-and-file-sizes": {
        "cs_content": "The simple purposes of this lesson are:\r\n\r\n1. Get terminology out in the open\r\n2. Become somewhat conversant with file types and sizes\r\n3. Grapple with orders-of-magnitude differences between things.\r\n\r\nThe 8-bit byte has become the de-facto fundamental unit with which we measure the “size” of data on computers, and in fact, today most computers only let you save data as combinations of whole bytes; even if you only want to store 1 bit of information, you have to use a whole byte to do it. And many computer systems will require you store even more than that.  Messages sent over the Internet are also typically structured as messages with byte-offsets.\r\n\r\nParalleling the explosion of computing power and speed, the sheer size of the digital data now created and consumed every day is staggering. Units of measure (terabytes) that previously seemed unfathomably large are now making their way into personal computing. This rapid growth of digital data presents many new opportunities and also poses new challenges to engineers and programmers.  The implications of so-called **Big Data** will not be investigated until later in the course, but it's good and interesting to be thinking about the size of things now.\r\n",
        "description": "Students are introduced to the standard units for measuring the sizes of digital files: bytes, kilobytes, megabytes, gigabytes, etc. and research the sizes of files they make use of every day.",
        "overview": "In this lesson students are introduced to the standard units for measuring the sizes of digital files, from a single byte, all the way up to terabytes and beyond. Students begin the lesson by comparing the size of a plain text file containing “hello” to a Word document with the same contents. Students are introduced to the units kilobyte, megabyte, gigabyte, and terabyte, and research the sizes of files they make use of every day, using the appropriate terminology. This lesson foreshadows an investigation of compression as a means for combatting the rapid growth of digital data.\r\n",
        "prep": "\r\n* You should verify that you know how to look at the sizes of files on computers that your students are using (see activity).\r\n* For the getting started activity might want a Word processing program (such as MS Word) and plain text editor (such as Notepad or TextEdit) open and ready.\r\n* The teaching remarks and content corners in this lesson contain lots of little bits of history that you might choose to share at various points in the lesson."
    },
    "encoding-and-compressing-complex-information/encode-an-experience": {
        "cs_content": "In terms of Big Ideas in AP CSP this lesson is very much about Abstraction.  Abstraction is the practice of temporarily ignoring details to focus only on the most significant or relevant portions of a problem. In the instance of binary information, we know that it's just a sequence of bits underlying even seemingly complex data structures, but we don't have to worry about that all the time.  The ability to rely on high-level encodings and temporarily ignore lower-level details is the key to building the complex systems that we use and interact with every day.\r\n\r\nThe main purposes of this lesson are to:\r\n\r\n* Put a bow on thinking about the digital (binary) representation of information.\r\n* Practice creating an abstraction of their own design\r\n* Practice writing in response to an open prompt\r\n* Submit a written project\r\n\r\nThe course focuses so much on the digital representation of information because it is probably the most fundamental law of computing. So much of computer science is abstract, but it is all grounded in the laws and limitations of having to represent *everything* in binary.  Internalizing this fact, and internalizing the levels of abstraction that result, we believe is central to what makes a person \"good with computers\" or \"natural\" with them.  Similarly, being able to take a high-level, human idea and break it down into something that *could be* computed on is the fundamental essence of what it means to do computing work.\r\n\r\nCertainly, it helps a person explain and grapple with abstract computing ideas later on this course.  For example, when programming you have to manage complexity in code by breaking things down into smaller procedures and routines.  You have to make many choices about how to represent and store the information your program needs.  The person who implicitly understands the difference between choosing to use the number 5 instead of the character \"5\" is more likely to make the right choice. \r\n\r\nIt's useful to practice the mechanics of producing a project like this on a tight timeline, especially one that includes both design and written elements. It's up to you how much you want to mimic the AP Performance Task process, but this relatively small-scoped project would be a very useful barometer for you and your students to see what it takes to take a project from initial understanding to actual submission of an artifact.  \r\n",
        "description": "Students break down an ambiguous type of information such as personal experience (attending a party, playing a game, etc) and invent a way to encode its sub-parts. The project includes a written reflection questions similar to those students will see on the AP Performance Tasks. ",
        "overview": "In this 2-day lesson, students will design their own way to encode a personal experience (such as attending a party, playing a game, etc). The project begins with students doing some top-down design to figure out the components and subcomponents of an experience that are encodable as binary information. Students then select a portion of the experience to flesh out into a more detailed design.  The project includes a written reflection questions similar to those students will see on the AP Performance Tasks. While students will complete this project individually, they will exchange feedback with a classmate at one point of the project.\n\n**Note:** This is NOT the official AP® Performance Task that will be submitted as part of the Advanced Placement exam; it is a practice activity intended to prepare students for some portions of their individual performance at a later time.",
        "prep": "\r\n* Determine how you want to collect the project - digitally or on paper - and prepare to explain that to students\r\n* Determine what (if anything) you want to print for distribution to students\r\n* Review the \"birthday party\" example from the activity guide"
    },
    "encoding-and-compressing-complex-information/encoding-bw-images": {
        "cs_content": "The main purpose of this lesson is for students to exhibit some creativity while getting some hands-on experience manipulating binary data that represents something other than plain numbers or text.  Connections to abstraction in data can be made here. Connections can be made back to file sizes and file formats here as well - e.g. how many bytes does it take to store an image v. text?   If you want to broach the subject, the concept of data compression can come in here too - it is interesting to think about how a black and white image might be compressed. You should be aware that this lesson largely acts a stepping stone to the *next lesson* which addresses how RGB colors are represented in binary.\n\nImage file types have some similarities to data packets we saw in the Internet unit -- because images must include metadata, or data about the data. The data of a black-and-white image is the list of bits that represent whether each pixel is on or off. To create the image, however, we must also know how wide and tall the image is in order to recreate it accurately. This necessitates the creation of a file format which clearly defines how this metadata will be encoded, since it is crucial for interpreting the subsequent data of the image.  It is similar to how an internet packet doesn't only contain the data you need to send, but must also include metadata like the to and from addresses and packet number.\n\nDigital images can be stored in many formats, but one of the most common formats is \"raster\". Raster images store the image as an array of individual pixels, each of which has a particular color. Higher-quality images can be obtained by decreasing the size of the pixels (resolution). While full color will be addressed in the next lesson, an important idea here is that images on computer screens are created with *light* by illuminating pixels on the screen.  This is why it is typical in a black and white image for the value 1 to represent white - it means turn the light on - and 0 represents black - light off.  If you were drawing on paper you might do the inverse.\n\n\n",
        "description": "Students explore methods for encoding digital images in binary which requires representing metadata such as width and height as well as pixel data. Students use the the Pixelation widget to encode simple B&W raster images.\n",
        "overview": "In this lesson, students will begin to explore the way digital images are encoded in binary. The class begins by asking students to invent their own image encoding protocol in order to familiarize themselves with some of the subtle complications of encoding images, namely the need for other data, called [v metadata], that describes properties of the image necessary for rendering it. Students will learn about pixels, raster images, and what an image file format is.  Students will encode binary image data using a widget in Code Studio.\r\n",
        "prep": "\r\n* (Optional) Graph or grid paper for drawing pixel images by hand\r\n"
    },
    "encoding-and-compressing-complex-information/encoding-color-images": {
        "cs_content": "The main purpose here, similar to the B&W pixelation activity is for students to get hands-on and \"down and dirty\" with bits.  A major outcome will also be understanding the relationship between [v hexadecimal] (base-16) and binary (base-2), and how useful it is to use hex to represent groups of 4 bits.  It's important to realize that using hex is not a form of data compression, it's simply a different view into the bits.\n\nThe most common color representation scheme - RGB - typically uses 24 bits (3 bytes) with 8 bits each for Red, Green and Blue intensities.  And one of the most common ways you see these colors represented is in hexadecimal.  The pixelation widget, with its ability to choose how many bits represent the color value for each pixel, can be a very useful tool for showing the utility of hex representations for bits.  \n\nThe process of rendering color on a computer screen by mixing red, green and blue light is an important concept of this lesson.  The results are not always intuitive, because mixing pigment and mixing colored lights (like what’s on a computer screen) lead to different results. \n\nAnother important objective of this lesson is to understand how (uncompressed) image file sizes can become quite large. For example, even a relatively small image of 250x250 pixels is a total of 62,500 pixels, each requiring up to three bytes (24 bits) or color information, resulting in a total of 1.5 million bits to store one image!  Thus, interesting connections to compression *can* be made here, but note that [v lossy compression] and image formats like .jpg are covered in the next lesson. \n\n",
        "description": "Students learn about the RGB color encoding scheme and use an updated version of the pixelation widget to encode color images. Hexadecimal notation is useful for representing larger groupings of binary digits.",
        "overview": "In this lesson students are asked to consider how color is represented on a computer and to imagine how it might be encoded in binary.  Students then learn about how color is actually represented on a computer - using the RGB color scheme - and create their own images in an new version of the pixelation widget that allows you use more than 1 bit per pixel to represent color information.  After grappling with the prospect of possibly many bits just to represent a single pixel, students are shown how using hexadecimal allows us to represent many bits with fewer characters.  Students use a new version of the pixelation tool to encode an image with color and create a personal favicon.\r\n",
        "prep": "\r\n* (Optional) Consider demonstrating the color pixelation widget instead of showing the video."
    },
    "encoding-and-compressing-complex-information/lossy-compression-and-file-formats": {
        "cs_content": "The main purpose of this lesson is straightforward: understand what lossy compression is and when/why it might be used.  It's mostly used in visual or audio formats where a loss in precision is undetectable to human eyes and ears.  Beyond that we, want to continue to build students' skills and comfort with rapidly doing research online, reporting back, and verifying that the information they got was good.  This is good life skill but will also serve students well for the Explore Performance task.  The hope with this lesson is that students will have greater insight into these technical articles that they know a bit about the binary make up of things -- many of the image file format articles actually show the binary file format and what bits mean what. \r\n\r\nIn particular, students might discover, or you might point out that the BMP image format is basically the image encoding format used in a previous lesson, and that the GIF image format and ZIP compression scheme are versions of the text compression scheme we used as well.  In the case of GIF, it uses a dictionary of up to 255 different colors and each pixel is stored as small number that refers to the dictionary.",
        "description": "Students research real compression schemes used for images, text, or sound and determine what kind of compression it uses - lossy or lossless - explaining the theory behind it.",
        "overview": "Students learn the difference between lossy and lossless compression. They then complete a Rapid Research activity in which they research the features of a real image, text, or sound encoding file format. Afterwards they share their research in groups. A number of share out strategies are provided at the end of the lesson for students to share and present their findings in an engaging way.",
        "prep": "\r\n* Copies of File Formats Rapid Research worksheet for students\r\n"
    },
    "encoding-and-compressing-complex-information/text-compression": {
        "cs_content": "This is a big lesson that covers a lot of bases.  It should easily take 2 or more days of class.  First and foremost it covers two or three topics directly from the CSP framework.\r\n\r\n**1. [v lossless compression]**\r\n\r\nThe basic principle behind compression is to develop a method or protocol for using fewer bits to represent the original information. The way we represent compressed data in this lesson, with a “dictionary” of repeated patterns is similar to the [LZW compression scheme](http://en.wikipedia.org/wiki/Lempel%E2%80%93Ziv%E2%80%93Welch), but it should be noted that LZW is slightly different from what students do in this lesson.  Students invent their own way here.  LZW is used not only for text (zip files), but also with the GIF image file format.\r\n\r\n**2. [v heuristic]s** \r\n\r\nThe lesson touches on computationally hard problems and heuristics but please note that **computationally hard problems and heuristics will be revisited later on**.  A general \"hand-wavy\" understanding is all that's needed from this lesson.  \r\n\r\nWe do want students to see, however, that there is no single correct way to compress text using the method we use in this lesson because a) there is no known algorithm for finding an optimal solution, and b) we don’t even know a way to verify whether a given solution is optimal. There is no way to prove it or derive it beyond trying all possibilities by brute force.  **This is an example of an algorithm that cannot run in a “reasonable amount of time”** - one of the CSP learning objectives.\r\n\r\n**3. Foreshadowing programming behaviors**\r\n\r\nLastly, the Text Compression Activity is an **important lesson to refer back to when students start programming.**   The activity engages students in thinking and problem solving behaviors that foreshadow skills that are particularly useful for programming later down the line.  In particular, when students recognize patterns that repeat, and then represent those patterns as abstract symbols, and then further recognize patterns within those patterns, it is very similar to the kinds of abstractions we develop when writing **functions and procedures when programming**.   Decoding the message in the warm-up activity is very similar to tracing a sequence of function calls in a program.\r\n\r\n\r\n\r\n\r\n",
        "description": "At some point we reach a physical limit of how fast we can send bits and if we want to send a large amount of information faster, we have to find a way to represent the same information with fewer bits - we must compress the data.  ",
        "overview": "At some point we reach a physical limit of how fast we can send bits and if we want to send a large amount of information faster, we have to find a way to represent the same information with fewer bits - we must **compress** the data.  \r\n\r\nIn this lesson, students will use the Text Compression Widget to compress segments of English text by looking for patterns and substituting symbols for larger patterns of text.  After some experimentation students are asked to come up with a process (or algorithm) for arriving at a \"good\" amount of compression despite the fact that there is no way to know what is best or optimal.  In developing a so-called \"[v heuristic] approach\" to this problem, students will grapple with the tradeoffs in compressing data and begin to develop a sense of computing problems that are “hard” to solve.\r\n",
        "prep": "\r\n* Test out the Text Compression Widget\r\n* Review the teaching tips to decide which options you want to use\r\n"
    },
    "event-driven-programming/building-an-app-color-sleuth": {
        "cs_content": "The purpose here is for students to see how \"experts\" would approach writing an app from scratch when all you have to start out with is a sketch on paper of some idea.  Research has shown that what novices often need is an expert walk-through to explain the rationale behind certain decisions and to see the kinds of problems they anticipate and solve. There are a few key things that happen in this lesson that we hope students see and take to heart:\r\n\r\n* There is no one \"correct\" way to approach writing a program\r\n* You don't write programs \"in order\" from top to bottom - you write in pieces and organize the code into sections and functions.\r\n* Start with a small problem to solve - solve it and move to the next one\r\n* Use a buddy or \"thought partner\" to talk things through\r\n* Sketch out pseudocode on paper to get your thoughts straight\r\n* If you get stuck, there is always something small you can do to make progress \r\n\r\nAfter this lesson students are prepared to complete the AP Create PT. If you have more time in your year you may continue through Unit 5 Chapter 2 before beginning the task. When you decide to begin the task use the materials in the AP Create PT Prep unit to further prepare students. For more details refer to pages 32 and 33 of the [r csp-teal-book].",
        "description": "Students follow an imaginary conversation between two characters, Alexis and Michael, as they solve problems and make design decisions in the multiple steps required to construct the \"Color Sleuth\" App. Students must implement elements of the code along the way.",
        "overview": "This lesson attempts to walk students through the iterative development process of building an app (basically) from scratch that involves the use of `if` statements.  Following an imaginary conversation between two characters - Alexis and Michael - students follow the problem solving and program design decisions they make for each step of constructing the app.  Along the way they decide when and how to break things down into functions, and of course discuss the logic necessary to make a simple game.\n\nThe last step - writing code that executes an end-of-game condition - students must do on their own.  How they decide to use `if` statements to end the game will require some creativity.  The suggested condition - first to score 10 points - is subtly tricky and can be written many different ways.\n\nAt the conclusion of the lesson there are three practice Create PT-style questions as well as resources explaining the connection between this lesson and the actual Create PT. Depending on how you use these materials they can easily add an additional day to this lesson. "
    },
    "event-driven-programming/if-statements-unplugged": {
        "cs_content": "The activities here get right to many commons misonceptions about how if-statments work and how programs execute. Students may have a simple common-sense intuition about how if-statements work, but there are several ways you can get your wires crossed when considering how programs actually execute.  There are two main issues: 1) how the flow of program execution works, and 2) How complex logical statements are composed and evaluated.  In this lesson we just address program flow and tracing execution.  We'll look at more complex logical expressions later.  Even though [v Boolean] expressions show up in this lesson, we try to avoid using that term until the next lesson.  For this lesson it's a condition that is simply true or false.",
        "description": "Students trace simple robot programs on paper to develop a sense of how to read and reason about code with if statements in it. The code is the same pseudocode used on the AP exam.",
        "overview": "We take a whole lesson to learn about `if` statements, what they are, the terminology around them, and what they have to do with \"selection\" in programs.  Students trace simple robot programs on paper to develop a sense of how to read and reason about code with `if` statements in it.  Students also try their hand at writing code by hand to handle a robot situation.",
        "prep": "* Decide whether or not to print the \"Will it Crash?\" Activity Guide for students (it's ~6 pages, but nice to have on paper. There are digital alternatives, though)\r\n* Decide how students will review the first two code studio pages - see teaching tips.\r\n* Budget time: the main activity is working through the problems in the \"will it crash?\" activity - keep in mind that the last problem ask students to write code which may take time as well."
    },
    "express-course/graph-paper-programming": {
        "cs_content": "The goal of this activity is to build critical thinking skills and excitement for the course.\r\n\r\nBy introducing basic concepts like _programming_ and _algorithms_ to the class in an unplugged activity, students who are intimidated by computers can still build a foundation of understanding on these topics. Programming and algorithms are essential to computer science. In this lesson, students will learn how to translate instructions into a program and recognize an algorithm. ",
        "description": "In this lesson, you will program your friend to draw pictures!",
        "overview": "By \"programming\" one another to draw pictures, students will begin to understand what coding is really about. The class will begin by having students instruct each other to color squares on graph paper in an effort to reproduce an existing picture. If there’s time, the lesson can conclude with images that the students create themselves.",
        "prep": "- Watch the [r teacher-video-graph-paper-2].\r\n- Watch the [r lesson-in-action-graph-paper].\r\n- Print out one [r csf-graph-paper-programming-worksheet] for each group.\r\n- Print one [r csf-graph-paper-programming-assessment] for each student.\r\n- Supply each group with several drawing grids, paper, and pens/pencils.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "express-course/introduction-course-warm-up": {
        "cs_content": "We recognize that every classroom has a spectrum of understanding for every subject. Some students in your class may be computer wizards, while others haven't had much experience at all. In order to create an equal playing (and learning) field, we have developed this \"Ramp-Up Stage\" for Course E. This can be used as either an introduction or a review to the Code.org interface and basic computer science concepts. This stage, along with the three that follow, cover all prerequisites needed to start Course E.",
        "description": "Lessons 1-9 are considered ramp-up lessons.  If you feel that the first few activities are too simple for your class, feel free to pick and choose your favorites or skip to lesson #10.",
        "overview": "In this progression, students will begin with an introduction (or review depending on the experience of your class) of Code.org's online workspace. Students will learn the basic functionality of the interface including the `Run`, `Reset`, and `Step` buttons. Dragging, deleting, and connecting Blockly blocks is also introduced in the beginning video. In the puzzles, students will practice their sequencing and debugging skills in Maze and Artist.",
        "prep": " - Play through puzzles on [r csf-express-course] to find any potential problem areas for your class.\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "express-course/loops-in-artist": {
        "cs_content": "This series highlights the power of loops with creative and personal designs.  \r\n\r\nOffered as a project-backed sequence, this progression will allow students to build on top of their own work and create amazing artifacts.",
        "description": "These online puzzles will get you to draw some amazing designs using loops!",
        "overview": "Watch student faces light up as they make their own gorgeous designs using a small number of blocks and digital stickers! This lesson builds on the understanding of loops from previous lessons and gives students a chance to be truly creative.  This activity is fantastic for producing artifacts for portfolios or parent/teacher conferences.",
        "prep": " - Play through the [r csf-express-course] corresponding to this course to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express-course/loops-my-robotic-friends": {
        "cs_content": "This lesson serves as an introduction to loops. _Loops_ allow for students to simplify their code by grouping commands that need to be repeated. Students will develop critical thinking skills by noticing repetition in the movements of classmates and determining how many times their code needs to be looped.",
        "description": "In this activity you will \"program\" your friends using loops to stack cups to make cool towers!",
        "overview": "This lesson builds on the [\"My Robotic Friends\" lesson](https://curriculum.code.org/csf/coursef/1/). Here, students learn the simplicity and utility of loops by “programming” their friends using the language from \"My Robotic Friends.\" Once loops are introduced, students will find that they can build bigger structures faster.",
        "prep": " - Watch the [r my-loopy-rf-teacher-vid].\n - Print one [r my-robotic-friends-loops-packet] for each group.\n - Acquire up to 20 paper cups for each group.\n - Make sure each student has a [r think-spot-journal]."
    },
    "express/build-your-project": {
        "cs_content": "This lesson provides students with ample time to build and revise their projects. The trial and error inevitably involved in this lesson will teach problem solving and persistence.",
        "description": "Finally you can start building your project!",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. Now the students will be given their own space to create their project with either Artist or Play Lab. This will be the longest portion of the project. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/express/31/)."
    },
    "express/building-a-foundation": {
        "cs_content": "This lesson teaches that failure is not the end of a journey, but a hint for how to succeed. The majority of students will feel frustrated at some point in this lesson, but it's important to emphasize that failure and frustration are common steps to creativity and success.",
        "overview": "New and unsolved problems are often pretty hard. If we want to have any chance of making something creative, useful, and clever, then we need to be willing to attack hard problems even if it means failing a few times before we succeed. In this lesson, students will be building a structure with common materials. The structure will be tested on its ability to hold a textbook for more than ten seconds. Most students will not get this right the first time, but it's important they push through and keep trying.",
        "prep": "-  Watch the [r teacher-video-building-foundation].\r\n-  Watch the [r lesson-in-action-foundation].\r\n-  Print [r csf-building-a-foundation-activity].\r\n-  Gather enough building elements (marshmallows or gumdrops with toothpicks or popsicle sticks) for each group. You don't have to give any certain amount; just make sure you put some limit on materials.\r\n-  Give a [r think-spot-journal] to each student."
    },
    "express/conditionals-conditionals-with-cards": {
        "cs_content": "One of the best parts of teaching _conditionals_ is that students already understand the concept from their everyday lives. \r\n\r\nThis lesson merges computer science into the real world by building off of their ability to tell if a condition is true or false. Students will learn to use `if` statements to declare when a certain command should be run, as well as `if / else` statements to declare when a command should be run and what do run otherwise. Students may not recognize the word _conditionals_, but most students will understand the idea of using \"if\" to make sure that some action only occurs when it is supposed to.",
        "description": "It's time to play a game where you earn points only under certain conditions!",
        "overview": "This lesson demonstrates how conditionals can be used to tailor a program to specific information. We don’t always have all of the information we need when writing a program. Sometimes you will want to do something different in one situation than in another, even if you don't know what situation will be true when your code runs. That is where conditionals come in. Conditionals allow a computer to make a decision, based on the information that is true any time your code is run.",
        "prep": "- Watch the [r teacher-video-conditionals-cards-2].\r\n- Watch the [r lesson-in-action-conditional-cards].\r\n- Gather decks of cards or something similar.\r\n- One [r csf-conditionals-with-cards-sample-program] for the class to look at.\r\n- Print one [r csf-conditionals-with-cards-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "express/conditionals-in-minecraft": {
        "cs_content": "This set of puzzles will work to solidify and build on the knowledge of conditionals and loops. By pairing these two concepts together, students will be able to explore the potential for creating complex and innovative programs in a new and exciting environment.",
        "description": "Avoid the lava! Here you will learn about conditionals in the world of Minecraft.",
        "overview": "This lesson gives students a chance to learn and practice conditionals. It features characters and settings from Minecraft, and students will complete tasks such as mining and building structures using their programs.",
        "prep": " - Play through the [r csf-express-course] associated with this lesson to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/conditionals-loops-in-farmer": {
        "cs_content": "Practicing the use of conditionals in different scenarios helps to develop a student's understanding of what conditionals can do. In the previous lesson, students only used conditionals to move around a maze. In this lesson, students will use conditionals to help the farmer know when to harvest crops. New patterns will emerge and students will use creativity and logical thinking to determine the conditions where code should be run and repeated.",
        "description": "It's not always clear when to use each conditional.  This lesson will help you get practice deciding what to do.",
        "overview": "Students will practice `while` loops, `until` loops, and `if / else` statements. All of these blocks use conditionals. By practicing all three, students will learn to write complex and flexible code.",
        "prep": " - Play through [r csf-express-course] to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/conditionals-loops-in-maze": {
        "cs_content": "This set of puzzles will work to solidify and build on the knowledge of conditionals and loops. By pairing these concepts together, students will be able to explore the potential for creating complex and innovative programs.",
        "description": "You can do some amazing things when you use conditionals and loops together!",
        "overview": "In this lesson, students will be pairing together two key concepts: loops and conditionals. This set of puzzles bridges the gaps in understanding that occur when working on puzzles that use multiple kinds of blocks. By bringing two ideas together, students will create more complex code that shows both impressive creativity and critical thinking!",
        "prep": " - Play through [r csf-express-course] to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/debugging-in-scrat": {
        "cs_content": "Students in your class might become frustrated with this lesson because of the essence of debugging. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "overview": "Debugging is an essential element of learning to program. In this lesson, students will encounter puzzles that have been solved incorrectly. They will need to step through the existing code to identify errors, including incorrect loops, missing blocks, extra blocks, and blocks that are out of order.",
        "prep": " - Play through the [r csf-course-e] to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class. \r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal].\r\n - Review [r csf-debugging-handout] with the class."
    },
    "express/digital-citizenship-practicing-digital-citizenship": {
        "cs_content": "As students spend more time on computers, they should be aware that the internet is not always a safe space. In this lesson, students are taught what information is safe to share and what information should remain private. Students will create \"superheros\" and learn what it means to be a Digital Citizen on the internet.",
        "description": "Some information is not safe to share online. This lesson will help you learn the difference between safe and private information.",
        "overview": "In collaboration with Common Sense Education, this lesson helps students learn to think critically about the user information that some websites request or require. Students learn the difference between private information and personal information, distinguishing what is safe and unsafe to share online.\r\n\r\nStudents will also explore what it means to be responsible and respectful to their offline and online communities as a step toward learning how to be good digital citizens.",
        "prep": "- Watch the [r teacher-video-digital-citizenship].\r\n- Print out a good selection of male and female [r csf-cubecraft-superheroes] sheets for the whole class.\r\n- Print one [r csf-super-digital-citizen-assessment] for each student."
    },
    "express/digital-citizenship-screen-out-the-mean": {
        "cs_content": "Students may not ever have the misfortune of experiencing cyberbullying, but we want to make sure that the students are prepared for and knowledgeable about it, in case they ever witness it during an online situation. Students will learn how to identify cyberbullying and what steps they should take to make it stop. This may become helpful in later puzzles when students have the opportunity to share their work. If someone negatively responds to a student's work, this lesson will provide them with the tools that they need to handle the situation.",
        "description": "This lesson will teach you about mean things that happen online and how to respond to them.",
        "overview": "This lesson helps children to recognize that it is essential to tell a trusted adult if something online makes them feel angry, sad, or scared. \r\n\r\nStudents learn that other people can sometimes act like bullies when they are online. They will explore what cyberbullying means and what they can do when they encounter it. After reading a scenario about mean online behavior, students discuss what cyberbullying is, how it can make people feel, and how to respond. Finally, they use their knowledge to create a simple tip sheet on cyberbullying in their journal.\r\n",
        "prep": " - Review [r csf-screen-out-mean] from Common Sense Education's website.\r\n - Print out a worksheet from the link above (page 6) for each student.\r\n - Print out an assessment from the link at the top (page 7) for each student.\r\n - Make sure every student has a [r think-spot-journal].\r\n - Print or display the [r common-sense-stop-poster] for the class to see."
    },
    "express/events-in-bounce": {
        "cs_content": "Events are very common in computer programs, especially in video games.  \r\n\r\nIn this lesson, students will develop their understanding of events by making a sports-based game. Students will learn to make their paddle move according to arrow keys, and make noises when objects collide. At the very end, they will get to customize their game to make it more unique!",
        "description": "Ever wish you could play video games in school? In this lesson, you will get to make your own!",
        "overview": "In this online activity, students will learn what events are, and how computers use them in programs like video games. Students will work through puzzles making the program react to events (like arrow buttons being pressed.) At the end of the puzzle, students will have the opportunity to customize their game with different speeds and sounds.",
        "prep": " - Play through [r csf-express-course] to find any potential problem areas for your class.\n - Make sure every student has a [r think-spot-journal].\n - Review [r csf-lesson-recommend]."
    },
    "express/events-in-star-wars": {
        "cs_content": "CS Fundamentals is not simply about teaching computer science, it is about making computer science fun and exciting. In this series, students will learn about events using popular characters from Star Wars. These puzzles blur the lines between \"learning\" and \"fun\". Also, students will learn to recognize regular programming practices in games so that when they play games at home, they can see common computer science principles being used.",
        "description": "This lesson will guide you through creating a Star Wars video game.",
        "overview": "In this lesson, students will practice using events to build a game that they can share online. Featuring R2-D2 and other Star Wars characters, students will be guided through events, then given space to create their own game.",
        "prep": " - Play through puzzles in [r csf-express-course] and find any potential problem areas.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/events-the-big-event": {
        "cs_content": "Today, students will learn to distinguish events and actions. The students will see activities interrupted by having a \"button\" pressed on a paper remote. When seeing this _event_, the class will react with a unique action. Events are widely used in programming and should be easily recognizable after this lesson.",
        "description": "This lesson will teach you about events, which are necessary for the video games you play!",
        "overview": "Students will soon learn that events are a great way to add flexibility to a pre-written algorithm. Sometimes you want your program to be able to respond to the user exactly when the user wants it to. Events can make your program more interesting and interactive.",
        "prep": "- Watch the [r teacher-video-big-event-2].\r\n- Print one [r csf-the-big-event-activity-worksheet] and Event Controller.\r\n- Print one [r csf-the-big-event-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "express/events-with-flappy": {
        "cs_content": "Events are very common in computer programs. In this lesson, students will further develop their understanding of events by making a Flappy Bird game. Students will learn to make their character move across the screen, make noises, and react to obstacles based on user-initiated events.",
        "description": "Here you will make a super cool video game with Flappy!",
        "overview": "In this special stage, students get to build their own Flappy Bird game by using event handlers to detect mouse clicks and object collisions. At the end of the level, students will be able to customize their game by changing the visuals or rules.",
        "prep": " - Play through [r csf-express-course] in stage 11 to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/explore-project-ideas": {
        "cs_content": "Exploring project ideas is meant to inspire students with realistic and entertaining ideas for their culminating projects.",
        "description": "Time to get some inspiration! These puzzles will show you a handful of pre-built games and illustrations to help develop your plan for your BIG project.",
        "overview": "The next five lessons provide an opportunity for students to put their coding skills to use in a capstone project. This project will help individuals gain experience with coding and produce an exemplar to share with peers and loved ones. This is intended to be a multi-lesson or multi-week project where students spend time brainstorming, learning about the design process, building, and then presenting their final work. \r\n\r\nIn the \"Explore\" stage, students will play around with pre-built Artist and Play Lab programs for inspiration. Next, students will learn about the design process and how to implement it in their own projects. They will then be given the space to create their own project in Artist, Play Lab, or any other interface that you are comfortable providing. (This is likely the longest stage of the project.) Students will then revise their code after testing and peer review. Finally, students will be able to present their finished work to their classmates.",
        "prep": " - Play through the online [r express-course-project-examples] to get an idea of the strengths, weaknesses, and limitations of the tool.\n - Decide whether or not you will have your students do the section on [Revisions](https://studio.code.org/s/coursef/stage/19/puzzle/1) (recommended for Course F).\n - Print one copy of the [r design-process] for each student.\n - Modify the [r rubric-csf-final-projects] to fit your class goals and print out a copy for each student.\n - Modify the [r final-project-design-worksheet] to fit your class and print one packet for each student."
    },
    "express/for-loops-for-loop-fun": {
        "cs_content": "At this point, students have become masters of loops. Today, they will learn about another loop commonly used in programming. The `for` loop repeats commands a certain number of times, but also keeps track of the values it is iterating over. For example, a `for` loop that begins at 4, ends with 8, and has a step value of 1 will repeat 4 times, but the values 4, 5, 6, and 7 will also be captured for use elsewhere. Using this structure with variables can create some pretty fantastic programs. Today, students will simply be learning the basics of a `for` loop before diving into programming with them next time!",
        "description": "You're going to have loads of fun learning about `for` loops!",
        "overview": "We know that loops allow us to do things over and over again, but now we’re going to learn how to use loops that have extra structures built right in. These new structures will allow students to create code that is more powerful and dynamic. ",
        "prep": "- Watch the [r teacher-video-for-loop-fun-2].\r\n- Watch the [r lesson-in-action-for-loop-fun].\r\n- Print one [r csf-for-loop-fun-worksheet] per group.\r\n- Print one [r csf-for-loop-fun-assessment] for each student.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "express/for-loops-in-artist": {
        "cs_content": "Creativity and critical thinking come together beautifully in this lesson. Students will continue their practice with `for` loops and variables while they create jaw-dropping images. This lesson inspires a creative mind while teaching core concepts to computer science.",
        "description": "Get ready to make your next masterpiece. Here you will be using `for` loops to make some jaw-dropping pictures.",
        "overview": "In this lesson, students continue to practice `for` loops, but this time with Artist. Students will complete puzzles combining the ideas of variables, loops, and `for` loops to create complex designs. At the end, they will have a chance to create their own art in a freeplay level.",
        "prep": " - Play through the [r csf-express-course] associated with this lesson to find and potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/for-loops-in-bee": {
        "cs_content": "Today's concept, `for` loops, are a very important topic in computer science. Not only are they widely used, the process of learning `for` loops enhances the learning of other important concepts (such as variables and parameters.) Students will have plenty of practice critically thinking through problems by determining the starting, ending, and stepping values for each `for` loop. This concept uses plenty of math as well, so feel free to pair it with a math lesson for an even deeper learning experience.",
        "description": "Buzz buzz. In these puzzles you will be guiding a bee to nectar and honey using `for` loops!",
        "overview": "Featuring Bee, this lesson focuses on `for` loops and using an incrementing variable to solve more complicated puzzles. Students will begin by reviewing loops from previous lessons, then they'll walk through an introduction to `for` loops so they can more effectively solve complicated problems.",
        "prep": " - Play through the [r csf-express-course] associated with this lesson to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/functions-in-bee": {
        "cs_content": "Students will discover the versatility of programming by practicing functions in different environments. Here, students will recognize patterns in the bee's maze. The bee will need to navigate the play area, collect nectar, and make honey. Students will learn to organize their programs and create functions for repeated code. ",
        "description": "The bee needs your help again! Here you will be using functions to get nectar and make honey!",
        "overview": "This lesson teaches students how to create simple functions using our sophisticated “modal” function editor, preparing the way for them to incorporate parameters in future lessons. ",
        "prep": " - Play through the [r csf-express-course] associated with this lesson to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/functions-songwriting-with-parameters": {
        "cs_content": "Using functions helps simplify code and develops the student's ability to organize their program. Parameters will help the students customize their functions so that they can be used for patterns that are similar, though not identical. Students will quickly recognize that writing functions will make their long programs easier to read and easier to debug if something goes wrong.",
        "description": "You just might release the next big hit single! In this lesson, you will be learning what parameters are and how they make some fantastic songs!",
        "overview": "One of the most magnificent structures in the computer science world is the function. Functions (sometimes called procedures) are mini programs that you can use over and over inside of your bigger program. This lesson will help students intuitively understand why combining chunks of code into functions is such a helpful practice, and how they can use those structures even when chunks of code are slightly different.",
        "prep": "- Watch the [r teacher-video-songwriting-functions].\r\n- Watch the [r lesson-in-action-songwriting-parameters].\r\n- Print several [r csf-songwriting-parameter-worksheet] for each group.\r\n- Print one [r csf-songwriting-parameter-assessment] for each student.\r\n- Access to the internet, or pre-downloaded songs and lyrics for activity.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "express/functions-with-parameters-in-artist": {
        "cs_content": "This lesson is providing students with a space to create something that they are proud of. \r\n\r\nThese puzzles allow students to create complex images by building off of previous, more simple projects. At the end of this lesson, students will have images to be proud of.",
        "description": "Get your programming fingers ready. In these puzzles you will make impressive drawings in Artist using functions with parameters.",
        "overview": "In this lesson, students continue working with functions with and without parameters. Students will get the chance to create their own drawings before modifying functions in a freeplay level.",
        "prep": " - Play through [r csf-express-course] to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/functions-with-parameters-in-bee": {
        "cs_content": "Functions are incredibly important in computer science for many reasons. The ability to break down and categorize code will become immensely important as the programs your students write become more and more complex. Functions with parameters require an extra level of skill. Using functions with parameters teaches your students to recognize when a function is needed and if that function can be generalized enough to be used for multiple cases. This lesson, along with the previous lessons on functions with parameters, builds a strong set of critical thinking and problem solving skills.",
        "description": "You've had a little practice using functions with parameters. This lesson will continue your practice with Bee!",
        "overview": "This lesson features the bee environment, and continues along the concept of functions with parameters from the previous Artist stage. Students will practice writing and using functions to follow complex paths and collect patterns of nectar and honey.",
        "prep": " - Play through the [r csf-express-course] associated with this level to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/nested-loops": {
        "cs_content": "In this introduction to _nested loops_, students will go outside of their comfort zone to create more efficient solutions to puzzles.  \r\n\r\nIn earlier puzzles, loops pushed students to recognize repetition. Here, students will learn to recognize patterns *within* repeated patterns to develop these _nested loops_. This stage starts off by encouraging students try to solve a puzzle where the code is irritating and complex to write out the long way. After a video introduces _nested loops_, students are shown an example and asked to predict what will happen when a loop is put inside of another loop. This progression leads into plenty of practice for students to solidify and build on their understanding of looping in programming.",
        "overview": "In this online activity, students will have the opportunity to push their understanding of loops to a whole new level. Playing with the Bee and Plants vs Zombies, students will learn how to program a loop to be inside of another loop. They will also be encouraged to figure out how little changes in either loop will affect their program when they click `Run`.",
        "prep": " - Play through [r csf-express-course] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/nested-loops-in-frozen": {
        "cs_content": "In this series, students will get practice nesting loops while creating images that they will be excited to share. \r\n\r\nBeginning with a handful of instructions, students will make their own decisions when it comes to creating designs for repetition.  They will then spin those around a variety of ways to end up with a work of art that is truly unique.",
        "description": "Here you will be using nested loops to make cool projects to show to your family and friends.",
        "overview": "Now that students know how to layer their loops, they can create so many beautiful things.  This lesson will take students through a series of exercises to help them create their own portfolio-ready images using Anna and Elsa's excellent ice-skating skills!",
        "prep": " - Play through the [r csf-express-course] corresponding to this lesson to find and potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/present-your-project": {
        "cs_content": "At this point, students have worked very hard on their projects, so this lesson is meant to offer a space for the students to share their projects. This lesson will build a supportive community where students will build their own confidence and feel connected to their hardworking peers.",
        "description": "Time to show your work! Here you will be presenting your awesome project to your peers.",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. Finally, students will be able to present their finished work to their peers or share with their loved ones with a special link. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/express/31/)."
    },
    "express/revise-your-project": {
        "cs_content": "This lesson helps students take a step back and view their project from a new perspective. Here, students will be able to decide if they have reached their goals. If they haven't, this lesson gives them time and space to complete the project.",
        "description": "Rome wasn't built in a day and your project shouldn't be, either. Take time to edit and revise your project to make it the best it can be.",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. Now that the projects are built, students are given the opportunity to get feedback from peers and revise their projects. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/express/31/)."
    },
    "express/the-design-process": {
        "cs_content": "Students may be ready to jump straight into building their projects, but this lesson will help shape their ideas into plans. This structure will keep the dreamers grounded and illuminate a path for those feeling left in the dark.",
        "description": "Projects this big take time and plenty of planning. Here, you will learn about the design process that you'll use to build your own creation.",
        "overview": "Over the course of five lessons, students will be building up to building a project of their own design using either Play Lab or Artist as their programming environment. In this portion of the project, students will learn about the design process and how to implement it in their own projects. The lesson guide overviewing all five stages of the process can be found in the beginning of the project process, [here](https://curriculum.code.org/csf/express/31/)."
    },
    "express/the-internet": {
        "cs_content": "If you have been doing every lesson in this course, then each student in your classroom has used the internet...but how many know how it works? Learning more about the internet will help students develop a better understanding of its endless possibilities.",
        "description": "Ever wondered how information travels across the internet? It's not magic! This lesson will teach you the basics of how the internet works.",
        "overview": "Even though many people use the internet daily, not very many know how it works. In this lesson, students will pretend to flow through the internet, all the while learning about connections, URLs, IP Addresses, and the DNS.",
        "prep": "- Watch the [r teacher-video-internet].\r\n- Print enough [r csf-ip-address-cards-and-delivery-type-cards] for each group.\r\n- Print one [r csf-internet-assessment] for each student.\r\n- Access to the internet (such as [get-site-ip.com](http://get-site-ip.com/)).\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "express/variables-envelope-variables": {
        "cs_content": "Variables are very helpful in programming. Students will be introduced to this topic using envelopes to represent variables that have been given names. The value of the variable will be written on a card inside of an envelope. This lesson helps students understand how names can be a placeholder for values in the physical world, so that programming with variables will seem less confusing in the virtual world.",
        "description": "Envelopes and variables have something in common: both can hold valuable things. Here you will learn what variables are and the awesome things they can do.",
        "overview": "Variables are used as placeholders for values such as numbers or words. Variables allow for a lot of freedom in programming. Instead of having to type out a phrase many times or remember an obscure number, computer scientists can use variables to reference them. This lesson helps to explain what variables are and how we can use them in many different ways. The idea of variables isn't an easy concept to grasp, so we recommend allowing plenty of time for discussion at the end of the lesson.",
        "prep": "- Watch the [r teacher-video-envelope-variables-2].\r\n- Obtain 6 or more blank envelopes for warm up plus some for the main activity.\r\n- Print one [r csf-envelope-variables-worksheet] per student.\r\n- Print one [r csf-variables-assessment-worksheet] for each student.\r\n- Provide students with envelopes, paper, pens & pencils.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "express/variables-in-artist": {
        "cs_content": "Variables are essentially placeholders for values that are unknown at the time that you run your program or for values that can change during the execution of a program. These constructs are vital to creating dynamic code because they allow your program to change and grow based on any number of potential modifications.  This stage teaches students what variables are, using the most basic capabilities of setting and using them.",
        "description": "Don't forget to bring creativity to class! In these puzzles you will be making fantastic drawings using variables.",
        "overview": "In this lesson, students will explore the creation of repetitive designs using variables in the Artist environment. Students will learn how variables can be used to make code easier to write and easier to read. After guided puzzles, students will end in a freeplay level to show what they have learned and create their own designs.",
        "prep": "- Play through the [r csf-express-course] associated with this lesson to find any potential problem areas for your class.\n- Review [r csf-lesson-recommend].\n- Make sure every student has a [r think-spot-journal]."
    },
    "express/variables-in-play-lab": {
        "cs_content": "This lesson lets students use variables to display phrases or conversations based on user input. This lesson serves as a wonderful practice exercise for variables in programming, with an extra dose of creativity! At the end of the puzzle sequence, students will be presented with the opportunity to share their projects with family and friends.",
        "description": "Now you will learn about making characters interact in a game using variables!",
        "overview": "Students will get further practice with variables in this lesson by creating scenes in Play Lab. Students will work with user input to set the values of their variables, then get space to create their own mini-project with variables.",
        "prep": " - Play through the [r csf-express-course] associated with this lesson to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "express/while-loops-in-farmer": {
        "cs_content": "As your students continue to deepen their knowledge of loops, they will come across problems where a command needs to be repeated, but it is unknown how many times it needs to be repeated. This is where _while loops_ come in. In today's lesson, students will develop a beginner's understanding of condition-based loops and also expand their knowledge of loops in general. ",
        "description": "Loops are so useful in coding. This lesson will teach you about a new kind of loop: while loops!",
        "overview": "By the time students reach this lesson, they should already have plenty of practice using `repeat` loops, so now it's time to mix things up. \r\n\r\n_While loops_ are loops that continue to repeat commands while a condition is met. While loops are used when the programmer doesn't know the exact number of times commands need to be repeated, but does know what condition needs to be true in order for the loop to continue repeating. For example, students will be working to fill holes and dig dirt in Farmer. They will not know the size of the holes or the height of the mountains of dirt, but the students will know they need to keep filling the holes and digging the dirt as long as the ground is not flat.",
        "prep": " - Play through [r csf-express-course] to find any potential problem areas for your class.\n - Review [r csf-lesson-recommend].\n - Make sure every student has a [r think-spot-journal]."
    },
    "friday/assessment": {
        "cs_content": "* Take a deeper look at assessment resources available in the curriculum\n* Discuss with other teachers who grade and assess in similar ways about how to grade and assess CS Discoveries",
        "description": "Assessment Session",
        "overview": "Assessment Session",
        "prep": "Room Setup:\n\n* Have teachers sit in groups with other people who grade in similar ways to them (standards based, ABC, projects, tests, etc.)\n\nFacilitator Supplies:\n\n* Check for session updates: [r facilitator-daily-digest]\n* [r friday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "friday/break": {
        "description": "Break",
        "short_title": "Break"
    },
    "friday/break-1": {
        "description": "Break",
        "short_title": "Break"
    },
    "friday/break-2": {
        "description": "Break",
        "short_title": "Break"
    },
    "friday/closing-ceremonies": {
        "cs_content": "Celebrate a wonderful week at TeacherCon!",
        "description": "Closing Ceremonies",
        "overview": "Closing Ceremonies",
        "prep": "Room Setup:\n\n* Table tents on each table with TLO Room Names\n* Teachers sitting with TLO rooms\n* Music playing as teachers come in\n* On screen as teachers come in: slideshow of photos from week\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Check for session updates: [r facilitator-daily-digest]\n* [r friday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "friday/looking-ahead": {
        "cs_content": "* Review gots and needs from previous day\r\n* Look back on the week and where you saw the curriculum values\r\n* Start looking forward toward planning for your classroom in the fall\r\n* Introduce assessment philosophy",
        "description": "Kick off the day with talking about the themes of the day: Assessment and Preparing to Teach.",
        "overview": "Kick off the day with talking about the themes of the day: Assessment and Preparing to Teach.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* Before day add the attendance link to the slides!\n* Before the day read updates in: [r facilitator-daily-digest]\n* [r friday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]\n"
    },
    "friday/lunch": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "friday/lunch-1": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "friday/planning": {
        "cs_content": "Teachers think about what questions they still have. Teachers are given time to take out their schedule and look at timeline of the course for them. They can think about assessment or other things they want to start digging into. Mostly work time. \r\n",
        "description": "Planning Session",
        "overview": "Planning Session",
        "prep": "Room Setup:\n\n* Consider grouping teachers with similar planning needs (example: everyone teaching in a semester format)\n\nFacilitator Supplies:\n\n* [r friday-teachercon-slide-deck]\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]"
    },
    "friday/programming-breakout": {
        "cs_content": "Close out any remaining questions lingering the mind of teachers in your TLO room. Have teachers take the final survey. Celebrate an amazing week together!",
        "description": "Managing A Class",
        "overview": "Managing A Class",
        "prep": "Room Setup:\n\n* Question Parking Lot at Front of Room\n\nFacilitator Supplies:\n\n* [r friday-teachercon-slide-deck]\n\nTeacher Materials:\n\n* Computers\n* [r csd-faqs]"
    },
    "graveyard/analyzing-interviews": {
        "cs_content": "At the end of the previous lesson groups started parsing their interview notes, but their analysis was focused on the obvious and immediately observable. In this activity we try to dig a little deeper and start reading between the lines. Users won't always (and often don't) know exactly what they want or need, so learning to read between the lines is an important skill in user-centered design.",
        "description": "This lesson is focused on analyzing the results of the previous lesson’s interviews. Students will use their interview notes and user profiles to delve deeper into understanding some of the unstated needs and wants of their user through a series of guided activities. By the end of the lesson, each team will have created a list of needs and wants that their users have about the space or room, plus story scenarios where they demonstrate a deeper understanding of one or two of the identified needs. They will be prepared for the next step, which is designing the room or space with the user in mind.",
        "overview": "This lesson is focused on analyzing the results of the previous lesson’s interviews. Students will use their interview notes and user profiles to delve deeper into understanding some of the unstated needs and wants of their user through a series of guided activities. By the end of the lesson, each team will have created a list of needs and wants that their users have about the space or room, plus story scenarios where they demonstrate a deeper understanding of one or two of the identified needs. They will be prepared for the next step, which is designing the room or space with the user in mind.\r\n",
        "prep": "* Print one copy of [r say-do-think-feel-charades] and cut the clues along dotted lines into 8 sections\r\n* Print one copy per team of [r analyzing-interview]\r\n* Arrange room into table groups of 4-5\r\n"
    },
    "graveyard/another-lesson": {
        "description": "Part of U2L14\nLearning foci:\nURL structure (protocol, host, path to file)\nUse this CSP lesson : https://docs.google.com/document/d/1zAaHDXi00V4ewphP8w2A41hF-9Fj3Sjg8c6oPbez254/edit  (L13)\nIP address as analog to street address\nWarm Up from This Lesson Could be Good : https://curriculum.code.org/csp/unit1/12/\nDNS as way to find street address of website\nIP: What if we do a kind of packets unplugged thing here but without packets - students just send who notes and realize they need to address their note and say who i came from\nDNS: We could give every student a number which they have to use as their IP address - then in order to figure out which student to route something to you would have to look up the associated name of the person ",
        "overview": "Part of U2L14\r\nLearning foci:\r\nURL structure (protocol, host, path to file)\r\nUse this CSP lesson : https://docs.google.com/document/d/1zAaHDXi00V4ewphP8w2A41hF-9Fj3Sjg8c6oPbez254/edit  (L13)\r\nIP address as analog to street address\r\nWarm Up from This Lesson Could be Good : https://curriculum.code.org/csp/unit1/12/\r\nDNS as way to find street address of website\r\nIP: What if we do a kind of packets unplugged thing here but without packets - students just send who notes and realize they need to address their note and say who i came from\r\nDNS: We could give every student a number which they have to use as their IP address - then in order to figure out which student to route something to you would have to look up the associated name of the person \r\n\r\nIP\r\nDNS\r\n1\r\nDani\r\n2\r\nJosh\r\n3\r\nGT\r\n\r\n\r\n\r\nShow (some version of):\r\nFirst half of : https://studio.code.org/s/csp1/stage/13/puzzle/2 (second half should be used in Unit 5)\r\nWhat is the internet: https://studio.code.org/s/csp1/stage/8/puzzle/2\r\nIP and DNS: https://studio.code.org/s/csp1/stage/9/puzzle/3 "
    },
    "graveyard/app-lab-review": {
        "cs_content": "The primary goal of this lesson is to bridge the gap for students who haven't seen App Lab since the brief introduction in Unit 4. Students need to come out of this lesson with a basic refresher of how to use App Lab in general, and in particular using event handlers to respond to events.",
        "description": "Review the basics of programming in App Lab and explore some new event types that can be used in your programs.",
        "overview": "In this lesson students review the material they learned about creating apps in App Lab from Unit 4 in order to prepare for a return to App Lab in this unit. This review should be modified to best meet the needs of your students and their experience and familiarity with programming in App Lab. In addition to the review the students will also experiment with a variety of new event types that they likely have not seen before.",
        "prep": "* Use [r app-lab-review-game] to plan an App Lab review\r\n* Print a copy of [r event-testing]"
    },
    "graveyard/app-pitches": {
        "description": "In lesson 10, students were introduced to the app proposal project. They brainstormed problems that were relevant to them, proposed an app that can address that problem, identified primary users of the app, listed out the inputs and outputs of the app, and brainstormed names and logos for their app. ",
        "overview": "In lesson 10, students were introduced to the app proposal project. They brainstormed problems that were relevant to them, proposed an app that can address that problem, identified primary users of the app, listed out the inputs and outputs of the app, and brainstormed names and logos for their app. \r\n\r\nThis is the second lesson plan for the app proposal project For today’s lesson, pairs of students will informally share their proposals to classmates, get feedback, and reflect on the feedback they received. Most of the class time will be spent creating their poster. By the end of this lesson, students will be ready to present their app proposal to their classmates. ",
        "prep": "* [r app-proposal-project] (collected at then end of the last class)\r\n* Markers and/or colored pencils\r\n* Poster paper"
    },
    "graveyard/applying-the-problem-solving-process-1": {
        "cs_content": "As a culmination to the chapter on problem solving, students will be introduced to a scenario where they can apply the problem solving process they learned in the previous lesson in a real world context. Today’s lesson is meant to highlight that a structured problem solving approach is helpful not only for small classroom-sized problems, but even problems on a larger scale that have wide ranging effects, various interest groups, and different types of constraints. \n\nStudents will leave this lesson ready to begin the discussions of how computer science can be another tool they can use to solve problems. ",
        "description": "In today’s lesson, students will take the role of space shuttle design companies. Their job is to create a shuttle which lands an astronaut (cotton ball) upright in the cabin (cup). They have certain resources they can use, and based off their initial attempts, can purchase additional resources from the store (you!). Once students have developed and tested their shuttle, the teacher will lead them in a reflection on the problem solving process. ",
        "overview": "In today’s lesson, students will take the role of space shuttle design companies. Their job is to create a shuttle which lands an astronaut (cotton ball) upright in the cabin (cup). They have certain resources they can use, and based off their initial attempts, can purchase additional resources from the store (you!). Once students have developed and tested their shuttle, the teacher will lead them in a reflection on the problem solving process. ",
        "prep": "**For each student** \r\n\r\n* [r space-mission]\r\n\r\n**For each group** \r\n\r\n* 1 cup\r\n* 1 cotton ball \r\n* 5 index cards \r\n* 4 plastic straws \r\n* 3 rubber bands \r\n* 1 pair of scissors \r\n* 18 inches of tape (masking tape is best) \r\n* 15 pennies \r\n\r\n**For the teacher** \r\n\r\n* Additional cups \r\n* Additional cotton balls \r\n* Additional straws \r\n* Additional index cards \r\n* Additional cotton balls \r\n* Additional tape\r\n* Additional rubber bands \r\n* Additional pennies (20-30 pennies) \r\n"
    },
    "graveyard/automating-data-decisions": {
        "cs_content": "This lesson demonstrates to students that the last step in the data problem solving process, making a decision, is something that a computer can do automatically if it's given an algorithm. It builds off the previous lesson which demonstrates the importance of designing the way you collect data in order for it to be usable for interpretation. This is especially true for computers which are much better suited for the multiple choice style data they will see in this lesson.",
        "description": "This lesson explores how computers could be used to automate decision making based on data. The class creates rules, or an algorithm, that a computer could use to automatically decide which ice cream flavors should be chosen based on the results of a survey. Groups share their rules and what choices their rules would make with the class data. The lesson concludes with a discussion about the benefits and drawbacks of using computers to automate the data problem solving process.",
        "overview": "In this lesson students look at a simple example of how a computer could be used to complete essentially every step of the data problem solving process. To begin students are given the clean data they collected about their ice cream preferences. They use a spreadsheet to visualize this data using simple charts and discuss in groups the decision they would make with this data. Students then create rules, or an algorithm, that a computer could use to make this decision automatically. Groups share their rules and what choices their rules would make with the class data. They then use their rules on data from another class to reinforce the fact that the rules they create should be useful for any data set. The lesson concludes with a discussion about the benefits and drawbacks of using computers to automate the data problem solving process.",
        "prep": "* Copies of [r automating-data-decisions-1]"
    },
    "graveyard/basic-app-functionality": {
        "cs_content": "This is the final lesson in which students will learn new programming concepts during this project, and in the scope of this project it's not entirely essential. Students can successfully complete the final stages of this project without incorporating any of these concepts, so this lesson really serves to better satisfy the students' want to make a \"real\" feeling app.",
        "description": "Teams add a bit more polish and functionality to their apps before testing. Several examples are provided to demonstrate simple code that adds cool features.",
        "overview": "At this point in the development process, each student should have what is essentially a digital version of the paper prototype - static screens that are linked together with buttons. For many apps this is all you really need to start testing with users, but this lesson will give students a chance to explore simple ways to add a bit more functionality to their apps before moving into the testing phase. The programming concepts introduced in this lesson are **not necessary** to successfully complete the project, and can be omitted at your discretion."
    },
    "graveyard/binary-numbers-part-10": {
        "cs_content": "This lesson gives students a tool to convert between much larger numbers, this time with a tool that allows for 0-255.  Students should also come to understand that it is important for information to be structured such that a computer can tell when one piece of information stops and another begins.  They are introduced to an 8-bit (one byte) system, which will prepare them for the next lesson, where they will deal with various kinds of information encoded into the same record.",
        "description": "This lesson continues the study of binary numbers with a focus on using a standard bit length.  The class makes flippy-dos, paper manipulatives that will help them to encode and decode 8-bit numbers (0-255).  After practicing with the flippy-do, the class discusses how they could extend that standardization to the other types of data.",
        "overview": "Students review the concept of binary numbers, and discuss that they need to know the bit-length of each number in order to decode a series of bits.  They then made a flippy-do, a paper manipulative that will help them to encode and decode 8-bit numbers (0-255).  After practicing with the flippy-do, students discuss how they could extend that standardization to the other types of data."
    },
    "graveyard/classes-and-external-style-sheets": {
        "cs_content": "This lesson helps students understand why moving the styling of their website out into one style sheet is important. A external style sheet allows one set of styles to easily be applied across all the pages on a website without having to copy it onto every page and change it on every page if changes are needed. \r\n\r\nAs part of moving style to an external style sheet it is important for students to think about the style they are using. So far they have just styled the website randomly. This lesson pulls in the Prepare step in the Problem Solving process so students think in detail about the style they want across their website before they implement it.",
        "description": "Students will design their own personal style set or brand for their website by picking consistent colors and fonts to use across all pages of their website. Once they have decided on fonts and colors, they create style rules that go across all the pages.  These get applied to the website using an external style sheet and students are forced to use classes to keep some of the unique style exceptions on their pages. Student finish class by designing a logo for their web page and making it a link to the home page.",
        "overview": "Students will design their own personal style set or brand for their website by picking consistent colors and fonts to use across all pages of their website. Once they have decided on fonts and colors, they create style rules that go across all the pages.  These get applied to the website using an external style sheet and students are forced to use classes to keep some of the unique style exceptions on their pages. Student finish class by designing a logo for their web page and making it a link to the home page.",
        "prep": "* Make sure students can access their copy of [r web-development-practices]\r\n* Print a copy of [r guess-the-brand] for each student\r\n* Print a copy of [r creating-your-brand] for each student"
    },
    "graveyard/conducting-user-centered-interviews": {
        "cs_content": "In the previous lesson students developed a list of interview questions for their school space design project, and today they will get a chance to interview a key user (or stakeholder) in that space.",
        "description": "This lesson continues the weeklong User-Centered Design project. Students will have a chance to practice what they previously learned about user-centered interviews and conduct an in-class interview with a user of their room or space.",
        "overview": "This lesson continues the weeklong User-Centered Design project. Students will have a chance to practice what they previously learned about user-centered interviews and conduct an in-class interview with a user of their room or space.\n\nStudents will first review the _Say Do Think Feel_ strategy for taking notes. Then the entire class will interview the user, with everyone taking notes when they are not asking questions. After the interview, they will break into teams and summarize what they observed about the user’s stated needs and wants in a simplified user profile. They will wrap up the lesson with a journal reflection about the interview process.\t",
        "prep": "* A few days prior to the lesson, confirm with person being interviewed\r\n* Print one copy per team of [r user-profile]\r\n* Make sure “Top Tips for Conducting a Great Interview” poster is still on wall\r\n* Arrange room into table groups of 4-5, for students to work together after the interviews\r\n* (Optional) Print one copy per student of [r interview-notes]. Alternately, students can take notes in their journals during the interview.\r\n"
    },
    "graveyard/creating-a-user-centered-design": {
        "cs_content": "This lesson serves to give the students more practice with listening to users wants and needs and creating designs for others. It also exposes the students to receiving a critique on their work from the intended stakeholder. \r\n",
        "description": "Equipped with information gathered from their user centered interviews in U4L06, the students will now work on prototyping a redesign of the space in question. While they will be given more time to do this design work than in the mini activity (in U4L04), it still will be only a part of a class session. The students will be told the dimensions (or approximate dimensions) of the space and any other constraints (for example a budget) and will draw out a plan for the changes. Once the students have a paper prototype representing their ideas, they will present these ideas to their user for feedback. This feedback will purposely not be incorporated into the plan, but instead presented along with the plan in U4L09. ",
        "overview": "Equipped with information gathered from their user centered interviews in U4L06, the students will now work on prototyping a redesign of the space in question. While they will be given more time to do this design work than in the mini activity (in U4L04), it still will be only a part of a class session. The students will be told the dimensions (or approximate dimensions) of the space and any other constraints (for example a budget) and will draw out a plan for the changes. Once the students have a paper prototype representing their ideas, they will present these ideas to their user for feedback. This feedback will purposely not be incorporated into the plan, but instead presented along with the plan in U4L09. ",
        "prep": "* Make sure you have 5-10 pieces of graph paper for each team. One place you can generate graph paper is [incompetech.com/graphpaper](https://incompetech.com/graphpaper/)\r\n* Print one copy of U4L08 Activity Guide - Designing the Space for each team\r\n* (Optionally) print one copy of U4L08 Activity Guide - Activity Flow Chart for each team\r\n* Put out scissors, rulers and colored pencils for each team\r\n"
    },
    "graveyard/designing-for-social-impact": {
        "cs_content": "This lesson will kick off a week long “mini” design project focused something that is needed by the local community - in this instance, your school. Through this activity, the students will experience all of the phases of the problem solving and design process (plan, design, try and test), with an emphasis on the first two phases. They will continue building empathy towards other users, refine their interviewing skills, gain a deeper understanding of the process behind user centered design, and explore the roles associated with product development.",
        "description": "In this first lesson of a week-long project students will explore a space in the school, considering how it could be redesigned to better meet the needs of its users. With that space in mind, small groups will develop a list of interview questions for a user of the space to help gather more information about what could be improved about the space.",
        "overview": "Over the course of the next few lessons, students will (re)design a room or area in their school building that better meets the needs of its users, following the user design principles that they have learned about in the previous lessons. The overall schedule of this project is:\n\n* Introduce project and prepare interview questions (Lesson 5)\n* Conduct interviews and create a user profile (Lesson 6)\n* Analyze user’s wants/needs and create story scenario for one or two of them (Lesson 7)\n* Create a simple design and presentation (Lesson 8)\n* Share out presentations (Lesson 9)\n\n",
        "prep": "**Several days or weeks prior to this lesson:**\r\n\r\n* Read the Unit 4 Teacher’s Guide to User-Centered Design Projects to learn more about the scope of this project\r\n* Select a room or space to redesign\r\n* Arrange for an adult user of the room/space to come to the class to be interviewed. If this is not an option, the Unit 4 Teacher’s Guide outlines other interview scenarios. \r\n\r\n**The day of, or shortly before:**\r\n\r\n* Make a copy of the U4L05 Slides - Mini-Project: Design a Room or Space, and customize to include details about the room/space students will be designing, as well as the name and information about the person that will be coming to the classroom to be interviewed\r\n* Assign students to teams of 4-5. They will work together for the duration of this project.\r\n* Arrange seating so teams can collaborate.\r\n* Print one copy of [r creating-interview-questions] for each team. \r\n* Gather scrap paper for students\r\n\r\n"
    },
    "graveyard/developing-code-for-computers": {
        "cs_content": "Unlike the tags in the last lesson, this lesson focuses on elements that students often can't see the impact of. These tags are still important to a website as they help it to function consistently across different web browsers on different computers. Connecting this back to the high quality feature list that students created in lesson 1 will help them understand that high quality takes more than nice layouts. It requires making sure your website will work for all the users that want to use it.",
        "description": "Students will learn about the group of tags that help a web page function consistently across many web browsers and computers. They will learn how to use the validator to check that these fundamental elements exist on the pages they create. They will then add these elements to their own pages they created in the previous lesson and check their work with the validator.",
        "overview": "Students will learn about the group of tags that help a web page function consistently across many web browsers and computers. They will learn how to use the validator to check that these fundamental elements exist on the pages they create. They will then add these elements to their own pages they created in the previous lesson and check their work with the validator.\r\n",
        "prep": "* Make sure students bring their [r web-development-practices]\r\n* Practice using the [r validator]\r\n* Decide what type of “fundamentals” to review in the Warm-Up\r\n"
    },
    "graveyard/discovering-users": {
        "cs_content": "The interview is an important tool in discovering a user’s wants, needs, and problems. Creating good questions and using good techniques is an important part of developing an overall picture of the user. This lesson helps students understand what makes an interview experience useful, and how a well  planned interview can later be used to create a detailed user profile and a single “point of view” statement that summarizes the needs/wants of a user. ",
        "description": "In preparation for the User Centered Design micro activity in the net lesson, students will look at user interviews as a way to learn more about your end user. In contrast to the previous lesson, students will need to create their own user profiles by watching recorded interviews with users and attempting to distill down the key elements of each user.",
        "overview": "In preparation for the User Centered Design micro activity in the net lesson, students will look at user interviews as a way to learn more about your end user. In contrast to the previous lesson, students will need to create their own user profiles by watching recorded interviews with users and attempting to distill down the key elements of each user.",
        "prep": "* Print a copy of [r creating-a-user-profile] for each student.\n* (Optionally) post the [r interview-roadmap] on the wall\n* Arrange tables for groups of 4\n* Start a large poster with the title \"Top Tips for Conducting a Great Interview\"\n* Place markers and sticky notes on each table group\n* Cue up three videos"
    },
    "graveyard/for-loops": {
        "cs_content": "For loops are one of the ways that computers make doing something simpler than doing it by hand. For loops allow you to tell a computer to repeat a set of steps a certain number of times. For a human to write the repeated code for repeating something a 100 times would be a lot of work. In addition if you came back and wanted to change it later to 250 times that would be difficult. Instead a for loop allows you to say what code you want to repeat and for how many times. That way when you come back later and want to change the number of times it repeats you only have to change that number! For loops are also very helpful with list processing which you will start to look at in the next lesson.",
        "description": "The class learns about repeating instructions using a _for loop_, first by controlling a \"robot\" through a grid, and then in App Lab.",
        "overview": "Students are introduced to the _for loop_ in this lesson as a way to repeat some code a certain numbers of times. Students start with an unplugged activity where they use for loops to navigate a robot across a grid. Once complete, students then take their knowledge into App Lab where they write programs that rely on iteration using a _for loop_.",
        "prep": "* Print a copy of [r for-loops-unplugged] for each student"
    },
    "graveyard/inputs-and-outputs": {
        "cs_content": "This lesson is the first time students explore in more detail the input-output-store-process model of a computer they were introduced to in the previous lesson. In this lesson students are only paying attention to input and output with processing and storage temporarily thanks to the simple ",
        "description": "In this lesson students will propose apps that solve a problem by triggering some output when they receive some input. To begin the lesson, the class discuss the fact that all inputs or outputs are beautiful!",
        "overview": "In this lesson students will propose apps that solve a problem by triggering some output when they receive some input. To begin the lesson, the class discuss the fact that all inputs or outputs are beautiful!",
        "prep": "* Print copies of [r if-this-then-that-app]"
    },
    "graveyard/lists-and-output": {
        "cs_content": "This lesson allows students to apply their knowledge of lists to physical components on the board. This lesson combines the information students learned about lists in the previous lesson, with the commands they learned earlier to control the red LED. At their simplest, the color LEDs can be treated exactly like the red LED by calling commands like `on()` `off()` and `toggle()`, but students will also see the more advanced command `color()` which enables them to (predictably) set the color of each LED.",
        "description": "Using the concept of lists from the previous lesson, the class writes programs that control the ten color LEDs on the Circuit Playground.",
        "overview": "The Circuit Playground includes 10 color LEDs in a ring around the outside edge. These LEDs are accessible in code as a list called `colorLeds`. Building on the understanding of lists from the previous lesson, students write programs that control the color LEDs by accessing them from a list."
    },
    "graveyard/page-layout": {
        "description": "This lesson is coming soon.",
        "overview": "This lesson is coming soon."
    },
    "graveyard/peer-review": {
        "cs_content": "Students have been working on creating their personal website for many lessons now. They have used 3 steps of the problem solving process. They have defined, prepared, and tried many things in creating their websites. However they have not had much time to reflect. This lesson offers spaces to step back and reflect. Once students have reflected they can then start preparing to move forward again.\r\n\r\nIt will be important to keep building the peer review culture in your class for this lesson. Help students to see the process of creating their website as just that a \"process\" where improvement is always possible. Feedback allows them to keep making steps forward. Getting students to give each other actionable feedback will require commitment from all students to help each other.",
        "description": "Students have been continuously working on the same project for many weeks. In this lesson students take a step back from implementing their own website and look at peers websites. Through peer review students will get to share feedback on each others sites as well as hopefully get some new ideas for their own website.",
        "overview": "Students have been continuously working on the same project for many weeks. In this lesson students take a step back from implementing their own website and look at peers websites. Through peer review students will get to share feedback on each others sites as well as hopefully get some new ideas for their own website.",
        "prep": "* Set up room for easy grouping of students for peer review\r\n* Print a copy of [r website-peer-review] for each student\r\n* (Optional) print a copy of [r website-self-reflection] for each student\r\n* Make sure students can access their copy of [r web-development-practices]"
    },
    "graveyard/personal-website-midway-check": {
        "cs_content": "A website needs users to make an impact. Users have many unique needs. Differences could be physical such as bad eye sight or colorblindness. Differences could also be dependent on devices such as internet speed, kind of device or web browser choice. All of these things can impact a users experience on a website so it is important for students to begin to think about how not everyone has the same experience on their web page they do. Student will need to leverage their problem solving abilities in this lesson to make improvements after testing different accesibility issues.",
        "description": "Time to check your website for usability and accessibility by all kinds of users, regardless of physical disability, software and hardware differences, and internet speed.",
        "overview": "Students will investigate how to make their websites more accessible for different user needs by testing: hardware, software, internet, and visual accessibility on their website. Student will consider ways they can improve their design based on these tests.\n",
        "prep": "* Practice using the [r validator], [r color-blindness-filter], and [r chrome-devtools-throttle]\r\n* Make sure students bring their [r web-development-practices]\r\n"
    },
    "graveyard/presenting-your-design": {
        "cs_content": "The purpose of this lesson is not only to give students practice in presenting technical material, but also to give students practice in listening and critiquing them as well. ",
        "description": "Now that the students have developed a prototype design of a space based on their user research and have received some feedback on those designs, the teams will present their work. Each team will give the class context about their user and the design as well as the feedback they received. ",
        "overview": "Now that the students have developed a prototype design of a space based on their user research and have received some feedback on those designs, the teams will present their work. Each team will give the class context about their user and the design as well as the feedback they received. \r\n"
    },
    "graveyard/processing-information": {
        "cs_content": "Over the course of the previous two lessons, students have developed an understanding of computers as machines that input, store, process, and output information.  In this lesson, they will look more closely at how information can be processed by the computer within the context of image filtering.  This lesson gives students an opportunity to explore the ideas of representing and processing information in a plugged in context.",
        "description": "In this lesson, students continue to build an understanding of how computers represent information, and learn more about how to process information on the bit level.  They will begin by using the pixel filtering tool in Code Studio to explore how pixels on a screen and combinations of bits either in an on or off state can represent different colors. As they progress through levels in Code Studio, students will process the colors in given images by applying different filters to see how the filters affect the output images. The lesson concludes with students applying filters to process images that they have created.",
        "overview": "In this lesson, students continue to build an understanding of how computers represent information, and learn more about how to process information on the bit level.  They will begin by using the pixel filtering tool in Code Studio to explore how pixels on a screen and combinations of bits either in an on or off state can represent different colors. As they progress through levels in Code Studio, students will process the colors in given images by applying different filters to see how the filters affect the output images. The lesson concludes with students applying filters to process images that they have created.",
        "prep": "* Forum\r\n* Web access to Code Studio"
    },
    "graveyard/publishing-a-website": {
        "cs_content": "This lesson marks the first time that students will be sharing out their creations publicly on the internet, and therefore places a heavy focus on scrubbing PII from student websites before publishing. In addition to filtering out private information, students will also use their Web Development Practices to review their pages.",
        "description": "After reflecting on their experience exploring digital footprints, students brainstorm a list of Personally Identifiable Information (PII) that should not be included on their websites. Once they have added the list to their Web Development Practices - Project Guide, each student will use the everything in their practices packet to review their own site to make sure it meets those standards before publishing to the world for the first time!",
        "overview": "After reflecting on their experience exploring digital footprints, students brainstorm a list of Personally Identifiable Information (PII) that _should not_ be included on their websites. Once they have added the list to their [r web-development-practices], each student will use the everything in their practices packet to review their own site to make sure it meets those standards before publishing to the world for the first time!\r\n\r\n",
        "prep": "* Make sure students bring their [r web-development-practices]\r\n* Review [r coppa-plea-keep-kids-safe-online]"
    },
    "graveyard/representing-information": {
        "cs_content": "This lesson is designed to give students a sense of how information can be represented in a computer using binary states. The key insight is that with properly designed rules it is possible to represent even complex information like text using sequences of these binary signals. The lesson is not designed to teach how a base-2 or binary number system works.\r\n\r\nIn subsequent lessons students will learn a little bit about how computers process information, including the next lesson which demonstrates how a computer might process information at this lowest level. This lesson sets the stage by showing how information is represented in a computer throughout that process.",
        "description": "In this lesson students will represent information using a deck of cards.  They will first use playing cards to store yes or no answers to a series of questions. Next, they will create a set of rules to represent the letters of their initials with a card or sequence of cards, then allow another group to retrieve the text using those rules. Last, students will modify their rules so that they can store any short piece of text using only two states (face up and face down), in a reflection of the computer’s use of binary. They will have the opportunity as before to test their rules by allowing another group to retrieve the text stored in the cards.  By the end of this lesson, students should understand that there are many ways to represent information and that information in a computer is represented using binary states.",
        "overview": "In this lesson students will represent information using a deck of cards.  They will first use playing cards to store yes or no answers to a series of questions. Next, they will create a set of rules to represent the letters of their initials with a card or sequence of cards, then allow another group to retrieve the text using those rules. Last, students will modify their rules so that they can store any short piece of text using only two states (face up and face down), in a reflection of the computer’s use of binary. They will have the opportunity as before to test their rules by allowing another group to retrieve the text stored in the cards.  By the end of this lesson, students should understand that there are many ways to represent information and that information in a computer is represented using binary states.",
        "prep": "**For each student**\r\n\r\n* Print one copy of the [Activity Guide](https://docs.google.com/document/d/1RbCVT09r8udkgQE3KOwG29lStWZcko8cUjkTP7Sjhac/)\r\n\r\n**For each group**\r\n\r\n* Playing Cards\r\n* Construction Paper\r\n* Markers and/or Colored Pencils\r\n"
    },
    "graveyard/testing": {
        "description": "Between U2L06 and U2L07\nLearning foci:\nInformation is sent along a physical network\nA protocol is necessary for nodes along the network to communicate\nModifications from CSP U1L02\nRemove binary constraint?\nInstead of increasing difficulty of information sent, maybe start building out network (eg connect with another pair and pass your bit through)\nShow (some version of):\nWires Cables and Wifi Video : https://studio.code.org/s/csp1/stage/3/puzzle/3",
        "overview": "Between U2L06 and U2L07\r\nLearning foci:\r\nInformation is sent along a physical network\r\nA protocol is necessary for nodes along the network to communicate\r\nModifications from CSP U1L02\r\nRemove binary constraint?\r\nInstead of increasing difficulty of information sent, maybe start building out network (eg connect with another pair and pass your bit through)\r\nShow (some version of):\r\nWires Cables and Wifi Video : https://studio.code.org/s/csp1/stage/3/puzzle/3\r\n"
    },
    "graveyard/timed-loops": {
        "cs_content": "The underlying structure of a _timed loop_ is the `setInterval()` function. Because JavaScript is a _single threaded_ language (meaning it can only do one thing at a time), repeating code infinitely, or at a slow rate, without blocking other events from occurring is actually a pretty difficult task. The _timed loop_ sets up a function that can be run at an interval, but which doesn't prevent other code from running between iterations.\r\n\r\nUsing this structure allows students to write programs that incorporate timing into them, such as turning on the color LEDs slowly, one at a time.",
        "description": "In this lesson we build on students understanding of for loops to learn about a more sophisticated structure called a timed loop. Unlike for loops, you can control how quickly a timed loop repeats, and other code (such as event handlers) can be run between iterations of the loop. This allows us to create interesting animations that repeat infinitely, while still allowing other code to run alongside it.",
        "overview": "In this lesson we build on students understanding of _for loops_ to learn about a more sophisticated structure called a _timed loop_. Unlike _for loops_, you can control how quickly a _timed loop_ repeats, and other code (such as event handlers) can be run between iterations of the loop. This allows us to create interesting animations that repeat infinitely, while still allowing other code to run alongside it."
    },
    "graveyard/user-research": {
        "description": "NOTE: Considering collapsing this and the Market Research lesson together. Focus for this project would be on researching existing apps in the chosen problem space - interviewing key stakeholders would be left as an optional extension activity.",
        "overview": "**NOTE: Considering collapsing this and the Market Research lesson together. Focus for this project would be on researching existing apps in the chosen problem space - interviewing key stakeholders would be left as an optional extension activity.**\r\n\r\nStudents will complete the research part (the Define phase) of their app project in this lesson. Teams will work to complete any unfinished work from the previous two lessons, using a punch list that they’ve previously created. They will also analyze the out-of-class interviews that were completed, and use that analysis to create a composite user profile that represents their target user group. Teams will then work together to rate up to 6 prospective apps, and reach consensus on their final app choice. By the end of the lesson, each team will have chosen their app topic, app type, and target user group, and have a short description of their app that they can use to present to others.",
        "prep": "* Print one copy per team of \t[r user-research] (optional; students could use their own paper for this activity)\r\n* Print one copy per team of [r composite-user-profile]\r\n"
    },
    "graveyard/yet-another": {
        "description": "Between U2L14 and U2L15\nLearning foci:\nBuild on understanding of / need for protocols from sending information lesson\nInformation is split into smaller components (packets) to send across the network\nThe internet is designed with redundancy to handle errors\nModifications from CSP U1L11 Packets Unplugged\nNeeds some sort of router introduction - possibly just a voiceover + video\nWhat would it look like to build out to web pages with linked files (images, css, etc)\nShow (some part of):\nPackets Routing and Reliability: https://studio.code.org/s/csp1/stage/11/puzzle/3",
        "overview": "Between U2L14 and U2L15\r\nLearning foci:\r\nBuild on understanding of / need for protocols from sending information lesson\r\nInformation is split into smaller components (packets) to send across the network\r\nThe internet is designed with redundancy to handle errors\r\nModifications from CSP U1L11 Packets Unplugged\r\nNeeds some sort of router introduction - possibly just a voiceover + video\r\nWhat would it look like to build out to web pages with linked files (images, css, etc)\r\nShow (some part of):\r\nPackets Routing and Reliability: https://studio.code.org/s/csp1/stage/11/puzzle/3\r\n\r\n\r\ncan we get at it with something in the packets lesson? effectively every student between the sender and receiver is a router right?\r\nDani McAvoy\t\r\nDani McAvoy\r\n9:46 AM Sep 20\r\nteachers have said that students end up dropping packets anyway naturally in this lesson\r\nDani McAvoy\t\r\nDani McAvoy\r\n9:46 AM Sep 20\r\nso it would be cool to get into that\r\nDani McAvoy\t\r\nDani McAvoy\r\n9:46 AM Sep 20\r\nwould be good to reinforce URL/IP/DNS if we can\r\nDani McAvoy\t\r\nDani McAvoy\r\n9:48 AM Sep 20\r\nredundancy - a teacher could remove some students for a little\r\nJosh Caldwell\t\r\nJosh Caldwell\r\n12:12 PM Sep 20\r\nIf we redo cups and strings to build towards a larger network then I think it's easier to explain the role of routers through the activity here.\r\n\r\n\r\nshould we get at cheapest path here?\r\nDani McAvoy\t\r\nDani McAvoy\r\n10:07 AM Sep 20\r\nshould we get at TCP kinda thing which allows the receiver to know if they got the whole message?\r\nJosh Caldwell\t\r\nJosh Caldwell\r\n11:55 AM Sep 20\r\nI want to get a feel for how big the core activity is, but I think if we can keep the rule set simple it would be good to build in extensions towards the end. Cheapest path might be a bit hard without laying on an activity guide to map the network, but I think adding a challenge to send back an ACK would be good.\r\n"
    },
    "hardware-input/accelerometer": {
        "cs_content": "This lesson gives students an opportunity to work with the accelerometer sensor and explore its orientation properties and accelerometer-specific board events. Students will see the purpose and uses of an accelerometer in real world devices and programs and create their own versions of some of these applications. To do this, students will need to refer back to their past knowledge of the counter pattern to create functional accelerometer-based apps. ",
        "description": "In this lesson, students will explore the accelerometer and its capabilities. They’ll become familiar with its events and properties, as well as create multiple programs utilizing the accelerometer similar to those they’ve likely come across in real world applications.",
        "overview": "In this lesson, students will explore the accelerometer and its capabilities. They’ll become familiar with its events and properties, as well as create multiple programs utilizing the accelerometer similar to those they’ve likely come across in real world applications."
    },
    "hardware-input/functions-with-parameters": {
        "cs_content": "In previous lessons, students have used functions to define blocks of code that can be used in multiple places in a program.  In this lesson, students learn how to use parameters to generalize the purpose of a function.  Parameters allow a program to specify the details of how a function works when it is called, rather than when the program is defined.  Although students have seen functions with parameters earlier in the unit, this is the first time that they are expected to define and call their own.  Students also learn how to use a for loop to iteratively pass in the elements of an array as parameters to a function, allowing them to use the same function on multiple elements on the screen.",
        "description": "The lesson starts with a quick review of parameters, in the context of App Lab blocks that they students have seen recently.  Students then look at examples of parameters within user-created functions in App Lab and create and call functions with parameters for themselves, using them to control multiple elements on a screen.  Afterwards, students use for loops to iterate over an array, passing each element into a function.  Last, students use what they have learned to create a star catching game.",
        "overview": "The lesson starts with a quick review of parameters, in the context of App Lab blocks that they students have seen recently.  Students then look at examples of parameters within user-created functions in App Lab and create and call functions with parameters for themselves, using them to control multiple elements on a screen.  Afterwards, students use for loops to iterate over an array, passing each element into a function.  Last, students use what they have learned to create a star catching game."
    },
    "hardware-input/lists-and-for-loops": {
        "cs_content": "As students start using arrays more frequently, a common pattern emerges wherein you want to run some code on each element of an array. While _for loops_ are a generally useful structure for repeating code, they are a particularly useful for iterating over an array. In this lesson we build on the understanding of arrays that students have developed in the last two lessons by introducing the _for loop_, which combines a variable, the counter pattern, and a conditional all in a single construct.",
        "description": "Combining _lists_ and _for loops_ allows you to write code that impacts every element of a list, regardless of how long it is. The class uses this structure to write programs that process all of the elements in lists, include the list of color LEDs.",
        "overview": "Using a _for loop_ to iterate over all of the elements in an array is a really useful construct in most programming languages. In this lesson, students learn the basics of how a _for loop_ can be used to repeat code, and then combine it with what they've already learned about arrays to write programs that process all elements in an array. Students use for loops to go through each element in a list one at a time without having to write code for each element. Towards the end of the lesson students will apply this with the `colorLed` list on the board to create an app that changes all of the LEDs each time a button is clicked."
    },
    "hardware-input/making-music": {
        "cs_content": "This lesson allows students to get more creative with the buzzer by introducing the concept of a \"note\" and by using arrays to hold sequential collections of notes.  Using notes rather than frequencies provides a layer of abstraction that makes it easier for students to identify sounds that can be used to make music.  Arrays provide a way to group together sounds in sequence, so that they can be played as music.  Using the `playNotes` block to iterate over an array of notes provides a conceptual foundation for working with `for` loops in the next lesson.",
        "description": "In this lesson students will use the buzzer to its full extent by producing sounds, notes, and songs with the buzzer. Students start with a short review of the buzzer's frequency and duration parameters, then move on to the concept of notes.  Notes allow students to constrain themselves to frequencies that are used in Western music and provide a layer of abstraction that helps them to understand which frequencies might sound good together.  Onces students are able to play notes on the buzzer, they use arrays to hold and play sequences of notes, forming simple songs.",
        "overview": "In this lesson students will use the buzzer to its full extent by producing sounds, notes, and songs with the buzzer. Students start with a short review of the buzzer's frequency and duration parameters, then move on to the concept of notes.  Notes allow students to constrain themselves to frequencies that are used in Western music and provide a layer of abstraction that helps them to understand which frequencies might sound good together.  Onces students are able to play notes on the buzzer, they use arrays to hold and play sequences of notes, forming simple songs."
    },
    "hardware-input/output-and-arrays": {
        "cs_content": "Arrays are a common data structure in computer science, used to make storing and accessing information easier. The lesson prepares students to access items within an array, but doesn't yet cover creating and modifying arrays, which will be addressed in the following lesson. Students are also introduced to the ring of color LEDs, which are exposed as an array called `colorLeds`. Students learn how to access and control each LED in the array individually, preparing them to access multiple LEDs though iteration later in the chapter.",
        "description": "Learn how lists can be used to store multiple values in a single variable name.",
        "overview": "An array is an ordered collection of items, usually of the same type. In this lesson, students learn ways to access either a specific or random value from a list using its index.  They then learn how to access the colorLEDs array that controls the behavior of the color LEDs on the Circuit Playground.  Students will control the color and intensity of each LED, then use what they have learned to program light patterns to create a light show on their Circuit Playground."
    },
    "hardware-input/polling-events": {
        "cs_content": "The goal of this lesson is both to model for students how thinking about the physical design of a product impacts the prototyping process, and to introduce a handful of practical skills that will make creating their final projects easier.",
        "description": "Wire simple circuits to create a physical prototype using cheap and easily found materials.",
        "overview": "In preparation for this chapter's final project, students will learn how to develop a prototype of a physical object that includes a Circuit Playground. Using a modelled project planning guide, students will learn how to wire a couple of simple circuits and to build prototypes that can communicate the intended design of a product, using cheap and easily found materials such as cardboard and duct tape.",
        "prep": "* Gather prototyping materials, such as:\r\n* Structural material (cardboard, construction paper, etc)\r\n* Connective material (tape, glue, hot glue, etc)\r\n* Construction tools (scissors, staplers, etc)\r\n* Other materials (cups, binder clips, paper plates, etc)\r\n* Prepare circuit wiring materials, such as:\r\n* Alligator clip wires (included in Circuit Playground classroom kit)\r\n* LEDs (included in Circuit Playground classroom kit)\r\n* Other conductive material (wire, paper clips, foil, etc)\r\n* (optional) Buttons or switches\r\n* Print a copy of [r physical-prototyping-project] for each group of 2-3 students\r\n* Prepare a model button to show the class"
    },
    "hardware-input/project-prototype-an-innovation": {
        "cs_content": "This lesson is the culmination of Unit 6 and provides students an opportunity to build a Maker Toolkit project of their own from the ground up. This project is an opportunity to showcase technical skills, but they will also need to demonstrate collaboration, constructive peer feedback, and iterative problem solving as they encounter obstacles along the way. This project should be student-directed whenever possible, and provide an empowering and memorable conclusion to the final unit of CS Discoveries.",
        "description": "Develop innovative computing devices of your own design, using everything you've learned throughout this course.",
        "overview": "In this final project for the course, students team to develop and test a prototype for an innovative computing device based on the Circuit Playground. Using the inputs and outputs available on the board, groups will create programs that allow for interesting and unique user interactions. ",
        "prep": "* Collect materials for physical prototyping, eg.\r\n* Cardboard\r\n* Scissors\r\n* Tape\r\n* Glue\r\n* Foil\r\n* Print a copy of [r planning-your-innovation] for each pair of students\r\n* Print a copy of [r prototype-an-innovation] for each student\r\n* Print a copy of [r prototype-an-innovation-rubric] for each student"
    },
    "intro/break": {
        "cs_content": "Assign partners/lessons and move people at the end of this break/start of the next session so they’re sitting at a table with others from their grade band.",
        "description": "Teachers take a break. Facilitator assigns partners/lessons and move people at the end of this break/start of the next session so they’re sitting at a table with others from their grade band.",
        "overview": "Teachers take a break. Facilitator assigns partners/lessons and move people at the end of this break/start of the next session so they’re sitting at a table with others from their grade band.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* None"
    },
    "intro/break-2": {
        "cs_content": "Use the first 5 minutes of break to clear parking lot items that have easy answers. Reserve the rest for the wrap up",
        "description": "Use the first 5 minutes of break to clear parking lot items that have easy answers. Reserve the rest for the wrap up"
    },
    "intro/build-and-share-implementation-plan": {
        "cs_content": "Teachers have time to make a plan for bringing CS Fundamentals to their classroom or school.",
        "description": "Make a plan for bringing CS Fundamentals to classroom or school.",
        "overview": "Make a plan for bringing CS Fundamentals to classroom or school.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* Laptops\r\n* School calendar",
        "short_title": "Plan"
    },
    "intro/dry-run-plugged-lessons": {
        "cs_content": "Participants have done a dry run of their plugged lessons, seen a dry run of another plugged lesson, and discussed plugged lessons.",
        "description": "Dry run plugged lessons, seen a dry run of another plugged lesson, and discussed plugged lessons.",
        "overview": "Dry run plugged lessons, seen a dry run of another plugged lesson, and discussed plugged lessons.",
        "prep": "Room Setup:\r\n\r\n* make sure participants are sitting in their groups from unplugged dry run before lunch\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* computers\r\n* lesson assignments ",
        "short_title": "Dry Run"
    },
    "intro/dry-rung-unplugged-lesson": {
        "cs_content": "Participants have done a dry run of their unplugged lessons, seen a dry run of another unplugged lesson, and discussed unplugged lessons.",
        "description": "Dry run unplugged lessons, seen a dry run of another unplugged lesson, and discussed unplugged lessons.",
        "overview": "Dry run unplugged lessons, seen a dry run of another unplugged lesson, and discussed unplugged lessons.",
        "prep": "Room Setup:\r\n\r\n* Participants sitting in pods of 4 (2 groups of 2.) Each group having prepped a different lesson.\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* Lesson materials from prep session",
        "short_title": "Dry Run"
    },
    "intro/lunch-and-learn": {
        "description": "Lunch",
        "overview": "Lunch"
    },
    "intro/model-plugged-lesson": {
        "cs_content": "Teachers experience a plugged model lesson.",
        "description": "Experience a plugged lesson.",
        "overview": "Experience a plugged lesson.",
        "prep": "Room Setup:\n\n* In pairs for pair programming\n\nFacilitator Supplies:\n\n* [r cs-fundamentals-intro-workshop]\n* [r cs-fundamentals-intro-workshop-1]\n* Plugged Model Lesson Breakdowns:\n*  Plugged: [D.2 - Introduction to online puzzles](https://docs.google.com/document/d/1alxmijBjYyo0-d7Y0n52Fd-OvzGcI3PvgbKWsDPO3bk/edit#heading=h.b2wi16kpz2jy)\n*  Plugged: [B.7 - Programming in Maze](https://docs.google.com/document/d/1BHgfx3lI19ZLmUXilF-skaiuIAzW7m6n_XqkxNQ2Ra4/edit#)\n\nTeacher Materials:\n\n* Computers",
        "short_title": "Model"
    },
    "intro/model-unplugged-lesson": {
        "cs_content": "Teachers experience their first unplugged lesson.",
        "description": "Experience unplugged lesson",
        "overview": "Experience unplugged lesson",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* [r cs-fundamentals-intro-workshop]\n* [r cs-fundamentals-intro-workshop-1]\n* Unplugged Model Lesson Breakdowns:\n* Unplugged: [D.1 - Graph paper programming](https://docs.google.com/document/d/1cJL89l4veACkG5FJZQw0Iv1CHJsGipdopPI3SxrZJIA/edit#)\n*  Unplugged: [B.6 - My Robotic Friends](https://docs.google.com/document/d/15t5gEE2LjVdDzEG2V4bR3bdVj9Zt8WbleNWniU7GQTg/edit#)\n\nTeacher Materials:\n\n* Curriculum guide",
        "short_title": "Model"
    },
    "intro/prep-plugged-lesson": {
        "cs_content": "Practice using the materials to plan a plugged lesson.",
        "description": "Practice using the materials to plan a plugged lesson.",
        "overview": "Practice using the materials to plan a plugged lesson.",
        "prep": "Room Setup:\r\n\r\n* Make sure participants are sitting in their groups from unplugged dry run before lunch\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n* Lesson assignments  ",
        "short_title": "Prep"
    },
    "intro/prep-unplugged-lesson": {
        "cs_content": "Introduce dry runs and the materials for planning lessons. Then plan your first unplugged lesson.",
        "description": "Introduce dry runs and the materials for planning lessons. Then plan unplugged lesson.",
        "overview": "Introduce dry runs and the materials for planning lessons. Then plan unplugged lesson.",
        "prep": "Room Setup:\r\n\r\n* make sure participants are sitting in grade-banded groups of 4 (look at instructions in break)\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* Curriculum guide\r\n* Classroom materials (for making posters, slides, etc)\r\n* Computers",
        "short_title": "Prep"
    },
    "intro/reflect-on-unplugged-lessons": {
        "cs_content": "Understand how to navigate the website and set up their classes.",
        "description": "Understand how to navigate the website and set up classes.",
        "overview": "Understand how to navigate the website and set up classes.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* Computers \r\n* Class Roster",
        "short_title": "Site Nav"
    },
    "intro/teaching-csf-to-all-students": {
        "cs_content": "Discuss what it means to teach CS Fundamentals in a way that is accessible to all students.",
        "description": "Discuss what it means to teach CS Fundamentals in a way that is accessible to all students.",
        "overview": "Discuss what it means to teach CS Fundamentals in a way that is accessible to all students.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* [Equity video](https://www.youtube.com/watch?v=ZEL4GjElBU4)\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n\r\nTeacher Materials:\r\n\r\n* None",
        "short_title": "Equity"
    },
    "intro/welcome-to-cs-fundamentals": {
        "cs_content": "Overview of the workshop, the course and the day.",
        "description": "Overview of the workshop, the course and computer science.",
        "overview": "Overview of the workshop, the course and computer science.",
        "prep": "Room Setup:\r\n\r\n* Pods of 4 around the room with easy line of sight to the board/projector  (resource from sarahfair)\r\n* At each seat: \r\n* Curriculum guide, name tag, swag bag \r\n* At each table:\r\n* Post its, markers, pens, scratch paper, candy\r\n* Table tent with a table number (needed for lesson assignments, also helpful during discussion)\r\n* Posters up around the room (see below)\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n* Posters\r\n* In what context are you most interested in learning about CS Fundamentals? k, 1, 2, 3, 4, 5, teach all grades, not in the classroom (supporting teachers) \r\n* Computer science definition \r\n* Question parking lot\r\n* Poster with bit.ly to shared notes document\r\n\r\nTeacher Materials:\r\n\r\n* None",
        "short_title": "Intro"
    },
    "intro/wrap-up": {
        "cs_content": "Wrap up the day, thank people for coming, and have everyone take the survey.",
        "description": "Wrap up the day, thank people for coming, and have everyone take the survey.",
        "overview": "Wrap up the day, thank people for coming, and have everyone take the survey.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-fundamentals-intro-workshop]\r\n* [r cs-fundamentals-intro-workshop-1]\r\n* [Online workshop dashboard](https://studio.code.org/pd/workshop_dashboard/workshops)\r\n* [Workshop Dashboard How To Guide](https://docs.google.com/document/d/19K95qf39WjhSeurF3sPz5iRZW4TnPZ2qrKUrH4YXPjM/edit)\r\n\r\nTeacher Materials:\r\n\r\n* Swag Bags\r\n* Laptops\r\n* Remaining Parking Lot Questions",
        "short_title": "End"
    },
    "led.on/curriculum/algebra/videogames/2": {
        "cs_content": "In this lesson students get their first taste of the programming language and environment that they'll use throughout this course. While the environment and block-based language we're using here look a lot like things students may have seen in Scratch or the Hour of Code, it's important to understand that the kind of programming we're doing here is a bit different. In order to better align with the rules of Algebra we are following a programming paradigm known as [Functional Programming](https://en.wikipedia.org/wiki/Functional_programming). This difference may not matter to your students, but for those who have some existing programming experience you may ask them to research this different paradigm and report back on the similarities and differences.",
        "description": "Students will begin using Evaluation Blocks to explore the concept of math as a language, and more specifically, a programming language. By composing arithmetic expressions with Evaluation Blocks, students will be able to visualize how expressions follow the order of operations.",
        "overview": "Students will begin using Evaluation Blocks to explore the concept of math as a language, and more specifically, a programming language. By composing arithmetic expressions with Evaluation Blocks, students will be able to visualize how expressions follow the order of operations."
    },
    "led.on/curriculum/algebra/videogames/3": {
        "cs_content": "The programming language we are using in this course is a [strongly typed](https://en.wikipedia.org/wiki/Strong_and_weak_typing) language, meaning that we must explicity identify the types of data we're using.",
        "description": "To compute more than just numbers, students will need to learn about two new data types, Strings (any string of alphanumeric characters) and Images. Using these new data types, we'll compose programs that produce and manipulate images.",
        "overview": "To compute more than just numbers, students will need to learn about two new data types, Strings (any string of alphanumeric characters) and Images. Using these new data types, we'll compose programs that produce and manipulate images."
    },
    "led.on/curriculum/algebra/videogames/4": {
        "description": "Contracts provide a way for students to better understand and discuss functions. Through this lesson, students will look at known functions and come up with the contracts that describe those functions.",
        "overview": "Contracts provide a way for students to better understand and discuss functions. Through this lesson, students will look at known functions and come up with the contracts that describe those functions."
    },
    "led.on/curriculum/algebra/videogames/6": {
        "cs_content": "This lesson introduces students to the idea that computer programs in general, and video games in particular, are built on a grounding of basic mathematical concepts. By exploring the interactions of different characters in a video game, students will see that the world of a 2 dimensional video game is represented in software by a basic coordinate plane. With that knowledge we can begin to describe (and later program) the movement of game elements with relatively simple mathematical functions. ",
        "description": "Students discuss the components of their favorite video games and discover that they can be reduced to a series of coordinates. They then explore coordinates in Cartesian space, identifying the coordinates for the characters in a game at various points in time. Once they are comfortable with coordinates, they brainstorm their own games and create sample coordinate lists for different points in time in their own game.",
        "overview": "Students discuss the components of their favorite video games and discover that they can be reduced to a series of coordinates. They then explore coordinates in Cartesian space, identifying the coordinates for the characters in a game at various points in time. Once they are comfortable with coordinates, they brainstorm their own games and create sample coordinate lists for different points in time in their own game."
    },
    "led.on/curriculum/csfundamentals/course1/1": {
        "description": "At the root of all computer science is something called an algorithm. The word “algorithm” may sound like something complicated, but really it’s just a list of instructions that someone can follow to achieve a result. To provide a solid base for the rest of your students’ computer science education, we’re going to focus on building a secure relationship with algorithms.",
        "overview": "At the root of all computer science is something called an algorithm. The word “algorithm” may sound like something complicated, but really it’s just a list of instructions that someone can follow to achieve a result. To provide a solid base for the rest of your students’ computer science education, we’re going to focus on building a secure relationship with algorithms.",
        "prep": "- Watch the [r teacher-video-happy-maps].\r\n- Teacher Lesson Guide\r\n- Print one [Happy Maps: Single-Step Adventure](https://code.org/curriculum/course1/1/Activity1-HappyMaps.pdf) for each group\r\n- Print one [Move the Flurbs Assessment](https://code.org/curriculum/course1/1/Assessment1-HappyMaps.pdf) for each student"
    },
    "led.on/curriculum/csfundamentals/course1/2": {
        "description": "This lesson will help students realize that in order to give clear instructions, they need a common language. Students will practice controlling one another using a simple combination of hand gestures. Once they understand the language, they will begin to \"program\" one another by giving multiple instructions in advance.",
        "overview": "This lesson will help students realize that in order to give clear instructions, they need a common language. Students will practice controlling one another using a simple combination of hand gestures. Once they understand the language, they will begin to \"program\" one another by giving multiple instructions in advance.",
        "prep": "- Watch the [r teacher-video-move-it].\r\n- Teacher Lesson Guide\r\n- Print one [Move It, Move It: Multi-Step Adventure](https://levelbuilder.code.org/curriculum/course1/2/Activity2-MoveItMoveIt.pdf) activity pack on Cardstock for each group\r\n- Print [Assessment Worksheet: Move the Flurbs 2](https://levelbuilder.code.org/curriculum/course1/2/Assessment2-MoveIt.pdf) for each student"
    },
    "led.on/curriculum/csfundamentals/course1/3": {
        "description": "In this first online activity students will become familiar with basic mouse use and the block-based programming interface they will be using throughout the course. Students will begin by simply dragging images on screen and then progress to dragging puzzle pieces into the proper order.",
        "overview": "In this first online activity students will become familiar with basic mouse use and the block-based programming interface they will be using throughout the course. Students will begin by simply dragging images on screen and then progress to dragging puzzle pieces into the proper order."
    },
    "led.on/curriculum/csp/unit1/1": {
        "cs_content": "This activity plants the initial seed for students to think about the ways in which they might be able to solve some problems relevant to their lives with technological innovations.  The AP CS Principles framework describes 6 Computational Thinking Practices that need to be evident in the course.  This first lesson is more about beginning to engage with those practices - beginning to think, act, and behave like computer scientists.  In particular, the practices in which students should be engaged in this lesson are:\r\n\r\n- **P1: Connecting Computing**: Describe connections between people and computing. \r\n- **P5: Communicating**:  Describe computation and the impact of technology and computation.\r\n- **P6: Collaborating**: Foster a constructive, collaborative climate by facilitating the contributions of a team member; exchange knowledge and feedback with a partner or team member.",
        "description": "Welcome to Computer Science Principles! Groups make a “rapid” prototype of an innovative idea and share it. Students watch a brief video about computing innovations.",
        "overview": "Welcome to Computer Science Principles! The first lesson is about getting students excited about the course and connecting their own personal interests to computer science.  Students are asked to share something they know a lot about and teach it to a small group.  Groups make a “rapid” prototype of an innovative idea and share it.  Students watch a brief video about computing innovations.  The lesson ends with students logging into the Code.org CSP course web site, and answering a brief prompt about what “computer science” means to them.\r\n",
        "prep": "\r\n- Procure post-its or paper and tape\r\n- Procure poster paper for sharing innovations\r\n- Queue up CS is Changing Everything video\r\n- Setup section in Code Studio for this course\r\n- Have student sign-up link ready to share"
    },
    "led.on/curriculum/csp/unit1/2": {
        "cs_content": "One of the least understood things about the internet is how it works as a physical system.  [v Bit]s of information physically travel from one place to another. On the “real” internet bits are transmitted using a variety of different mediums, and most of the time a single bit physically travels over a variety of systems to get where it’s going.  Students should see the issues in the physical transmission of bits as a separate problem from interpreting and encoding the messages sent on top of those systems.\n\nWhile building and modifying their \"binary message devices\" students should recognize that it's easier to invent a system of communication that uses combinations of binary signals with a simple device, rather than making a new, or increasingly complex device for each new problem.  This lays the foundations for:\n\n * encoding complex information in computers using combinations of bits\n * developing clear communication protocols\n",
        "description": "Students collaborate in an iterative design process to make a \"bit sending device\" using classroom supplies and everyday objects.  They develop their own systems for encoding and sending simple binary messages over some physical distance.",
        "overview": "In this lesson students work in groups using classroom supplies and everyday objects to develop their own systems for encoding and sending simple binary messages, messages that only have two possible values. Students will think about what can be usefully conveyed in such a simple message and build a “device” to communicate the message over some physical distance. \r\nThen students are asked to consider how to use their binary messaging devices to send a more complex message - a message with more than two possibilities, say four, or eight, or even thousands of different messages. Students will collaborate in an iterative design process in the “maker ethos” of rapidly building and improving their “device” for sending messages.\r\n\r\n",
        "prep": "\r\n- *Optional* Print activity guide (see [teaching tip](#tip_printguide))\r\n- One box of “maker supplies” for each student group. Example supplies include:\r\n    - Small flashlights\r\n    - Simple noisemakers such as bells, triangles, or whistles\r\n    - Cups and string\r\n    - Slinky\r\n    - Legos\r\n    - Colored paper\r\n"
    },
    "led.on/curriculum/csp/unit1/3": {
        "cs_content": "There are two major connections that should be made in this lesson.  The first connection to make is that even though everyone’s binary message-sending devices are different, since they all are designed to send a binary message, all the devices can achieve two states, which we call state A and state B for the time being.  It also means that any one of them can be used to send any kind of message, as long as the messages are binary.  The second major connection to make is that in order to send messages a communication protocol must be established.  That means there must be an agreement between the sender and receiver about how messages will be formed, communicated, and interpreted.",
        "description": "Baker note 4.4.16: moving content from this lesson into previous lesson.\nIn a continuation of the previous lesson, students are asked to consider how to use their binary messaging devices to send a more complex message - a message with more than two possibilities - by modifying how they use their device, rather than by modifying the device itself. The result is that students have to invent systems of communication that use combinations of binary signals. This lesson will also introduce the term “bit” as another way to describe a binary message. This lays the foundations for a) encoding complex information in computers using combinations of bits as well as b) developing a communication protocol for transmitting those bits from one place to another.",
        "overview": "# Baker note 4.4.16: moving content from this lesson into previous lesson.\r\n\r\nIn a continuation of the previous lesson, students are asked to consider how to use their binary messaging devices to send a more complex message - a message with more than two possibilities - by modifying how they use their device, rather than by modifying the device itself. The result is that students have to invent systems of communication that use combinations of binary signals. This lesson will also introduce the term “bit” as another way to describe a binary message. This lays the foundations for a) encoding complex information in computers using combinations of bits as well as b) developing a communication protocol for transmitting those bits from one place to another.",
        "prep": "- [Forum](http://forum.code.org/c/csp-unit1/lesson3)\r\n- Binary message-sending device from previous lesson\r\n- Access to maker supplies"
    },
    "led.on/curriculum/csp/unit1/4": {
        "cs_content": "The major purpose of this lesson is to engage students in a rather challenging problem of engineering a physical network for digital communications. if you must communicate in binary by setting the state of some object (such as a wire) to one of its two possible states, merely defining “State A” and “State B” is insufficient because there is no way to distinguish between a single bit \"A\" and a string of \"AAA\" for example. Some element of time must be incorporated into a communication [v protocol] to make it functional for exchanging bits. This time-per-bit leads naturally to calculating a [v bitrate] for a given device, or a measure of how quickly a system transmits digital data.\r\n\r\nThis is the first lesson in which we use the Internet Simulator.  The Internet Simulator is a robust learning tool developed by Code.org specifically for Computer Science Principles, that has many different variants that you will see in the first two units of the course. It was designed to give students a hands-on experience experimenting with (and solving) different kinds of problems associated with networked computers and the Internet.  A goal of using the internet simulator was put best by a student near the conclusion of Unit 1 who said \"Whoa, I feel like I just invented the Internet!\"",
        "description": "Students use the Internet simulator for the first time in this lesson. It is configured to represent two parties connected on a single shared wire that only hold one of two possible states. Students invent a binary call-response protocol that can overcome the coordination, timing and synchronization problems that arise when forced to use such a truly binary system.",
        "overview": "Students are introduced to the Internet Simulator, a tool they will return to many times in the first two units of the course. Today, the Internet Simulator will be used to simulate a single shared wire, connecting two people.  The wire can only be in one of two possible states (state A or state B) and either partner may set or read the state of the wire at any time, but this is the only way in which students may communicate.  Students must invent a binary call-response [v protocol] using this system. Coordination, speed and timing are problems that need to be solved. At the conclusion of the lesson, students compete to demonstrate the speed and accuracy of their protocols, and calculate the [v bit rate] of their message exchange.",
        "prep": "\r\n* Code Studio section setup (required for using Internet Simulator)"
    },
    "led.on/curriculum/csp/unit1/5": {
        "cs_content": "Binary information must be encoded in some way before transmission over the Internet. There are a few methods for encoding bits that are used far more often than others. Copper wire is used to transmit binary messages using electricity - a voltage on the wire means one state, and no voltage means the other.  Fiber-optic cables, on the other hand, use light (on or off) to transmit a binary message.  Radio waves can be used to send binary information by altering the frequency or amplitude of the wave. Each method has benefits and drawbacks which make it better suited for some situations than others. Together these different systems form the network of bit-sending devices we know as the Internet. A single bit sent from a cell phone in North America to someone in China probably travels over radio waves, fiber-optic cable, and copper wire while on its journey. ",
        "description": "In this lesson, students will be introduced to how bits are transmitted over the most common mediums (copper wire, fiber-optic cable, and radio waves) used to connect devices on the Internet.  They then chose a device that transmits bits and research that device and the system it uses.  Students create a poster presenting their findings, and the lesson concludes with a gallery walk of the posters. ",
        "overview": "In this lesson, students will be introduced to how bits are transmitted over the most common mediums (copper wire, fiber-optic cable, and radio waves) used to connect devices on the Internet.  They then chose a device that transmits bits and research that device and the system it uses.  Students create a poster presenting their findings, and the lesson concludes with a gallery walk of the posters. \r\n",
        "prep": "\r\n* 8.5 x 11 or poster paper\r\n* materials for creating poster\r\n"
    },
    "led.on/curriculum/csp/unit3/1": {
        "cs_content": "This is the first in a 3-lesson sequence in which we attempt to make connections between programming languages, the creative act of programming, and algorithms.  \r\n\r\nThe main activity is a derivative of a classic strategy for beginning to learn about programming - writing precise instructions for another person to do just about *anything* - making a peanut butter and jelly sandwich, a simple line drawing, an arrangement of objects - is challenging.  Human language is fraught with ambiguities and assumptions that machines (computers) simply cannot handle.\r\n\r\nThus, the first step we take is to establish the need for programming languages.  Writing down a precise set of instructions to build a small lego structure, as we do in this lesson, is nearly impossible…unless you can agree on certain language constructs ahead of time, and how they will be interpreted.  **The main purpose of the lesson is to expose why programming languages are necessary, and how they come into being**.\r\n\r\nWhen you formalize language or commands that describe actions you are making a kind of code.  This is also necessary for computers, which are simply machines that can perform a number of different tasks.  In order to write instructions for them to do something you must agree on the “code” and each action must have a precise, unambiguous meaning.  **This is a programming language.**   Novices might think that a programming language looks like an archaic, impenetrable mass of abstract word groupings, but all programming languages are derived from the *human* need to concisely give instructions to a machine.  ",
        "description": "Students write instructions for building a small arrangement of LEGO® blocks and trade with a classmate to see if they can follow them to construct the same arrangement. The lesson highlights the inherent ambiguities of human language deriving the need for a well-defined programming language which leaves no room for interpretation.",
        "overview": "At the beginning of a new unit we jump right into an activity - building a small arrangement of LEGO® blocks and then creating text instructions a classmate could follow to construct the same arrangement. Groups will then trade instructions to see if they were clear enough to allow reconstruction of the original arrangement. The wrap-up discussion is used to highlight the inherent ambiguities of human language and call out the need for the creation of a programming language which leaves no room for interpretation.",
        "prep": "\r\n* Blocks for the class (~5 per team/student)\r\n* Paper for recording instructions\r\n"
    },
    "manipulating-and-visualizing-data/check-your-assumptions": {
        "cs_content": "In this lesson we look deeper into why we separate the **what** from the **why** when looking at data.  The main purpose here is to raise awareness of the assumptions that we (all people) make when looking at data and try to call them out. Some of these assumptions lie hidden beneath the surface and we want to shed some light on them by looking at some examples from the news. This is a useful mode of reflection that will serve students well when doing reflective writing on the performance tasks.  \r\n\r\nAnalyzing and interpreting data will typically require some assumptions to be made about the accuracy of the data and the cause of the relationships observed within it. When decisions are made based on a collection of data, they will often rest just as much on that set of assumptions about the data as the data itself. Identifying and validating  (or disproving) assumptions is therefore an important part of data analysis. Furthermore, clear communication about how data was interpreted should also include an account of the assumptions made along the way.",
        "description": "Students examine the assumptions they make when interpreting data and visualizations by first reading a report about the \"Digital Divide\" which challenges the assumption that data collected online is representative of the population at large. Students also evaluate a series of scenarios in which data-driven decisions are made based on flawed assumptions.",
        "overview": "This lesson asks students to consider carefully the assumptions they make when interpreting data and data visualizations. The class begins by examining how the Google Flu Trends project tried and failed to use search trends to predict flu outbreaks. They will then read a report on the Digital Divide which highlights how access to technology differs widely by personal characteristics like race and income. This report challenges a widespread assumption that data collected online is representative of the population at large. To practice identifying assumptions in data analysis, students are provided a series of scenarios in which data-driven decisions are made based on flawed assumptions. They will need to identify the assumptions being made (most notably those related to the digital divide) and explain why these assumptions lead to incorrect conclusions."
    },
    "manipulating-and-visualizing-data/cleaning-data": {
        "cs_content": "The main purpose here is have students independently apply some of the data manipulation skills (in spreadsheets) that they've learned over the past few lessons, to a new dataset that is relatively uncurated.  This is the beginning of the process of \"extracting knowledge from data\": look at the data and clean it up so that you can process it using computational tools.\r\n\r\nUsing computational tools to analyze data has made it much easier to find trends and patterns in large datasets. When preparing data for this kind of analysis, however, it’s important to remember that the computer is much less “intelligent” than we might imagine. Small discrepancies in the data may prevent accurate interpretation of trends and patterns or can even make it impossible to use the data in computation in the first place. Cleaning data is therefore an important step in analyzing it, and in many contexts, it may actually take the largest amount of time.",
        "description": "Students begin working with the data that they have been collecting for the Class Data Tracker project by first \"cleaning\" it to prepare it for visualization and other analyses.  Each team makes their own copy of the data to examine, correct errors, categorize ambiguous items, and perform other cleaning tasks.",
        "overview": "In this lesson, students begin working with the data that they have been collecting since the first lesson of the chapter in the class \"data tracker.\" They are introduced to the first step in analyzing data: cleaning the data. Students will follow a guide in Code Studio, which demonstrates the common techniques of filtering and sorting data to familiarize themselves with its contents. Then they will correct errors they find in the data by either hand-correcting invalid values or deleting them. Finally they will categorize any free-text columns that were collected to prepare them for analysis. This lesson introduces many new skills with spreadsheets and reveals the sometimes subjective nature of data analysis.\r\n",
        "prep": "\r\n* Prepare data collected from survey to share with students. Ensure that a “Teacher only” master copy is kept safely somewhere.\r\n* Student partners will carry through the next lesson and Practice PT. You may wish to select these pairs beforehand.\r\n* Review the [Data Tools Resources](https://code.org/educate/csp/unit2/datatools) for this lesson (including Excel support)\r\n"
    },
    "manipulating-and-visualizing-data/creating-summary-tables": {
        "cs_content": "Making a summary (pivot) table is often considered an advanced technique.  Once you get used to it, however, it's an extremely powerful computational tool that is available in most spreadsheet software.  The purpose here is to acquaint students with using such a tool and to expose this power.  Also creating summary tables is a direct tie to the CSP Framework essential knowledge statement: *3.1.3C Summaries of data analyzed computationally can be effective in communicating insight and knowledge gained from digitally represented information.*\r\n\r\nThe other purpose here is that creating a summary table is a good example of making a computational artifact for the **Explore Performance Task**.  For that performance task students might find some raw data while doing research and might create a new artifact that is a summary table of the data that reveals some interesting aspect of it. Using a tool like a spreadsheet to make summary tables let's you explore data in deep ways, quickly and easily.\r\n\r\n\r\nBeing able to manipulate data is an important skill for computer scientists.  Being able to create summary tables from larger datasets represents a form of computational thinking.  To make a good summary table, one must have a good sense of the data, be able to hypothesize about what might be interesting to look at, and then have the skills to use a computational tool to create it.  While seemingly mundane, a spreadsheet is an extremely powerful tool for working with data.  Understanding the features of a spreadsheet tool, and what kinds of computations it can perform, can save you a lot of time and energy from either doing such things “by hand” or writing your own program to do it.\r\n",
        "description": "Students learn how create summary tables (also known as pivot tables) from some raw datasets provided in a spreadsheet tool. Then students create and use summary tables to investigate data they’ve collected as a class.",
        "overview": "In this lesson students learn how create their own summary tables from raw data.  A summary table typically represents one or more aggregations (groupings of items) and computations that are performed on the raw dataset.  In most spreadsheet programs, a summary table is called a pivot table.  In the lesson, students learn how to make pivot tables in Google Sheets using a provided dataset.  Then students turn to the data they’ve collected as a class and, with their partner, use pivot tables to investigate it further.\r\n",
        "prep": "* Review [Data Tools Resources](https://code.org/educate/csp/unit2/datatools) (including Excel support)\n* Familiarize yourself with the tutorials about making pivot tables in Code Studio.\n* Ensure sutudents have access to the dataset they cleaned in the previous lesson.\n"
    },
    "manipulating-and-visualizing-data/discover-a-data-story": {
        "cs_content": "Being able to look at large sets of data and use visualization as a tool for discovery is a common task that many people who work with data do on a daily basis.  A computer scientist should have decent facility with using tools opening and browsing large datasets, and doing some cursory exploration to see what’s there.  The computer scientist should be familiar enough with the tools to, over time, develop some instincts about data, how it’s collected, the kinds of formats it comes in, and how that affects what can or cannot be done to visualize it.",
        "description": "Students collaboratively investigate some datasets (provided)  to “discover a data story.” Students choose one dataset, create a visualization, identify a trend, and accurately write about it.",
        "overview": "In this lesson, students will collaboratively investigate some datasets and use visualization tools to “discover a data story.”  The lesson assumes that students know how to use some kind of visualization tool - in the previous lesson we used the charting tools of a basic spreadsheet program.  Students should be working with a partner but without much teacher hand-holding. Most of the time should be spent with students poking around the data and trying to discover connections and trends using data visualization tools. It is up to them to discover a trend, make a chart, and accurately write about it.",
        "prep": "\n* Print a copy of [r activity-guide-discover-a-data-story] for each student (or provide link)\n* Print a copy of [r data-visualization-101] for each student (or provide link) NOTE: this may have already been printed for lesson 10"
    },
    "manipulating-and-visualizing-data/finding-trends-with-visualizations": {
        "cs_content": "The two main purposes of this lesson are:\n\n 1. Navigating and using a real data tool (Google Trends, see below) that is external to the course\n 2. Getting acquainted with talking and writing about data.  In particular we want to:\n    * Draw a distinction between describing **what** the data shows and describing **why** it might be that way\n    * In other words: describe connections and trends in data separate from drawing conclusions.\n    * We want students to get in the habit of separating the **what** from the **why** when it comes to talking and writing about data\n\nAs a bit of foreshadowing, the next lesson looks deeper into assumptions that people make about data that can lead to unintentional consequences and even exacerbate some of society's divisions.\n",
        "description": "Students use the Google Trends tool in order to identifying patterns in historical search data. Students present their findings, differentiating between explanations of what the data shows versus plausible explanations for discovered patterns. ",
        "overview": "Students use the Google Trends tool in order to visualize historical search data. They will need to identify interesting trends or patterns in their findings and will attempt to explain those trends, based on their own experience or through further research online. Afterwards, students will present their findings to ensure they are correctly identifying patterns in a visualization and are providing plausible explanations of those patterns.",
        "prep": "\r\n* Use the [Google Trends](https://www.google.com/trends/) tool to familiarize yourself."
    },
    "manipulating-and-visualizing-data/good-and-bad-data-visualizations": {
        "cs_content": "An important skill is the ability to critically evaluate information. As our world is increasingly filled with data, more and more the information from that data is conveyed through visualizations. Visualization is useful for both **discovery** of connections and trends and also **communication** - both are potentially aspects of the Explore Performance Task. In this lesson we will focus on the communication aspects of visualization.\n\nInterpreting data visualizations is not typically thought of as a core computer science skill, but it is certainly an important one in an age of digital data. Computing has enabled massive amounts of information to be automatically collected, aggregated, analyzed, and visualized. Visualizations are useful in helping humans understand large amounts of data quickly, and they are useful communication tools when presenting findings about a collection of data. Not all visualizations are created equal, however, and in many cases the type of visualization used may distract or even mislead the reader. \n\nAs both creators and consumers of data visualizations, students need to be on the lookout for these common pitfalls. This will allow them to be savvier readers of data visualizations, and more effective communicators when creating visualizations of their own.",
        "description": "As a precursor to creating their own data visualizations, students examine collections of (mostly bad) data visualizations, rate them and discuss the characteristics of good v. bad visualizations.",
        "overview": "This is a pretty fun lesson that has two main parts. First students warm up by reflecting on the reasons data visualizations are used to communicate about data. This leads to the main activity in which students look at some collections of (mostly bad) data visualizations, rate them, explain why a good one is effective, and also suggest a fix for a bad one.  \r\n\r\nIn the second part of class students compare their experiences and create a class list of common faults and best practices for creating data visualizations.  Finally, students review and read the first few pages of **Data Visualization 101: How to design charts and graphs** to see some basic principles of good data visualizations and see how they compare with the list the class came up with.",
        "prep": "\r\n* Print a copy of [r data-visualization-scorecard] for each student."
    },
    "manipulating-and-visualizing-data/introduction-to-data": {
        "cs_content": "This lesson introduces many of the lessons and themes that will run through the unit. Students are introduced to the Class Data Tracker and the fact that they will be collecting and analyzing their own data in a couple weeks. They also begin thinking about the many ways data impacts their lives and how it can be used. While the primary goal of this lesson is to get ideas and processes in place for the rest of the unit, there are many places where students can start asking interesting questions about where and how data is collected, who is collecting it, and how they are using it.",
        "description": "Students examine sources of data in the world around them how that data is collected. The Class Data Tracker project is introduced, and students predict what they will find after all the data has been collected.\n",
        "overview": "In this kickoff to the Data Unit, students begin thinking about how data is collected and what can be learned from it. To begin the lesson, students will take a short online quiz that supposedly determines something interesting or funny about their personality. Afterwards they will brainstorm other sources of data in the world around them, leading to a discussion of how that data is collected. This discussion motivates the introduction of the Class Data Tracker project that will run through the second half of this unit. Students will take the survey for the first time and be shown what the results will look like. To close the class, students will make predictions of what they will find when all the data has been collected in a couple weeks.\r\n",
        "prep": "\n* Review the [Data Tools Resources](https://code.org/educate/csp/unit2/datatools) for this lesson (including Excel support)\n* Teacher Setup for Google Forms (see Teacher Setup in Teaching Guide)"
    },
    "manipulating-and-visualizing-data/making-data-visualizations": {
        "cs_content": "Being able to create meaningful data visualizations is extremely important in order to effectively communicate information about large data sets. It's also important to be able to use visualizations to simply “look” at data that is too complex to make sense of by looking at the raw data alone.  Any computer scientist working with data should have some skills and facility with producing visualizations of the data to get a sense of what it contains.  Visualizing the data allows you to see patterns, trends or relationships you might otherwise not.\r\n\r\nThe most important piece of this lesson is not learning to create the prettiest chart; it’s about using charts to “tell the story” of what’s really going on in the data. Different charts are more or less appropriate for communicating this story, depending on the data.  The point of having students explore different chart types is to help them build visualizations that reveal trends or connections in the data that are too hard to see by just looking at a data table in a spreadsheet. ",
        "description": "Students follow a guide to learn how to make scatter, bar, and line charts out of provided data using a spreadsheet tool (such as Google sheets or MS Excel).",
        "overview": "Now that students have had the chance to see and evaluate various data visualizations, they will learn to make visualizations of their own. This lesson teaches students how to build visualizations from provided datasets. The levels in Code Studio provide a detailed walkthrough of how to use Google Sheets to create several different kinds of charts. While this lesson focuses on the Google Sheets tool, other tools may be substituted at the teacher’s discretion, and MS Excel support is coming soon to the lesson.\r\n\r\nThe main activity teaches students to build different chart types (scatter, line, and bar charts) from a single data set. It should be emphasized to students that the purpose of this lesson is to explore and experiment with creating different types of visualizations, not to build the perfect chart. Students will have a chance to create and customize their own charts. At the end of class, students compare their custom visualizations with those of their classmates.\r\n",
        "prep": "\r\n* [Data Tools Resources](https://code.org/educate/csp/unit2/datatools) (including Excel support)"
    },
    "manipulating-and-visualizing-data/practice-pt-tell-a-data-story": {
        "cs_content": "Students in this lesson will be telling their own story with a set of data about themselves. The hope is that using personal data will both motivate the exploration of the dataset and provide students with intuitions about the kinds of patterns or trends to explore. This Practice PT reflects many of the practices students will need to use on the actual AP® Performance Tasks, in particular the Explore PT. On that PT, students will need to create an artifact with a computational tool and explain both how it was created and what it is showing. \r\n\r\nWhile students will not be required to create a chart or even necessarily visualize data for the PT, creating a data visualization would make for a strong computational artifact. This activity is designed to provide practice with one way to complete that aspect of the PT. Additionally students should leave this Practice PT familiar with many of the Learning Objectives related to the challenges of manipulating and analyzing data, as they will have now gone through the lifecycle of collecting, cleaning, analyzing, and visualizing data themselves.\r\n\r\n_AP® is a trademark registered and/or owned by the College Board, which was not involved in the production of, and does not endorse, this curriculum._\r\n",
        "description": "Students continue to analyze their class tracker project data to discover, visualize, write about and present a trend or pattern they find. The writing prompts are reflective of prompts from the AP Explore Performance Task.",
        "overview": "For this Practice PT students will analyze the data that they have been collecting as a class in order to demonstrate their ability to discover, visualize, and present a trend or pattern they find in the data. Leading up to this lesson, students will have been working in pairs to clean and summarize their data. Students should complete this project individually but can get feedback on their ideas from their data-cleaning partner.\r\n\r\n**Note**: This is NOT the official AP® Performance Task that will be submitted as part of the Advanced Placement exam; it is a practice activity intended to prepare students for some portions of their individual performance at a later time.\r\n"
    },
    "monday/break": {
        "description": "Break",
        "short_title": "Break"
    },
    "monday/break-1": {
        "description": "Break",
        "short_title": "Break"
    },
    "monday/break-2": {
        "description": "Break",
        "short_title": "Break"
    },
    "monday/break-3": {
        "description": "Break",
        "short_title": "Break"
    },
    "monday/break-4": {
        "description": "Break",
        "short_title": "Break"
    },
    "monday/end-of-day-wrap-up": {
        "cs_content": "* Wrap up the themes of the day\r\n* Pulse check on teachers through gots and needs/survey",
        "description": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "overview": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* [r teachercon-monday-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* Computers\n* [r teacher-daily-digest-and-master-notes]\n"
    },
    "monday/lesson-assignments": {
        "cs_content": "* Remind teachers of the TLO process and how lesson planning plays in.\r\n* Get teachers headed to the correct lesson planning room.",
        "description": "Teachers find out which TLO lessons they are going to teach and where to go for lesson planning.  ",
        "overview": "Teachers find out which TLO lessons they are going to teach and where to go for lesson planning.  ",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies and Prep:\n\n* [r teachercon-monday-slide-deck]\n* Access to [r lesson-planning-group-assignments] (Back Up)\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Name badge with Lesson planning room assignment on the back\n* [r cs-discoveries-curriculum-guide]\n* For Section Links: [r teacher-daily-digest-and-master-notes]\n"
    },
    "monday/lesson-planning": {
        "cs_content": "Understanding the lesson and the resources available in the lesson.\r\n\r\n* Try activities and tools\r\n* Watch videos\r\n* Read lesson plan\r\n* Look through linked resources\r\n",
        "description": "Teachers start preparing to teach their TLO lesson by getting familiar with the activities and resources in the lesson.",
        "overview": "Teachers start preparing to teach their TLO lesson by getting familiar with the activities and resources in the lesson.",
        "prep": "Room Setup:\n\n* Everyone is sitting at a table with their lesson planning group from their TLO room.\n\nFacilitator Supplies and Prep:\n\n* [r teachercon-monday-slide-deck]\n* Printed Activity Guides & Lesson Plans to Hand Out\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r lesson-planning-guide]\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]\n\n\n"
    },
    "monday/lunch": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "monday/lunch-1": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "monday/model-lesson-1": {
        "cs_content": "* Set the tone for TLO sessions for the week\r\n* Demonstrate best practices with an unplugged lesson\r\n* Demonstrate the problem solving process and how it is a major focus of the course\r\n* Demonstrate an worksheet and discussion-based activity plus the teaching strategies used in these situations\r\n* Demonstrate collaborative classroom culture CS Discoveries is trying to create\r\n",
        "description": "Facilitators model a lesson from the curriculum. Teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "Facilitators model a lesson from the curriculum. Teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Problem solving process up in the room on poster\n* Put learners in groups of 2 to 4 - probably just at their table.\n\nFacilitator Supplies and Prep:\n\n* Decide which facilitator teaches the lesson\n* Facilitator who is teaching should have filled in the lesson planning guide for that lesson on page 25-27 of the [r csd-teachercon-facilitation-guide]\n* Decide which facilitator debriefs the lesson\n* [r teachercon-monday-slide-deck]\n* Printed copies of [r solving-problems]\n* Teaching Group Reflection Questions Card\n\nTeacher Materials:\n\n* [r teacher-daily-digest-and-master-notes]\n* [r cs-discoveries-curriculum-guide]"
    },
    "monday/model-lesson-2": {
        "cs_content": "* Set the tone for TLO sessions for the week\r\n* Demonstrate best practices with an unplugged lesson\r\n* Demonstrate input-store-process-output model and how we begin to have students investigate this\r\n* Demonstrate a inquiry-based problem solving lesson and the challenges of teaching these types of lessons, including the fact that students don't need to come up with the \"right\" answer to get the learning in this lesson\r\n",
        "description": "Facilitators model a lesson from the curriculum. Teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "Facilitators model a lesson from the curriculum. Teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Decks of cards (at least 1 per 8 learners) with face cards removed\n* Teachers sitting in pairs\n\nFacilitator Supplies and Prep:\n\n* Decide which facilitator teaches the lesson\n* Facilitator who is teaching should have filled in the lesson planning guide for that lesson on page 25-27 of the [r csd-teachercon-facilitation-guide]\n* Decide which facilitator debriefs the lesson\n* [r teachercon-monday-slide-deck]\n* In slides but if you need it here is the link to [r what-makes-a-computer-a-computer-1]\n* Printed copies of [r card-sorting-algorithm]\n* Teaching Group Reflection Questions Card\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]\n\n\n\n\t\n\n\n\n"
    },
    "monday/overview-of-cs-discoveries": {
        "cs_content": "* Kick off TeacherCon.\r\n* Start getting people to meet each other\r\n* Go over what will be covered this week\r\n* Set context of why we are here\r\n* Set context of what CS Discoveries is\r\n* Introduce Unit 1",
        "description": "The kick off session for the week. Introduces the course and professional learning program to teachers. They also spend a little time starting to get to know people from their region.",
        "overview": "The kick off session for the week. Introduces the course and professional learning program to teachers. They also spend a little time starting to get to know people from their region.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* Before day add the attendance link to the slides!\n* [r csd-teachercon-facilitation-guide]\n* [r teachercon-monday-slide-deck]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* Name Badge with TLO room on it\n* [r teacher-daily-digest-and-master-notes]"
    },
    "monday/what-do-you-bring-to-the-room": {
        "cs_content": "This sessions is meant to bring together teachers with different backgrounds and expose the different strengths they bring to the room.\r\n",
        "description": "Teachers in the TLO room get to know each other and set norms for the week.",
        "overview": "Teachers in the TLO room get to know each other and set norms for the week.",
        "prep": "Room Setup:\n\n* Introductions Posters\n* Create a poster with the map of the USA or State (if everyone is from one state) that everyone can put a post it on to say where they are from\n* Create a poster with graph number of years of teaching experience\n* Create a poster with graph of number of years of computer science experience (any kind)\n* Create a poster with the grades from 6th to 12th and create a bar chart of the breakdown of teachers in your room\n* Create a poster that just says random skills\n* Poster for Question Parking Lot\n* Post-it notes on each table\n\nFacilitator Supplies:\n\n* [r teachercon-monday-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n* Poster Paper (for creating a norms poster)\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "other-course/debugging-relay-programming": {
        "cs_content": "There are many important components to this lesson. Students will be able to run around and get their wiggles out while building teamwork, programming, and debugging skills. Teamwork is very important in computer science. While [r pair-programming-vid] is common, it is more common for computer scientists to work in teams. These teams write and debug code as a group rather than individuals. In this lesson, students will learn to work together while being as efficient as possible. \r\n\r\nThis activity also provides a sense of urgency that will teach them to balance their time carefully and avoid mistakes, but not to fall too far behind.",
        "description": "Remember at the beginning of the course when you made drawings with code? In this lesson, you will be working with a team to do something very similar!",
        "overview": "This activity will begin with a short review of \"Graph Paper Programming,\" then will quickly move to a race against the clock, as students break into teams and work together to write a program one instruction at a time.",
        "prep": "- Watch the [r teacher-video-relay-programming].\r\n- Locate a wide open space for this activity, such as the gym or outdoor field.\r\n- Print out one [r csf-relay-programming-activity-packet] for each group.\r\n- Print one [r csf-relay-programming-assessment] for each student.\r\n- Supply each group with plenty of paper and pens/pencils.\r\n- Make sure every student has a [r think-spot-journal]."
    },
    "other/artist-binary": {
        "cs_content": "Students will now get to have some real fun making images with binary. This lesson will stretch a student's critical thinking and creativity by asking the students to find patterns that are not always obvious. At the end of the set of puzzles, students will have the opportunity to create their own designs with binary on a 16x16 grid!",
        "description": "Direct your own artist to create a binary image using only commands to turn pixels on and off.",
        "overview": "Binary is extremely important in the world of computers. The majority of computers today store all sorts of information in binary form. This lesson helps demonstrate how it is possible to take something from real life and translate it into a series of ons and offs. Students will build binary images in Artist by translating 0s and 1s to offs and ons (or blacks and whites).",
        "prep": " - Play through [r csf-course-d] to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "other/nested-loops-project-in-artist": {
        "cs_content": "In this series, students will get practice nesting loops while creating images that they will be excited to share. \r\n\r\nBeginning with a handful of instructions, students will make their own decisions when it comes to creating designs for repetition.  They will then spin those around a variety of ways to end up with a work of art that is truly unique.",
        "description": "Here you will be using nested loops to make cool projects to show to your family and friends.",
        "overview": "Now that students know how to layer their loops, they can create so many beautiful things.  This lesson will take students through a series of exercises to help them create their own portfolio-ready images using Anna and Elsa's excellent ice-skating skills!",
        "prep": " - Play through the [r csf-course-d] corresponding to this lesson to find and potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "plugged/code-with-anna-and-elsa-an-hour-of-code-tutorial": {
        "cs_content": "This lesson introduces the core CS concepts of coding and programming (using blocks), as well as simple debugging techniques.",
        "description": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson has been designed for learners in the middle grades, ages 10-13, but can be adapted for younger or older learners using the differentiation suggestions provided. Students should have a basic understanding of simple geometry and drawing angles.",
        "overview": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson has been designed for learners in the middle grades, ages 10-13, but can be adapted for younger or older learners using the differentiation suggestions provided. Students should have a basic understanding of simple geometry and drawing angles.",
        "prep": "### One Week Before Your Hour of Code\r\n\r\n- Review the [Hour of Code Educator Guide](http://hourofcode.com/resources/how-to/) and [Best Practices from Successful Educators](http://www.slideshare.net/TeachCode/hour-of-code-best-practices-for-successful-educators-51273466) in order to begin to plan your Hour of Code event. \r\n- [Register your Hour of Code event](http://hourofcode.com) if you’d like to receive swag or classroom support.\r\n- Review and complete the online tutorial yourself: [Coding with Anna and Elsa](https://studio.code.org/s/frozen/stage/1/puzzle/1) \r\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of your Hour of Code.\r\n- Review the supplementary lesson plan, [\"The Drawing Machine\"](https://code.org/curriculum/misc/hocunplugged/Teacher) to determine whether or not you'd like to lead this lesson in advance of your Hour of Code.\r\n\r\n### One Day Before Your Hour of Code\r\n\r\n- Write the words “coding”, “programming” and “debugging” on the board or add them to your word wall if you have one.\r\n- Write the words \"Computer Science\" in the middle of your board or on piece of paper at the center of a bulletin board. This will serve as your [\"mind map\"](https://en.wikipedia.org/wiki/Mind_map) for the Getting Ready and Assessment activities.\r\n- Have protractors available for students new to measuring angles\r\n- Each student who completes the activity should receive a certificate. [Print one](http://code.org/certificates) for everyone in advance to make this easier at the end of your Hour of Code.\r\n"
    },
    "plugged/intro-to-app-lab": {
        "cs_content": "This lesson is your students' first step with App Lab. The tutorial itself should be an approachable introduction to a powerful tool with broad functionality. Students should have a positive experience during the tutorial and more importantly should be motivated to keep building in App Lab. They are only scratching the surface of what the tool is capable of here, so afterwards they should use the code.org/applab page or the project gallery to get inspired for more complex types of projects they want to make.",
        "description": "Tutorial Summary: This tutorial is designed to quickly introduce the App Lab programming environment as a powerful tool for building and sharing apps. The tutorial itself teaches students to create and control buttons, text, images, sounds, and screens in JavaScript using either blocks or text. At the end of the tutorial students are given time to either extend a project they started building into a \"Choose Your Own Adventure\", \"Greeting Card\", or \"Personality Quiz\" app. They can also continue on to build more projects featured on the code.org/applab page. ",
        "overview": "**Tutorial Summary:** This tutorial is designed to quickly introduce the App Lab programming environment as a powerful tool for building and sharing apps. The tutorial itself teaches students to create and control buttons, text, images, sounds, and screens in JavaScript using either blocks or text. At the end of the tutorial students are given time to either extend a project they started building into a \"Choose Your Own Adventure\", \"Greeting Card\", or \"Personality Quiz\" app. They can also continue on to build more projects featured on the code.org/applab page. \n\n**Age Appropriateness:** The tutorial is designed for students over 13. Because it allows students to upload custom sounds and images, young students should not use this without supervision. To protect students privacy, if your students are under 13, they will not be able to use this tutorial unless you first set up accounts for them in a section you manage.\n\n**Checking Correctness:** This tutorial will not tell students whether they completed the level correctly. Encourage students to use the target images and directions provided in every level to know if they are on the right track. If students want to move on past a particularly tricky level they can simply click \"Finish\" and continue on.\n\nHave fun completing your Hour of Code with App Lab!\n\n",
        "prep": "### One Week Before Your Hour of Code\n\n- Review the [Hour of Code Educator Guide](http://hourofcode.com/resources/how-to/) and [Best Practices from Successful Educators](http://www.slideshare.net/TeachCode/hour-of-code-best-practices-for-successful-educators-51273466) in order to begin to plan your Hour of Code event. \n- [Register your Hour of Code event](http://hourofcode.com) if you’d like to receive swag or classroom support.\n- Review and complete the online tutorial yourself\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of your Hour of Code.\n\n### One Day Before Your Hour of Code\n\n- Print one or more of the [Exit Ticket examples](https://docs.google.com/a/code.org/document/d/1ylIlO7Pppk6W3Jt58VHS5mjvnshg9URvj3iCU0Ok6qY/edit?usp=sharing) at the end of this lesson plan, or create your own. \n- Each student who completes the activity should receive a certificate. [Print one](http://code.org/certificates) for everyone in advance to make this easier at the end of your Hour of Code.\n"
    },
    "plugged/make-a-flappy-game": {
        "cs_content": "This lesson introduces the core CS concepts of coding and programming (using blocks), as well as simple debugging techniques.",
        "description": "In this lesson, learners get an introductory experience with computer science and create a game using basic block code.This lesson has been designed for learners in the middle grades, ages 10-16, but can be adapted for younger or older learners using the differentiation suggestions provided.",
        "overview": "In this lesson, learners get an introductory experience with computer science and create a game using basic block code.This lesson has been designed for learners in the middle grades, ages 10-16, but can be adapted for younger or older learners using the differentiation suggestions provided.",
        "prep": "### One Week Before Your Hour of Code\r\n\r\n- Review the [Hour of Code Educator Guide](http://hourofcode.com/resources/how-to/) and [Best Practices from Successful Educators](http://www.slideshare.net/TeachCode/hour-of-code-best-practices-for-successful-educators-51273466) in order to begin to plan your Hour of Code event. \r\n- [Register your Hour of Code event](http://hourofcode.com) if you’d like to receive swag or classroom support.\r\n- Review and complete the online tutorial yourself: [Make a Flappy Game](https://studio.code.org/flappy/1) \r\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of your Hour of Code.\r\n\r\n### One Day Before Your Hour of Code\r\n\r\n- Write the words “coding”, “programming” and “debugging” on the board or add them to your word wall if you have one.\r\n- Each student who completes the activity should receive a certificate. [Print one](http://code.org/certificates) for everyone in advance to make this easier at the end of your Hour of Code.\r\n"
    },
    "plugged/minecraft-hour-of-code": {
        "cs_content": "This lesson introduces the core CS concepts of coding and programming (using blocks), as well as simple debugging techniques.",
        "description": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson works well for any students old enough to read (ages 6+). Younger learners will probably not finish the tutorial, but will have lots of fun working through the puzzles for an hour. High school students will mostly finish the tutorial and have some time to play on the free play level at the end.",
        "overview": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson works well for any students old enough to read (ages 6+). Younger learners will probably not finish the tutorial, but will have lots of fun working through the puzzles for an hour. High school students will mostly finish the tutorial and have some time to play on the free play level at the end.",
        "prep": "### One Week Before Your Hour of Code\r\n\r\n- Review the [Hour of Code Educator Guide](http://hourofcode.com/resources/how-to/) and [Best Practices from Successful Educators](http://www.slideshare.net/TeachCode/hour-of-code-best-practices-for-successful-educators-51273466) in order to begin to plan your Hour of Code event. \r\n- [Register your Hour of Code event](http://hourofcode.com) if you’d like to receive swag or classroom support.\r\n- Review and complete the online tutorial yourself: [MINECRAFT Hour of Code](https:/hourofcode.com/mc) \r\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of your Hour of Code.\r\n\r\n### One Day Before Your Hour of Code\r\n\r\n- Print one or more of the [Exit Ticket examples](https://docs.google.com/a/code.org/document/d/1ylIlO7Pppk6W3Jt58VHS5mjvnshg9URvj3iCU0Ok6qY/edit?usp=sharing) at the end of this lesson plan, or create your own. \r\n- Each student who completes the activity should receive a certificate. [Print one](http://code.org/certificates) for everyone in advance to make this easier at the end of your Hour of Code.\r\n"
    },
    "plugged/playlab": {
        "cs_content": "This lesson introduces the core CS concepts of coding and programming (using blocks), as well as simple debugging techniques.",
        "description": "In this lesson, learners get an introductory experience with computer science and create a game using basic block code.This lesson has been designed for learners in the middle grades, ages 10-16, but can be adapted for younger or older learners using the differentiation suggestions provided.",
        "overview": "In this lesson, learners get an introductory experience with computer science and create a game using basic block code.This lesson has been designed for learners in the middle grades, ages 10-16, but can be adapted for younger or older learners using the differentiation suggestions provided.",
        "prep": "### One Week Before Your Hour of Code\r\n\r\n- Review the [Hour of Code Educator Guide](http://hourofcode.com/resources/how-to/) and [Best Practices from Successful Educators](http://www.slideshare.net/TeachCode/hour-of-code-best-practices-for-successful-educators-51273466) in order to begin to plan your Hour of Code event. \r\n- [Register your Hour of Code event](http://hourofcode.com) if you’d like to receive swag or classroom support.\r\n- Review and complete the online tutorial yourself: [Playlab](https://studio.code.org/s/playlab/stage/1/puzzle/1) \r\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of your Hour of Code.\r\n\r\n### One Day Before Your Hour of Code\r\n\r\n- Write the words “coding”, “programming” and “debugging” on the board or add them to your word wall if you have one.\r\n- Each student who completes the activity should receive a certificate. [Print one](http://code.org/certificates) for everyone in advance to make this easier at the end of your Hour of Code.\r\n"
    },
    "plugged/star-wars-building-a-galaxy-with-code": {
        "cs_content": "This lesson introduces the core CS concepts of coding and programming including sequencing and events. The JavaScript version of the tutorial also lets the students experience typing code.",
        "description": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson has two versions. ",
        "overview": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson has two versions. \r\n\r\n**Option 1: Blocks**\r\n\r\nThe first option uses drag-drop blocks. This version works best for:\r\n\r\n - Students on mobile devices without keyboards\r\n - Younger students (6+ because the tutorial requires reading)\r\n - International students\r\n\r\nWe recommend this for international students because JavaScript syntax is not translated and for the first Hour of Code, the translated blocks provide a better introduction.\r\n\r\n**Option 2: JavaScript**\r\n\r\nThis option teaches the same basic concepts, but because it uses both drag-drop blocks and JavaScript, the students need to be able to type on a keyboard. For older students on computers, learning JavaScript can be fun and provide an additional challenge. This version of the tutorial is also great if you have some students in your class who have already learned some coding. It is recommended for ages 11+.",
        "prep": "### One Week Before Your Hour of Code\r\n\r\n- Review the [Hour of Code Educator Guide](http://hourofcode.com/resources/how-to/) and [Best Practices from Successful Educators](http://www.slideshare.net/TeachCode/hour-of-code-best-practices-for-successful-educators-51273466) in order to begin to plan your Hour of Code event. \r\n- Review and complete the online tutorial yourself: [Star Wars: Building a Galaxy with Code](http://hourofcode.com/star) \r\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of your Hour of Code.\r\n\r\n### One Day Before Your Hour of Code\r\n\r\n- Write the words “coding”, “programming” and “debugging” on the board or add them to your word wall if you have one.\r\n- Write the words \"Computer Science\" in the middle of your board or on piece of paper at the center of a bulletin board. This will serve as your [\"mind map\"](https://en.wikipedia.org/wiki/Mind_map) for the Getting Ready and Assessment activities.\r\n- Each student who completes the activity should receive a certificate. [Print one](http://code.org/certificates) for everyone in advance to make this easier at the end of your Hour of Code.\r\n"
    },
    "plugged/write-your-first-computer-program-an-hour-of-code-tutorial": {
        "cs_content": "This lesson introduces the core CS concepts of coding and programming (using blocks), as well as simple debugging techniques.",
        "description": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson has been designed for young learners, ages 4-10, but can be adapted for older learners using the differentiation suggestions provided.",
        "overview": "In this lesson, learners of all ages get an introductory experience with coding and computer science in a safe, supportive environment. This lesson has been designed for young learners, ages 4-10, but can be adapted for older learners using the differentiation suggestions provided.",
        "prep": "### One Week Before Your Hour of Code\r\n\r\n- Review the [Hour of Code Educator Guide](http://hourofcode.com/resources/how-to/) and [Best Practices from Successful Educators](http://www.slideshare.net/TeachCode/hour-of-code-best-practices-for-successful-educators-51273466) in order to begin to plan your Hour of Code event. \r\n- [Register your Hour of Code event](http://hourofcode.com) if you’d like to receive swag or classroom support.\r\n- Review and complete the online tutorial yourself: [Write your first computer program](https://studio.code.org/hoc/1) \r\n- Be sure to test it first before asking your students to complete it. Check your technology and decide if you need to troubleshoot anything in advance of your Hour of Code.\r\n\r\n### One Day Before Your Hour of Code\r\n\r\n- Print one or more of the [Exit Ticket examples](https://docs.google.com/a/code.org/document/d/1ylIlO7Pppk6W3Jt58VHS5mjvnshg9URvj3iCU0Ok6qY/edit?usp=sharing) at the end of this lesson plan, or create your own. \r\n- Each student who completes the activity should receive a certificate. [Print one](http://code.org/certificates) for everyone in advance to make this easier at the end of your Hour of Code.\r\n"
    },
    "pre-express-course/common-sense-education-your-digital-footprint": {
        "cs_content": "Common Sense Education has created this lesson to teach kids the importance of understanding the permanence of something posted on the internet. By relating footprints on a map to what a student might post online, students will make important connections between being tracked by a physical footprint on a path and being tracked based on information posted online.",
        "overview": "In collaboration with [r common-sense-media], this lesson helps students learn about the similarities of staying safe in the real world and when visiting websites. Students will also learn that the information they put online leaves a digital footprint or “trail.” This trail can be big or small, helpful or hurtful, depending on how they manage it.",
        "prep": "- Watch this [r teacher-video-digital-footprint].\r\n- Prepare to show [r your-digital-footprint].\r\n- (Optional) Prepare to show [r common-sense-media-pause-think].\r\n- Common Sense Education's [r csf-follow-the-digital-trail-activity] game.\r\n- Print one [Animal Tracks](https://code.org/curriculum/course2/18/followthedigitaltrail.pdf) chart (page 7) for each student.\r\n- Print one [r csf-digital-footprint-assessment] for each student."
    },
    "pre-express-course/debugging-unspotted-bugs": {
        "cs_content": "Research shows that some students have less trouble debugging a program than writing one when they first learn to code. In this lesson, we introduce the idea of debugging in a real world sense.\r\n\r\nThe goal in this lesson is to teach students steps to spot a bug and to increase persistence by showing them that it's normal to find mistakes. In later lessons, students will debug actual programs on Code.org.",
        "overview": "This lesson will guide students through the steps of debugging. Students will learn the mantra: \"What happened? What was supposed to happen? What does that tell you?\"",
        "prep": "- Watch the [r teacher-video-unspotted-bugs].\n- Review the Unspotted Bugs Story ([r unspotted-bugs-pdf]).\n- Pre-read Unspotted Bugs to identify appropriate questions for your classroom.\n- Follow instructions in the [r marble-run-teacher-prep-guide] to make a Marble Run (which will be arranged incorrectly at the start).\n- Give a [r think-spot-journal] to each student."
    },
    "pre-express-course/events-in-play-lab": {
        "cs_content": "In this online activity, students will learn how to use events in Play Lab. They will start by training the knight to move when an arrow key is pressed, then end with the opportunity to showcase the rest of the skills that they learned throughout this course, including sequence and looping, as part of the final freeplay puzzle.",
        "overview": "In this online activity, students will have the opportunity to learn how to use events in Play Lab and apply all of the coding skills that they've learned to create an animated game. It's time to get creative and make a game in Play Lab!",
        "prep": " - Play through the [r csf-pre-express-course] in stage 12 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "pre-express-course/events-unplugged-the-big-event": {
        "cs_content": "Today, students will learn to distinguish events from actions. The students will see activities interrupted by having a \"button\" pressed on a paper remote. When seeing this _event_, the class will react with a unique action. Events are widely used in programming and should be easily recognizable after this lesson.",
        "overview": "Events are a great way to add variety to a pre-written algorithm. Sometimes you want your program to be able to respond to the user exactly when the user wants it to. That is what events are for.",
        "prep": "- Watch the [r teacher-video-big-event-2].\r\n- Print one [r csf-the-big-event-activity-worksheet].\r\n- Print one [r csf-the-big-event-assessment] for each student.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/learn-to-drag-and-drop": {
        "cs_content": "The main goal of this lesson is to build experience with computers. By covering the most basic computer functions such as clicking, dragging, and dropping, we are creating a more equal playing field in the class for future puzzles. This lesson also provides a great opportunity to introduce  appropriate computer lab behavior.",
        "overview": "In this lesson, students will relate the concept of algorithms back to everyday, real-life activities by planting an actual seed. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.",
        "prep": " - Watch the [r class-section-video]. Create a class section and make sure every student has a card with their passcode on it.\r\n - Have the school IT person add a quick link for your class section to the computer desktop.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/loops-in-artist": {
        "cs_content": "This lesson gives a different perspective on how loops can create things in programming. Students will test their critical thinking skills by evaluating given code and determining what needs to be added in order to solve the puzzle. Students can also reflect on the inefficiency of programming without loops here because of how many blocks the program would require without the help of `repeat` loops.",
        "overview": "Returning to loops, students learn to draw images by looping simple sequences of instructions. In the previous online lesson, loops were used to traverse a maze and collect treasure. Here, students use loops to create patterns. At the end of this stage, students will be given the opportunity to create their own images using loops.",
        "prep": " - Play through the [r csf-pre-express-course] before the lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/loops-in-collector": {
        "cs_content": "In this lesson, students will be learning more about loops and how to implement them in Blockly code. Using _loops_ is an important skill in programming because manually repeating commands is tedious and inefficient. With the Code.org puzzles, students will learn to add instructions to existing loops, gather repeated code into loops, and recognize patterns that need to be looped.",
        "overview": "Building on the concept of repeating instructions from \"My Loopy Robotic Friends,\" this stage will have students using loops to collect treasure more efficiently on Code.org.",
        "prep": " - Review the previous unplugged lesson and develop questions to remind students why loops are used.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/loops-unplugged-my-loopy-robotic-friends": {
        "cs_content": "This lesson serves as an introduction to loops. _Loops_ allow for students to simplify their code by grouping commands that need to be repeated. Students will develop critical thinking skills by noticing repetition in the movements of classmates and determining how many times their code needs to be looped. By seeing \"My Robotic Friends\" again, students will be able to relate old concepts (such as sequencing) to the new concept of loops.",
        "overview": "Here, students learn the simplicity and utility of loops by “programming” their friends using the language from \"My Robotic Friends.\" Once loops are introduced, students will find that they can build bigger structures faster.",
        "prep": " - Watch the [r my-robotic-friends].\r\n - Print one [r my-robotic-friends-loops-packet] for each group.\r\n - Acquire up to 20 paper cups for each group.\r\n - Review [r my-robotic-friends].\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/persistence-frustration-stevie-and-the-big-project": {
        "cs_content": "The goal of this lesson is to help students realize that failure and frustration are common when working on projects, but that doesn't mean that they should give up.\r\n\r\nIn this lesson, students will develop an understanding of what it means to be frustrated while working on a large project. It's possible that not every student will experience frustration with this activity, but there are many opportunities to open a discussion about moments in the past where students have felt frustrated but nevertheless persisted.",
        "overview": "When students run into a barrier while answering a question or working on a project, it’s so easy for them to get frustrated and give up. This lesson will introduce students to the idea that frustration can be an important part of learning. Here, frustration is presented as a step in the creative process, rather than a sign of failure.\r\n\r\nThis lesson can be done over one or two class sessions.  If you have more time, feel free to draw out the building and revising phase of the Marble Run activity.",
        "prep": " - Watch the [r teacher-video-stevie-big-project].\n - Pre-read \"Stevie and the Big Project\" to identify appropriate questions for your class ([r stevie-big-project-pdf]).\n - Follow instructions in the [r marble-run-teacher-prep-guide] to make a Marble Run.\n - Print copies of the **Marble Run Ruler** (page 2 of teacher guide) for each student or pair of students\n - Prepare a resource station with cardstock, safety scissors, tape, and anything else you think might be fun for students to build with.  Include a stack of the **“Marble Run Hints”** pages from the Teacher Prep Guide, but do not advertise their existence.\n - (Optional) Allow students to bring cardboard, popsicle sticks, string, or other tidbits from home to add to the resource station.\n - Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/programming-in-maze": {
        "cs_content": "In this lesson, students will be practicing their debugging and programming skills on a computer platform. When someone starts _programming_ they piece together instructions in a specific order using something that a machine can read. Through the use of programming, students will develop an understanding of how a computer navigates instructions and order. _Debugging_ is a concept that is very important to computer programming. Computer scientists have to get really good at facing all of the bugs in their own programs. Debugging forces the students to recognize problems and overcome them while building critical thinking and problem solving skills.",
        "overview": "In this series of online puzzles, students will build on the understanding of algorithms, debugging, and general computer literacy. Featuring characters from the game Angry Birds, students will develop sequential algorithms to get the bird to the pig without crashing into walls or TNT. Debugging puzzles have also been mixed into this stage for added practice with problem solving and critical thinking.",
        "prep": " - Play through the [r csf-pre-express-course] in stage 7 to find any potential problem areas for your class.\r\n - (Optional) Pick a couple of puzzles to do as a group with your class.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/programming-in-star-wars": {
        "cs_content": "With transfer of knowledge in mind, this lesson gives students a new environment to practice the skills that they have been cultivating. Star Wars fans will jump for joy when they see these puzzles. Each puzzle in this series has been added to provide a deeper understanding of the basic concepts that they will be using throughout the rest of this course.",
        "overview": "In this lesson, students will use their newfound programming skills in more complicated ways to navigate a tricky course with BB-8.",
        "prep": " - Play through the [r csf-pre-express-course] corresponding with this lesson to find any potential problem areas for your class.\r\n - Review [r csf-lesson-recommend].\r\n - Make sure every student has a [r think-spot-journal]."
    },
    "pre-express-course/real-life-algorithms-plant-a-seed": {
        "cs_content": "In this lesson, students will learn that algorithms are everywhere in our daily lives. For example, it is possible to write an algorithm to plant a seed. Instead of giving vague or over-generalized instructions, students will break down a large activity into smaller and more specific commands. From these commands, students must determine a special sequence of instructions that will allow their classmate to plant a seed.",
        "overview": "In this lesson, students will relate the concept of algorithms back to everyday, real-life activities by planting an actual seed. The goal here is to start building the skills to translate real-world situations to online scenarios and vice versa.",
        "prep": "- Watch the [r teacher-video-plant-seed-2].\r\n- Prepare supplies for planting seeds. You'll need seeds, dirt, and paper cups for each student or group.\r\n- Print one [r csf-real-life-algorithms-plant-a-seed] for each student.\r\n- Print one [r csf-real-life-algorithms-assessment] for each student.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "pre-express-course/spelling-bee": {
        "overview": "Part puzzle, part word search, the Spelling Bee asks students to program a bee to find common words in a grid."
    },
    "pre-express/loops-unplugged-looping-with-my-robotic-friends": {
        "cs_content": "This lesson serves as a reintroduction to loops, using the now familiar set of \"robot\" programming instructions. Students will develop critical thinking skills by looking for patterns of repetition in the movements of classmates and determining how to simplify those repeated patterns using loops.",
        "description": "Building on the initial \"My Robotic Friends\" activity, students tackle larger and more complicated designs. In order to program their \"robots\" to complete these bigger designs, students will need to identify repeated patterns in their instructions that could be replaced with a loop.",
        "overview": "Building on the initial \"My Robotic Friends\" activity, students tackle larger and more complicated designs. In order to program their \"robots\" to complete these bigger designs, students will need to identify repeated patterns in their instructions that could be replaced with a loop.",
        "prep": " - Watch the [r my-loopy-rf-teacher-vid].\r\n - (Optional) Print out one [r symbol-key] per group or 4 students. Alternatively, find a place to display this information where students can reference throughout the lesson.\r\n - Prepare a stack of 20 paper cups for each group of 4 students.\r\nOR\r\n - (Optional) print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\r\n - Print out one set of [r stacking-cups-ideas] per group.\r\n - Make sure each student has a [r think-spot-journal]."
    },
    "pre-express/programming-unplugged-my-robotic-friends": {
        "cs_content": "This unplugged lesson brings the class together as a team with a simple task to complete: get a \"robot\" to stack cups in a specific design. Students will work to recognize real world actions as potential instructions in code. The designing of precise instructions will also be practiced, as  students work to translate worded instructions into the symbols provided. If problems arise in the code, students should work together to recognize bugs and build solutions. This activity lays the groundwork for the programming that students will do throughout the course, as they learn the importance of defining a clearly communicated algorithm.",
        "description": "Using a set of symbols in place of code, students will design algorithms to instruct a \"robot\" to stack cups in different patterns. Students will take turns participating as the robot, responding only to the algorithm defined by their peers. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.",
        "overview": "Using a set of symbols in place of code, students will design algorithms to instruct a \"robot\" to stack cups in different patterns. Students will take turns participating as the robot, responding only to the algorithm defined by their peers. This segment teaches students the connection between symbols and actions, the difference between an algorithm and a program, and the valuable skill of debugging.",
        "prep": " - Watch the [r my-robotic-friends].\n - (Optional) Print out one [r symbol-key] per group or 2-3. Alternatively, find a place to display this information where students can reference throughout the lesson.\n - Prepare a stack of 10 disposable cups per group of 2-3 students, OR\n - (Optional) print and cut out [r paper-trapezoid-template] for each group if your class is not going to use cups.\n - Print out one set of [r stacking-cups-ideas] per group.\n - Make sure each student has a [r think-spot-journal]."
    },
    "programming-languages-and-algorithms/apis-and-using-functions-with-parameters": {
        "cs_content": "An API is a reference guide which catalogs and explains the functionality of a programming language. If a programmer develops the practice of referencing an API, she can make full use of that functionality without undergoing the tedium of memorizing every detail of the language. In today’s lesson, students will need to read through the API in order to find and understand new commands for moving the turtle, selecting colors, and drawing different-sized dots and lines on the screen. Students should not necessarily understand every command in the drawing API in detail, but they should be familiar with referencing the API as a standard part of the process of writing a program. This will also be the first time students are given access to drawing functions that take parameters (e.g., moveForward(40) vs. moveForward()). \r\n",
        "description": "Students read and use App Lab’s API documentation to learn about new turtle commands that they must use to complete a series of drawing puzzles.",
        "overview": "Students will learn to read App Lab’s API documentation and will use functions that accept parameters in order to complete a series of drawing puzzles which require them to make use of the App Lab API documentation to learn new drawing commands. Many of these commands will require the use of parameters. The final challenge asks students to design a personal monogram making use of the commands they learned during the lesson.",
        "prep": "\r\n* Review functions in the \"Turtle toolbox to assist in debugging code\r\n"
    },
    "programming-languages-and-algorithms/creating-functions": {
        "cs_content": "Programming languages must necessarily define the meaning of a set of commands which are generally useful and applicable. In order to extend their functionality, nearly all programming languages provide a means for defining and calling new commands which programmers design to fit the needs of the problems they are trying to solve. Defining functions is an example of how computer scientists use abstraction to solve problems. A programmer will design a solution to a small, well-defined portion of the task and then give a name to the associated code. Whenever that problem arises again, the programmer can invoke the new function by name, without having to solve the problem again. This ability to refer to complex functionality by simple, meaningful names allows for programs to be written in more intuitive ways that reflect the relationships between different blocks of code.",
        "description": "Students learn to define and call their own procedures (or “functions”) in order to create and give a name to a group of commands for easy and repeated use in their code. Named procedures are a form of abstraction that enable the programmer to reduce complexity by removing details and generalizing functionality.",
        "overview": "In this lesson, students learn to define and call procedures (in JavaScript, procedures are called “functions”) in order to create and give a name to a group of commands for easy and repeated use in their code. They will be introduced to functions as a form of abstraction that enables them to write code in larger, more logical chunks and focus on what something does, rather than how it does it. As they explore the use of functions through a sequence of activities in App Lab, they will be asked to think about where they see the need for functions and how these functions can make their code clearer or more concise.\r\n\r\nAt the end of the lesson students review the concept of abstraction and are introduced to elements of the Create PT in preparation for the Practice PT at the end of the unit.",
        "prep": "\r\n* Review student-facing instructions in Code Studio"
    },
    "programming-languages-and-algorithms/creating-functions-with-parameters": {
        "cs_content": "Writing functions with parameters is a simple idea, but it traditionally has some devilish details for new learners of programming.  The basic idea is that you often want to write a function that takes some input and performs some action based on that input.  For example, the turtle function moveForward is much more useful when you can specify how much to move forward (e.g., moveForward(100)), rather than just a fixed amount every time.  It’s very common to encounter situations where as a programmer you realize that you basically need a duplicate of some code you’ve already got, but you just want to change some numbers.  That’s a good time to write a function with a parameter; the parameter just acts as a placeholder for some value that you plug in at the time you call the function.  Just like it’s considered good practice to give descriptive names to your functions, the same is true for the names of the parameters themselves.  For example: `drawSquare(sideLength)` is better than `drawSquare(stuff)`.  ",
        "description": "Students practice using and creating functions with parameters by making a series of modifications to a program that creates an “Under the Sea” drawing. Students add parameters to generalize behavior that can vary, and make use of App Lab's randomNumber function add variation to the scene. ",
        "overview": "In this lesson, students practice using and creating functions with parameters. Students learn that writing functions with parameters can generalize solutions to problems even further. Especially in situations where feel like you are about to duplicate some code with only a few changes to some numbers, that is a good time to write a function that accepts parameters. In the second half of the lesson, students make a series of modifications to a program that creates an “Under the Sea” scene by adding parameters to functions to more easily add variation to the scene.  Lastly, students are introduced to App Lab’s random number functions to supply random values to function calls so the scene looks a little different every time the program runs.",
        "prep": "\r\n* Review functions in the \"Turtle toolbox to assist in debugging code"
    },
    "programming-languages-and-algorithms/creativity-in-algorithms": {
        "cs_content": "The purpose of this lesson is to see what \"creativity in algorithms\" means.  Creativity has to do with both the process you invent (an algorithm) to solve a new problem in a given context _and_ how you implement that algorithm in a given language.  Creativity often means combining or using algorithms you know as part of a solution to a new problem.  Thus, the \"Min To Front\" problem is  interesting because students already solved part of it (the find min part) in the previous lesson.  \r\n\r\nIn the CSP Framework, almost every Essential Knowledge statement from Learning Objective *4.1.1 Develop an algorithm for implementation in a program* applies here.\r\n\r\nThe two points from the previous lesson carry over here and are also in the CSP Framework.\r\n\r\n1. Different algorithms can be developed to solve the same problem\r\n2. Different programs (or code) can be written to implement the same algorithm.\r\n\r\nFurtermore the CSP Framework states: \r\n\r\n* *4.1.1A Sequencing, selection, and iteration are building blocks of algorithms.*  \r\n* *4.1.2G Every algorithm can be constructed using only sequencing, selection, and iteration.*\r\n\r\nThe findMin problem and the other problems we solved with the Human Machine Language also have **sequencing**, **selection**, and **iteration**. Here's what they mean:\r\n\r\n* **Selection**: also known as \"branching\" most commonly seen in if-statements -- The JUMP...IF command in the Human Machine Language is a form of selection. It gives us a way to compare two things (numbers) and take action *if* one thing was true.\r\n* **Iteration**: also known as \"looping\" -- The JUMP command in the Human Machine Language allows us to move to a different point in the program and start executing from there.  This allows us to re-use lines of code, and this is a form of iteration or looping.\r\n* **Sequencing**: From the framework: \"4.1.1B - Sequencing is the application of each step of an algorithm in the order in which the statements are given.\" Sequencing is so fundamental to programming it sometimes goes without saying. In our lesson, the sequencing is simply implied by the fact that we number the instructions with the intent to execute them in order.\r\n \r\nLooking ahead, while sequencing seems obvious at first, it can trip up the novice programmer, because you must pay attention to how the state of the world changes with each line executed.  In particular, this can cause some confusion when programming simple mathematics.  For example, here is a series of instructions in some programming language:\r\n\r\n```\r\nx = 2\r\nx = 5\r\nx = x + 1\r\n```\r\nIn mathematics this is an impossible (and meaningless) system of equations.  But in programming, because it's sequenced, it simply means do one thing after the other. X gets the value 2.  Then x gets the value 5. Then x gets the current value of x plus 1.  When these 3 lines have completed executing x has the value 6.\r\n",
        "description": "Students continue to work with the “Human Machine Language” - with an added SWAP command - to design an algorithm to move the minimum card to the front of the list.  Students may design more algorithms for other problems and challenges provided.",
        "overview": "This is the third of three lessons that make the connection between programming and algorithms.  In this lesson students continue to work with the \"Human Machine Language\" to get creative designing more algorithms for playing cards.  One command is added to the language from the previous lesson (SWAP) that allows positions of cards to change.  With the addition of swap the challenge is to design an algorithm that will move the minimum card to the front of the list while keeping the relative order of all the other cards the same.  If that is achieved some other Human Machine Language challenges are available.",
        "prep": "* Playing cards for students\r\n* Decide which parts of the activity guide to print out"
    },
    "programming-languages-and-algorithms/functions-and-top-down-design-1": {
        "cs_content": "The main purpose here is to familiarize students with the concept of developing \"procedural abstractions.\"  One of the main learning objectives in the CSP framework is: \"2.2.1 Develop an abstraction when writing a program...\".  Furthermore the *AP Performance Task: Create* requires students to \"develop an abstraction to manage complexity of your program.\"  For all intents and purposes, developing abstractions starts with writing reusable functions (or procedures) in your code that encapsulate and give a name to multi-line segments of code that other parts of your code calls upon.  \r\n\r\nA technique for deciding what functions you should write is to look at the problem with a \"top-down design\" perspective.  The process of creating software begins long before the first lines of code are written. Breaking a problem down into layers of sub-tasks, and writing well-named functions that solve those tasks is a creative act of abstraction.  It also leads to good code that is more efficient, easier to read, and therefore easier to debug when problems arise.  \r\n\r\nIn professional settings, teams of people first identify the problems and sub-problems the particular software will be addressing and how it will be used. This approach to designing software is critical when facing large-scale programming tasks. Once the problem is well understood, it can be broken into parts that teams or individual programmers can begin to work on solving at the same time. Full software systems take advantage of the power of abstraction; each programmer in a team can write code, assuming the subproblems will be solved and written by other teammates.",
        "description": "Students learn about top-down design strategies for solving more complex programming problems by breaking the problem down into small parts that can be named and represented as functions. The code in the resulting program should read more like a description of how to solve the problem than like raw code.",
        "overview": "This lesson presents a top-down problem-solving strategy for designing solutions to programming problems. Students use a worksheet to learn about top-down design, and then on paper, design a solution to a new turtle drawing challenge with a partner. Having practiced this approach on paper and in code, students will be re-presented with the 3x3 square challenge from an earlier lesson and asked to improve upon their old solution by designing multiple layers of functions.",
        "prep": "\r\n* Review this [explanation of Top-Down Design](https://en.wikibooks.org/wiki/A-level_Computing/AQA/Problem_Solving,_Programming,_Data_Representation_and_Practical_Exercise/Problem_Solving/Top-down_design_and_Step-wise_refinement)"
    },
    "programming-languages-and-algorithms/looping-and-random-numbers": {
        "cs_content": "Loops are a relatively straightforward idea in programming - you want a certain chunk of code to run repeatedly - but it takes a little practice to get good at controlling loops and recognizing how and where in your programs to use them. The for loop in JavaScript (and many other programming languages) is designed to be used for both simple and sophisticated programming tasks, thus it has a lot of syntax to it that will be explained in the future. In this lesson, the block-based form of the for loop exposed to students is effectively a simple repeat loop - it only lets them change a number that dictates how many times the loop repeats.\r\n\r\nRandom numbers are also used more (much more) in this lesson as an effective way to experiment with loops. Creating some randomly-generated output with each iteration of the loop is good visual feedback that the loop is running the way you expect. It also helps you explore the ranges of possible outputs, which tells you more about what your program can and cannot do.",
        "description": "Students learn to use a simplified version of a for loop to add repetition to their code (i.e. repeat x times loop).  Calling functions repeatedly with a loop combined with random numbers enables students to create more complex and varied drawings for digital scenes.",
        "overview": "Students learn to use random values and looping to create variation in their drawings and quickly duplicate objects they wish to appear in their digital scenes many times. Students will be presented with a version of the for loop which only enables them to change the number of times the loop runs. This block is essentially a \"repeat\" block and will be presented that way. Students will also be presented with blocks which enable them to choose a random number within a given range. Together these blocks enable students to create more complex backgrounds for digital scenes by randomly placing simple objects within the background of their scene. Students use these tools to step through the Under the Sea exemplar digital scene.",
        "prep": "* Set up the room for computer use\r\n* Plan how you want students to watch the video on loops"
    },
    "programming-languages-and-algorithms/practice-pt-design-a-digital-scene": {
        "cs_content": "Abstraction is an important tool in programming, not only because it allows individual programmers to break down complex problems, but because it enables effective forms of collaboration. Once a problem has been broken down into its component parts, teams of programmers (sometimes dozens or more) can attack individual components of that problem in parallel. This style of programming requires clear communication and a shared understanding of the high-level requirements of the software. If implemented carefully, however, it can be an effective strategy for rapidly producing large and complex pieces of software.",
        "description": "Students work in groups of 3 or 4 to design and write the code for a program that draws a digital scene of their choosing. Students break the scene down into small parts and divvy up the code writing amongst the team. Each individual's code is combined at the end to create the full scene. The project concludes with written reflection questions similar to those students will see on the AP® Performance Tasks.",
        "overview": "To conclude their introduction to programming, students will design a program that draws a digital scene of their choosing. Students will be working in groups of 3 or 4 and will begin by identifying a scene they wish to create. They will then use Top-Down Design to identify the high-level functions necessary to create that image. The group will then assign these components to individual members of the group to program. After programming their individual portion, students will combine all of their code to compose the whole scene. The project concludes with reflection questions similar to those students will see on the AP® Performance Tasks.\r\n\r\nNote: This is NOT the official AP Performance Task that will be submitted as part of the Advanced Placement exam; it is a practice activity intended to prepare students for some portions of their individual performance at a later time.\r\n\r\nAP® is a trademark registered and/or owned by the College Board, which was not involved in the production of, and does not endorse, this curriculum.\r\n"
    },
    "programming-languages-and-algorithms/the-need-for-algorithms": {
        "cs_content": "The main point here is to connect the acts of writing \"code\" and designing algorithms, and to take some steps towards programming with code.  To do this we imagine trying to write instructions for a \"Human Machine\" to complete a tightly defined task with playing cards.\r\n\r\nWe want to introduce the term [v algorithm] and what designing an algorithm means in computer science (i.e. programming).  We then want to take a few steps to build up to writing an algorithm with \"code\".  Here are the basic steps of the lesson and their underlying purpose.\r\n\r\nStep 1: Discover common instructions\r\n\r\nWhen students write instructions to find the minimum card in a row of cards, we'll discover that even though the words used might be different between groups, there is probably a lot of commonality to underlying actions we need (shifting hands, picking up cards, comparing cards, jumping to a certain line in the instructions, etc.) \r\n\r\nStep 2: Agree on a minimal instruction set\r\n\r\nRecognizing these commonalities we can give names to a few commands and come to agreement about how they should be interpreted.  This is the foundation for a \"code\".  We then provide a 5-instruction \"human machine language\" that is sufficient for implementing an algorithm to find the minimum card.\r\n\r\nStep 3: Use the provided Human Machine Language \"code\" to implement an algorithm\r\n\r\nThe art of programming is to solve computational problems using a provided language that controls the machine.  In the activity we provide a simple, low-level, language for acting on playing cards.  The point is to show that even when you know what the commands are, you still need to be creative to use them to solve a problem.   \r\n\r\n**Why the Human Machine Language?**  This language bears a strong resemblance to so-called [\"low level\" programming languages](https://en.wikipedia.org/wiki/Low-level_programming_language) - a sparse, primitive set of commands to directly control the physical/electronic operations of a computing machine. Other programming languages are built on top of the low level languages to provide more abstraction and functionality that combines low level operations into commonly used procedures.  The most commonly known low level language is called [Assembly Language](https://en.wikipedia.org/wiki/Assembly_language)  For a good example **see the wrap up of the next lesson** where we introduce students to low level languages.\r\n\r\n\r\n",
        "description": "Students develop (and are eventually provided with) commands for a \"Human Machine Language\" designed to perform operations on playing cards. The lesson highlights the connection between programming and algorithms by showing that different techniques for solving the same problem can be expressed in the language.",
        "overview": "This is the 2nd day of a 3-lesson sequence in which we attempt to show the \"art\" of programming and introduce the connection between programming and algorithms. In the previous lesson we established the need for a common language with which express algorithms to avoid ambiguity in how instructions would be interpreted. In this lesson we continue to establish the connection between programming and algorithms, with more emphasis on the \"art\" of algorithms.  \r\n\r\nFirst students are presented with a new task for the “human machine” - to write a set of instructions to identify the smallest (lowest value) card in row of cards on the table.  Once again we try to establish a set of fundamental commands for doing this, and develop a more formal set of “low-level” commands for manipulating playing cards.  Students are presented with a \"Human Machine Language\" that includes 5-commands and then must figure out how to use these primitive commands to “program” the same algorithm.\r\n\r\nAt the conclusion several points about programming can be made, namely: 1. Different algorithms can be developed to solve the same problem 2. Different programs can be written to implement the same algorithm."
    },
    "programming-languages-and-algorithms/using-simple-commands": {
        "cs_content": "The main purpose of this lesson is start students on their programming journey in such a way that the focus is more on problem-solving than learning syntax.  Like the previous lessons about algorithms, by stripping down the available commands to only a few, these constraints force students to think about the most efficient way to solve the problem and come up with creative ways of doing it.\r\n\r\nA reason to learn this way is because at its core, a computer can really only do a few simple things: load a number from memory, store a number in memory, add two numbers together, etc.  *Everything* the computer can do is the result of combining these simple instructions to do more and more sophisticated things.  Students in this class will embark on a similar journey, building up complexity from only a few primitive sets of commands.  As students are presented with increasingly complex tasks, we will progressively expose more commands as a matter of convenience. \r\n\r\nBig picture: when programming at any level of expertise you are always limited by the constraints of the programming language you choose to use.  Whether the language gives you thousands of commands and libraries with which to control various things or only a few, you always have to use those as building blocks to get the computer to do what you want.  It usually involves being creative and making interesting choices about how to go about doing something.  In this lesson, we simplify things dramatically by only providing 4 turtle drawing commands (namely `moveForward`, `turnLeft`, `penUp` and `penDown`) to produce simple line drawings.  In fact, the problems can be solved using *only* moveForward and turnLeft!\r\n\r\n",
        "description": "Students use the App Lab programming environment for the first time and become acquainted with the turtle. The chief problem is to find the most “efficient” way to draw an image of a 3x3 grid using a limited set of only 4 commands.",
        "overview": "This lesson is a student's first exposure to programming in the App Lab environment.  App Lab is embedded into Code Studio, and for this lesson the student's view is limited to only a very few simple “turtle” commands to draw graphics on the screen.  After a few warm up exercises, using only combinations of four drawing commands, students must figure out the most “efficient” way to draw an image of a 3x3 grid.  Though the students’ focus should primarily be on solving the problems at hand, students also get acquainted with the programming environment that they will be using for the rest of the course.  The environment is intentionally bare bones at this point, the many features of App Lab will be gradually revealed over time.",
        "prep": "\r\n* Familiarize yourself with opening remarks and comments for background knowledge."
    },
    "q1/classroom-counseling-scenarios": {
        "cs_content": "Consider specific scenarios related to supporting and retaining students in your classroom. ",
        "description": "Consider specific scenarios related to supporting and retaining students in your classroom. ",
        "prep": "**Teacher Materials:** \r\n\r\n- Laptops \r\n- Shared notes document (made as a copy of the [r csp-q1-notes-doc])\r\n- Journals/Scratch paper and pen\r\n- Post-it note \r\n\r\n**Facilitator Setup:**\r\n\r\n- In this session you will need to count participants off (1-4) \r\n- Participants will move a lot in this session-- speed dating and regrouping after speed dating. make sure they're ready to be at a different table after speed dating ends\r\n- All prompts are in the slides and in the shared notes document. In the final portion of this session, be sure to direct teachers to record their statements and strategies in the shared notes document. \r\n"
    },
    "q1/lesson-planning-jigsaw": {
        "cs_content": "Plan a lesson that was explored during TTL. ",
        "description": "Plan a lesson that was explored during TTL. ",
        "prep": "**Teacher Materials:** \n\n- Laptops \n- Lesson plans\n- Shared notes document (made as a copy of the [r csp-q1-notes-doc])\n- Journals \n- Questions from TTL Q&A\n\n**Facilitator Setup:**\n\n- If more than 4 - 5 participants sign up for a given lesson, break them out into groups of ~4. It's fine to have multiple groups looking at the same lesson. \n - In this case, type the lesson question post-its into the shared notes document so all groups planning a given lesson have access. \n- Explicitly point out the leftover TTL questions (regardless of if they are on post-its or in the notes doc)\n"
    },
    "q1/practice-pts-and-ap-prep": {
        "cs_content": "Discuss opportunities for AP Prep early in the year, including exploring the practice performance tasks.",
        "description": "Discuss opportunities for AP Prep early in the year, including exploring the practice performance tasks.",
        "prep": "**Teacher Materials**\n\n- [r csp-teal-book] (if teachers don't have their book send them to [bit.ly/csp-teal-book](https://bit.ly/csp-teal-book))\n- Shared notes document (made as a copy of the [r csp-q1-notes-doc]) \n\n**Facilitator Preparation:** \n\n- Become comfortable talking about the practice performance tasks in units 1 and 2 "
    },
    "q1/teaching-tips-live-unit-1-and-2-activity-demos": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. ",
        "description": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. ",
        "prep": "**Teacher Materials:**\n\n- Laptops \n- [r csp-teal-book] (if teachers don't have their book send them to [bit.ly/csp-teal-book](https://bit.ly/csp-teal-book)) \n- Journals\n\n\n**Facilitator Setup**\n\n- If lessons from unit 1 will be explored, make sure everyone has joined your section from the start of the day.\n\nDepending on how far into the curriculum everyone is, pick a chunk of 3 activities from unit 1 and 2 to present. **see the tip in the orange box below for details on which lessons to choose for this workshop.**\n"
    },
    "q1/ttl-discussion-and-qa": {
        "cs_content": "Collect and organize questions about the lesson that need to be discussed. ",
        "description": "Collect and organize questions about the lesson that need to be discussed. ",
        "prep": "**Teacher Materials:** \r\n\r\n- Journals/Notes from previous session \r\n- chart paper \r\n- post-its\r\n\r\n**Facilitator Setup:** \r\n\r\n- one sheet of chart paper per lesson demo’d, hung around the room\r\n\r\n"
    },
    "q1/workshop-opener-warm-up-and-check-in": {
        "cs_content": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "description": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "prep": "see workshop prep and setup "
    },
    "q1/wrap-up": {
        "cs_content": "Answer any outstanding questions and wrap up the day.",
        "description": "Answer any outstanding questions and wrap up the day.",
        "prep": "**Facilitator Setup:**\r\n\r\n- Grab and organize the question parking lot"
    },
    "q2/s": {
        "cs_content": "Having just gone through 4 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There will be time later in the day to focus on lesson planning for these lessons so this is a time to mostly get out questions about the lesson and clarify the activity itself.",
        "description": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There will be time later in the day to focus on lesson planning for these lessons so this is a time to mostly get out questions about the lesson and clarify the activity itself.",
        "overview": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There will be time later in the day to focus on lesson planning for these lessons so this is a time to mostly get out questions about the lesson and clarify the activity itself.",
        "prep": "Room Setup:\n\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \n\nFacilitator Supplies:\n\n* [r cs-discoveries-q2]\n* [r cs-discoveries-facilitation-guide]\n* Chart Paper\n\nTeacher Materials:\n\n* Notes from previous session\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Laptops\n* Journals\n* Post-its"
    },
    "q2/s-1": {
        "cs_content": "Teachers have had time to dive deep into one lesson and plan with a group for how they might teach it. In addition a whole group leaves with a list of strategies and ideas for teaching the lessons ahead.\r\n",
        "description": "Teachers work with a group to plan for teaching one of the upcoming lessons. Groups then share their ideas for future lessons so that everyone hears about strategies and things to keep in mind when planning future lessons.",
        "overview": "Teachers work with a group to plan for teaching one of the upcoming lessons. Groups then share their ideas for future lessons so that everyone hears about strategies and things to keep in mind when planning future lessons.",
        "prep": "Room Setup:\r\n\r\n* Sitting with the 3-5 people who signed up for the same lesson. Facilitators pass out the remaining lesson/activity questions to the group that will explore that lesson\r\n* If more than 4 - 5 participants sign up for a given lesson, break them out into groups of ~4. It's fine to have multiple groups looking at the same lesson. In this case, type the lesson question post-its into the shared notes document so all groups planning a given lesson have access. \t \r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-discoveries-q2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* [r cs-discoveries-q2-1]\r\n* Laptops\r\n* Lesson plans\r\n* Journals\r\n* Post-its with questions from TTL session"
    },
    "q2/s-2": {
        "cs_content": "Teachers get to learn about how the Unit 3 Chapters wraps up with the different chapter projects.",
        "description": "Teachers looks at the chapter projects for Unit 3.",
        "overview": "Teachers looks at the chapter projects for Unit 3.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of [r cs-discoveries-q2]\n* Your local copy of [r cs-discoveries-q2-1]\n* [r cs-discoveries-facilitation-guide]\n* Coffee Bunny App - bit.ly/coffee-bunny\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Laptops\n"
    },
    "q2/s-3": {
        "cs_content": "Teachers make lists of the different student types in their class and discuss their needs in relation to the different types of activities in the curriculum.",
        "description": "Discuss the needs of students in your class and how to support them.",
        "overview": "Discuss the needs of students in your class and how to support them.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of [r cs-discoveries-q2]\r\n* Your local copy of [r cs-discoveries-q2-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Your local copy of [r cs-discoveries-q2-discussion-sessions]\r\n* Random Word Selector: [http://andrew.hedges.name/experiments/random/pickone.html](http://andrew.hedges.name/experiments/random/pickone.html)\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Computer \r\n* Differentiation Forum: [http://forum.code.org/c/csd/differentiation](http://forum.code.org/c/csd/differentiation)\r\n"
    },
    "q2/s-5": {
        "cs_content": "Give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Teachers have time to discuss lingering questions and then wrap up the day. Teachers will also take the end of workshop survey.",
        "overview": "Teachers have time to discuss lingering questions and then wrap up the day. Teachers will also take the end of workshop survey.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy [r cs-discoveries-q2]\r\n* Your local copy [r cs-discoveries-q2-1]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n\r\n\r\nTeacher Materials:\r\n\r\n* Computers"
    },
    "q2/session-1": {
        "cs_content": "This is the time to come back together as a group and catch up on how things have been going on. This means sharing highlights but also making sure concerns are voiced.",
        "description": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "overview": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "prep": "Room Setup (using the supplies provided by regional partner):\n\n* See Workshop Room Setup on [Q1 Workshop Page](https://curriculum.code.org/plcsd/q1/)\n* Posters up for people to add post-its to as they come in\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\n* **Question Parking Lot** - For people to put up questions they have.\n \nFacilitator Supplies:\n\n* Your local copy of the [r cs-discoveries-q2]\n* Your local copy of the [r cs-discoveries-q2-1]\n* [r cs-discoveries-q2-discussion-sessions]\n* Poster Paper (Regional Partner Provides)\n* [r workshop-dashboard]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Journal (Should bring with them)\n* Post-its\n* Computer for attendance"
    },
    "q2/session-1-1": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the *activity* in lessons that are coming up.",
        "description": "Teachers have a chance to get familiar with the activity in lessons that are coming up.",
        "overview": "Teachers have a chance to get familiar with the *activity* in lessons that are coming up.",
        "prep": "Room Setup:\r\n\r\n* One sheet of chart paper per lesson demo’d, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of [r cs-discoveries-q2]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\r\n* Chart Paper\r\n* Post-its\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals"
    },
    "q2/unit-4-preview": {
        "cs_content": "Teachers are introduced to what is in Unit 4 and start thinking ahead about how the stuff they are doing currently connects to that unit.",
        "description": "Introduction to what is in Unit 4 of CS Discoveries and do a small activity from the unit.",
        "overview": "Introduction to what is in Unit 4 of CS Discoveries and do a small activity from the unit.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of [r cs-discoveries-q2]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* The Teapot Activity Guide: [bit.ly/teapot-u4](bit.ly/teapot-u4)\n* Computer\n"
    },
    "q3-alternative/s": {
        "cs_content": "This is the time to come back together as a group and catch up on how things have been going on. This means sharing highlights but also making sure concerns are voiced.",
        "description": "Kick off the workshop by having teachers share about how things are going in their classroom and generate questions they hope to address throughout the day.",
        "overview": "Kick off the workshop by having teachers share about how things are going in their classroom and generate questions they hope to address throughout the day.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q3 Semester Workshop Page](https://curriculum.code.org/plcsd/q3-semester/)\r\n* Posters up for people to add post-its to as they come in\r\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester]\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* [r cs-discoveries-q3-semester-1-2]\r\n* Poster Paper (Regional Partner Provides)\r\n* [r workshop-dashboard]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer for attendance"
    },
    "q3-alternative/s-1": {
        "cs_content": "Review the unit TTLs will focus on.",
        "description": "Overview the unit that will be the focus of the TTL session in order to remind everyone of the main components of the unit and has been explored in the past.",
        "overview": "Overview the unit that will be the focus of the TTL session in order to remind everyone of the main components of the unit and has been explored in the past.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n\r\n"
    },
    "q3-alternative/s-2": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the activity in lessons that are coming up.",
        "description": "Lesson tours of upcoming lessons for teachers on semester or less implementation",
        "overview": "Lesson tours of upcoming lessons for teachers on semester or less implementation",
        "prep": "Room Setup:\r\n\r\n* One sheet of chart paper per lesson demo’d, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\r\n* Chart Paper\r\n* Post-its\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals\r\n\r\n"
    },
    "q3-alternative/s-3": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There **WILL NOT** be time later in the day to focus on lesson planning for these lessons so make sure **ALL** questions about the lesson have been answered.",
        "description": "Teachers have time to discuss the activities they just saw and the questions they have about them. ",
        "overview": "Teachers have time to discuss the activities they just saw and the questions they have about them. ",
        "prep": "Room Setup:\r\n\r\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester]\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Chart Paper\r\n\r\nTeacher Materials:\r\n\r\n* Notes from previous session\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals\r\n* Post-its\r\n\r\n"
    },
    "q3-alternative/s-4": {
        "cs_content": "Teachers get an understanding of what Unit 4 teaches so they consider the opportunity to teach it in the future.",
        "description": "Preview the unit by doing an activity from a lesson in the unit.",
        "overview": "Preview the unit by doing an activity from a lesson in the unit.",
        "prep": "Room Setup:\r\n\r\n* None\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester]\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* [r cs-discoveries-q3-semester-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* Printed Copies of Activity Guides for Unit 4 Lesson 4 **UPDATE**\r\n* 1 per pair of people - Screens \r\n* 1 per pair of people - User\r\n* 1 per pair of people - Computer\r\n*  [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)"
    },
    "q3-alternative/s-5": {
        "cs_content": "Teachers get an understanding of what Unit 5 teaches so they consider the opportunity to teach it in the future.",
        "description": "Preview the unit by doing an activity from a lesson in the unit.",
        "overview": "Preview the unit by doing an activity from a lesson in the unit.",
        "prep": "Room Setup:\r\n\r\n* None\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester]\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* [r cs-discoveries-q3-semester-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* Printed Copies of Activity Guides for Unit 5 Lesson 2  **UPDATE**\r\n* 1 per pair of people - Animal Cards\r\n* 1 per pair of people - Worksheet\r\n*  [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)"
    },
    "q3-semester/end-of-day-wrap-up": {
        "cs_content": "Answer any remaining teachers have. Give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Answer outstanding questions and wrap up day.",
        "overview": "Answer outstanding questions and wrap up day.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester]\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n\r\n\r\nTeacher Materials:\r\n\r\n* Computers"
    },
    "q3-semester/unconference-implementation-challenges": {
        "cs_content": "Teachers have time to discuss plans for dealing with their different implementation contexts this year and in the future.",
        "description": "Teachers have time to discuss plans for dealing with their different implementation contexts this year and in the future.",
        "overview": "Teachers have time to discuss plans for dealing with their different implementation contexts this year and in the future.",
        "prep": "Room Setup:\r\n\r\n* None\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-semester]\r\n* Your local copy of the [r cs-discoveries-q3-semester-1]\r\n* [r cs-discoveries-q3-semester-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)"
    },
    "q3/end-of-day-wrap-up": {
        "cs_content": "Answer any remaining teachers have. Give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Answer outstanding questions and wrap up day.",
        "overview": "Answer outstanding questions and wrap up day.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n\r\n\r\nTeacher Materials:\r\n\r\n* Computers"
    },
    "q3/making-an-explore-implementation-plan": {
        "cs_content": "Make a plan for preparing for and doing the explore PT with your students",
        "description": "Make a plan for preparing for and doing the explore PT with your students",
        "overview": "Make a plan for preparing for and doing the explore PT with your students",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q3-1]\r\n* Your local copy of the [r cs-principles-q3]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-principles-course-exam-description-2017-2018]\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n"
    },
    "q3/non-ap-session-1-jigsaw": {
        "cs_content": "Teachers have had time to dive deep into one lesson and plan with a group for how they might teach it. In addition a whole group leaves with a list of strategies and ideas for teaching the lessons ahead.\r\n",
        "description": "s",
        "overview": "s",
        "prep": "Room Setup:\n\n* Sitting with the 3-5 people who signed up for the same lesson. Facilitators pass out the remaining lesson/activity questions to the group that will explore that lesson\n* If more than 4 - 5 participants sign up for a given lesson, break them out into groups of ~4. It's fine to have multiple groups looking at the same lesson. In this case, type the lesson question post-its into the shared notes document so all groups planning a given lesson have access. \t \n\nFacilitator Supplies:\n\n* **ADD SLIDES**\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* **ADD NOTES**\n* Laptops\n* Lesson plans\n* Journals\n* Post-its with questions from TTL session"
    },
    "q3/non-ap-session-2-unconference": {
        "cs_content": "s",
        "description": "s",
        "overview": "s",
        "prep": "s"
    },
    "q3/s": {
        "cs_content": "This is the time to come back together as a group and catch up on how things have been going on. This means sharing highlights but also making sure concerns are voiced.",
        "description": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "overview": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q3 Workshop Page](https://curriculum.code.org/plcsd/q3/)\r\n* Posters up for people to add post-its to as they come in.\r\n* **“Where are we now”** - On a piece of chart paper or on the board, create a histogram for teachers to add where they are in the curriculum. Remind teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\r\n* [r cs-discoveries-q3-full-year]\r\n* Poster Paper (Regional Partner Provides)\r\n* [r workshop-dashboard]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it, direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer for attendance"
    },
    "q3/s-1": {
        "cs_content": "Introduce the pacing, tools, goals, and content of Unit 4.",
        "description": "Introduction to the Pacing, Organization, Tools and Goals of Unit 4",
        "overview": "Introduction to the Pacing, Organization, Tools and Goals of Unit 4",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Computer\r\n"
    },
    "q3/s-2": {
        "cs_content": "Teachers get hands on with activities from Unit 4 in order to better understand the content the unit is teaching.",
        "description": "Explore the content of the unit by experiencing hands on activities from the unit.",
        "overview": "Explore the content of the unit by experiencing hands on activities from the unit.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\r\n* [r cs-discoveries-q3-full-year]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* Before Workshop Prep:\r\n* Print one copy of the [r user-interface-screens] for each pair of participants\r\n* Print one copy of the [r user-experience-computer] for each pair of participants\r\n* Print one copy of the [r user-experience-user] for each pair of participants\r\n* **Cut out the UI Screens**\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Computer\r\n"
    },
    "q3/s-3": {
        "cs_content": "Teachers have time to explore the final project that spans many lessons of the unit.",
        "description": "Explore the content of the unit by experiencing hands on activities from the unit.",
        "overview": "Explore the content of the unit by experiencing hands on activities from the unit.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\n* [r cs-discoveries-q3-full-year]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* Access to the [r unit-4-project] in the Notes Doc\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Computer\n"
    },
    "q3/s-4": {
        "cs_content": "Close out discussions of Unit 4 by answering questions and discussing teaching practice.",
        "description": "Close out discussions of Unit 4 by answering questions and discussing teaching practice.",
        "overview": "Close out discussions of Unit 4 by answering questions and discussing teaching practice.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\r\n* [r cs-discoveries-q3-full-year]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Computer"
    },
    "q3/s-5": {
        "cs_content": "Introduce the pacing, tools, goals, and content of Unit 5.",
        "description": "Introduction to Unit 5 Pacing, Organization, Goals and Tools.",
        "overview": "Introduction to Unit 5 Pacing, Organization, Goals and Tools.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Computer"
    },
    "q3/s-6": {
        "cs_content": "Teachers get hands on with activities from Unit 5 in order to better understand the content the unit is teaching.",
        "description": "Explore the content of the unit by experiencing hands on activities from the unit.",
        "overview": "Explore the content of the unit by experiencing hands on activities from the unit.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\r\n* [r cs-discoveries-q3-full-year]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* Activity Guides for Unit 5 Lesson 2\r\n* 1 copy per pair of people - [r representing-information-with-cards]\r\n* 1 copy per pair of people - [r animal-shapes]\r\n* Make sure to cut up animal shapes before workshop\r\n* Activity Guide for Unit 5 Lesson 6\r\n* 1 copy per person - [r keeping-data-secret]\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Computer\r\n"
    },
    "q3/s-7": {
        "cs_content": "Teachers have time to explore the final project that spans many lessons of the unit.",
        "description": "Learn about the project that spans multiple lessons and think about using it with your students.",
        "overview": "Learn about the project that spans multiple lessons and think about using it with your students.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\n* [r cs-discoveries-q3-full-year]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* Access to [r cs-discoveries-unit-5-project] in notes document.\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Computer"
    },
    "q3/understanding-the-explore-task": {
        "cs_content": "Time to dig deeper on two important and confusing components of the explore task: identifying a computing innovation and harmful effect.",
        "description": "Time to dig deeper on two important and confusing components of the explore task: identifying a computing innovation and harmful effect.",
        "overview": "Time to dig deeper on two important and confusing components of the explore task: identifying a computing innovation and harmful effect.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-principles-q3-1]\n* Your local copy of the [r cs-principles-q3]\n* Your local copy of the [r csp-q3-is-it-a-harmful-effect]\n* Your local copy of the [r csp-q3-is-it-a-good-computing-innovation]\n* Answer key for the two activities - [r csp-explore-prep-computing-innovation-brainstorm-activity]\n\nTeacher Materials:\n\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "q3/unit-5-wrap-up": {
        "cs_content": "Close out discussions of Unit 5 by answering questions and discussing teaching practice.",
        "description": "Discuss strategies for teaching the unit and plan for implementing.",
        "overview": "Discuss strategies for teaching the unit and plan for implementing.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1-2]\r\n* Your local copy of the [r cs-discoveries-q3-full-year-1]\r\n* [r cs-discoveries-q3-full-year]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Computer"
    },
    "q3/wrap-up": {
        "cs_content": "Answer any outstanding questions and wrap up the day.\r\n\r\nIn addition it should give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Answer outstanding questions and wrap up day.",
        "overview": "Answer outstanding questions and wrap up day.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Grab and organize the question parking lot\r\n* Your local copy of the [r cs-principles-q3-1]\r\n* Your local copy of the [r cs-principles-q3]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Computers"
    },
    "q4-semester/break": {
        "description": "Break"
    },
    "q4-semester/break-1": {
        "description": "Break"
    },
    "q4-semester/break-2": {
        "description": "Break"
    },
    "q4-semester/chapter-1-exploration": {
        "cs_content": "Being able to interact with inputs of both the on screen UI and board is key to creating interactivity. Doing this requires knowing both how to respond to events both from the UI and the board. In addition sometimes you have to get specific information from the input such as which option the user picked in a drop down or what the user typed in an input box.  This session explores those concepts with teachers.",
        "description": "Explore key activities from Unit 6 Chapter 1",
        "overview": "Explore key activities from Unit 6 Chapter 1",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1]\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals\r\n* Post-its"
    },
    "q4-semester/end-of-day-wrap-up": {
        "cs_content": "Answer any remaining questions teachers have. Give time to do the survey in person so that teachers complete it before leaving. Wrap up the end of the year.",
        "description": "Answer outstanding questions and wrap up day. Close out the year.",
        "overview": "Answer outstanding questions and wrap up day. Close out the year.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1]\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n\r\n"
    },
    "q4-semester/lunch": {
        "description": "Lunch"
    },
    "q4-semester/s": {
        "cs_content": "This is the time to come back together as a group and catch up on how things have been going on. This means sharing highlights but also making sure concerns are voiced.",
        "description": "Kick off the day by discussing how things are going and generating topics of interest.",
        "overview": "Kick off the day by discussing how things are going and generating topics of interest.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q4 Semester Workshop Page](https://curriculum.code.org/plcsd/q4-semester/)\r\n* Posters up for people to add post-its to as they come in\r\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1]\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n* [r cs-discoveries-q4-semester]\r\n* Poster Paper (Regional Partner Provides)\r\n* [r workshop-dashboard]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer for attendance"
    },
    "q4-semester/s-1": {
        "cs_content": "Review the unit TTLs will focus on.",
        "description": "Overview the unit that will be the focus of the TTL session.",
        "overview": "Overview the unit that will be the focus of the TTL session.",
        "prep": "Room Setup:\r\n\r\n* None\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)"
    },
    "q4-semester/s-2": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the activity in lessons that are coming up.",
        "description": "Lesson tours of upcoming lessons.",
        "overview": "Lesson tours of upcoming lessons.",
        "prep": "Room Setup:\r\n\r\n* One sheet of chart paper per lesson demoed, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\r\n* Chart Paper\r\n* Post-its\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals\r\n\r\n\r\n"
    },
    "q4-semester/s-3": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons, teachers have time to discuss the activities and the questions they have about them. There **WILL NOT** be time later in the day to focus on lesson planning for these lessons so make sure **ALL** questions about the lesson have been answered.",
        "description": "Teachers have time to discuss the activities they just saw and the questions they have about them",
        "overview": "Teachers have time to discuss the activities they just saw and the questions they have about them",
        "prep": "Room Setup:\r\n\r\n* Make sure the chart paper used in the lesson demos is still hung in the room.\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1]\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Chart Paper\r\n\r\nTeacher Materials:\r\n\r\n* Notes from previous session\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals\r\n* Post-its\r\n\r\n"
    },
    "q4-semester/s-5": {
        "cs_content": "Teachers have a chance to get familiar with the board as they explore what they notice from just looking at it. Then they get their computers all set up to use the board. Finally they try out using the board to control the LED.",
        "description": "Introduces the Circuit Playground and get everyone set up to use the board during the day",
        "overview": "Introduces the Circuit Playground and get everyone set up to use the board during the day",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-discoveries-q4-semester-1]\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\n* [r cs-discoveries-facilitation-guide]\n* [Circuit Playground Trouble Shooting Guide](https://docs.google.com/document/d/1UpBSYC0OzZDsGLkGFrj_kMhNCm8asmo4VXAS5RS9XDg/edit)\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Laptops\n* Journals\n* Post-its"
    },
    "q4-semester/session-sss": {
        "cs_content": "Start the day by warming up teachers' brains by doing something in App Lab that is new, but also comfortable as it connects to things they did in Unit 3 and 4.",
        "description": "Get familiar with the App Lab environment before adding in the circuit playground",
        "overview": "Get familiar with the App Lab environment before adding in the circuit playground",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1]\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals\r\n* Post-its"
    },
    "q4-semester/unit-6-intro": {
        "cs_content": "Overview of Unit 6.",
        "description": "Introduces the key elements of the unit.",
        "overview": "Introduces the key elements of the unit.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-semester-1]\r\n* Your local copy of the [r cs-discoveries-q4-semester-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals\r\n* Post-its"
    },
    "q4/break": {
        "description": "Break"
    },
    "q4/break-1": {
        "description": "Break"
    },
    "q4/chapter-1-exploration": {
        "cs_content": "Being able to interact with inputs of both the on screen UI and board is key to creating interactivity. Doing this requires knowing both how to respond to events both from the UI and the board. In addition sometimes you have to get specific information from the input such as which option the user picked in a drop down or what the user typed in an input box.  This sessions explores those concepts with teachers.",
        "description": "Explore key activities from Unit 6 Chapter 1.",
        "overview": "Explore key activities from Unit 6 Chapter 1.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\r\n* Your local copy of the [r cs-discoveries-q4-full-year]\r\n* [r cs-discoveries-q4-full-year-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer"
    },
    "q4/lunch": {
        "description": "Lunch"
    },
    "q4/s": {
        "cs_content": "This is the time to come back together as a group and catch up on how things have been going on. This means sharing highlights but also making sure concerns are voiced.",
        "description": "Kick off the day by discussing how things are going and generating topics of interest.",
        "overview": "Kick off the day by discussing how things are going and generating topics of interest.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q4 Semester Workshop Page](https://curriculum.code.org/plcsd/q4-semester/)\r\n* Posters up for people to add post-its to as they come in\r\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\r\n* Your local copy of the [r cs-discoveries-q4-full-year]\r\n* [r cs-discoveries-q4-full-year-1-2]\r\n* Poster Paper (Regional Partner Provides)\r\n* [r workshop-dashboard]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer for attendance"
    },
    "q4/s-1": {
        "cs_content": "Teachers have a chance to get familiar with the board as they explore what they notice from just looking at it. Then they get their computers all set up to use the board. Finally they try out using the board to control the LED.",
        "description": "Introduces the Circuit Playground and get everyone set up to use the board during the day",
        "overview": "Introduces the Circuit Playground and get everyone set up to use the board during the day",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\n* Your local copy of the [r cs-discoveries-q4-full-year]\n* [r cs-discoveries-q4-full-year-1-2]\n* [Circuit Playground Trouble Shooting Guide](https://docs.google.com/document/d/1UpBSYC0OzZDsGLkGFrj_kMhNCm8asmo4VXAS5RS9XDg/edit)\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Journal (Should bring with them)\n* Post-its\n* Computer"
    },
    "q4/s-2": {
        "cs_content": "Overview of Unit 6.",
        "description": "Introduces the key elements of the unit.",
        "overview": "Introduces the key elements of the unit.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\r\n* Your local copy of the [r cs-discoveries-q4-full-year]\r\n* [r cs-discoveries-q4-full-year-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer"
    },
    "q4/s-4": {
        "cs_content": "Set the context of the chapter 2 lessons teachers saw by summarizing chapter 2 and how the unit ends. Then give teachers time to reflect on how they will approach this unit with their classroom, make plans, and discuss as a group.",
        "description": "Wrap up the exploration of Unit 6 and make a plan for implementing in your classroom.",
        "overview": "Wrap up the exploration of Unit 6 and make a plan for implementing in your classroom.",
        "prep": "Room Setup :\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\r\n* Your local copy of the [r cs-discoveries-q4-full-year]\r\n* [r cs-discoveries-q4-full-year-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer"
    },
    "q4/s-5": {
        "cs_content": "Teachers have the chance to get familiar with the Unit 6 Chapter 1 project. After they are familiar with the project they reflect on Unit 6 Chapter 1 and consider how they might approach this chapter with their class.",
        "description": "Explore the Unit 6 Chapter 1 project and reflect on key teaching strategies for the chapter.",
        "overview": "Explore the Unit 6 Chapter 1 project and reflect on key teaching strategies for the chapter.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\r\n* Your local copy of the [r cs-discoveries-q4-full-year]\r\n* [r cs-discoveries-q4-full-year-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer"
    },
    "q4/s-6": {
        "cs_content": "Start the day by warming up teachers' brains by doing something in App Lab that is new, but also comfortable as it connects to things they did in Unit 3 and 4.",
        "description": "Get familiar with the App Lab environment before adding in the circuit playground",
        "overview": "Get familiar with the App Lab environment before adding in the circuit playground",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\r\n* Your local copy of the [r cs-discoveries-q4-full-year]\r\n* [r cs-discoveries-q4-full-year-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer"
    },
    "q4/s-8": {
        "cs_content": "Answer any remaining questions teachers have. Give time to do the survey in person so that teachers complete it before leaving. Wrap up the end of the year.",
        "description": "Answer outstanding questions and wrap up day. Close out the year.",
        "overview": "Answer outstanding questions and wrap up day. Close out the year.",
        "prep": "Room Setup :\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\n* Your local copy of the [r cs-discoveries-q4-full-year]\n* [r cs-discoveries-q4-full-year-1-2]\n* For closing the workshop: [r workshop-dashboard]\n* Directions on closing the workshop: [Workshop Dashboard How-To Guide](https://docs.google.com/document/d/19K95qf39WjhSeurF3sPz5iRZW4TnPZ2qrKUrH4YXPjM/edit) \n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Journal (Should bring with them)\n* Post-its\n* Computer"
    },
    "q4/unit-6-content-dive-part-2": {
        "cs_content": "Teachers experience important concepts from Chapter 2: arrays (Color LEDs) and physical prototyping. ",
        "description": "Explore key activities from Unit 6 Chapter 2.",
        "overview": "Explore key activities from Unit 6 Chapter 2.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-discoveries-q4-full-year-1]\r\n* Your local copy of the [r cs-discoveries-q4-full-year]\r\n* [r cs-discoveries-q4-full-year-1-2]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them)\r\n* Post-its\r\n* Computer"
    },
    "quarter-2-workshop/s": {
        "cs_content": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "description": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "overview": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q2 Workshop Page](https://curriculum.code.org/plcsp/q2/)\r\n* Posters up for people to add post-its to as they come in\r\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q2]\r\n* Your local copy of the [r cs-principles-q2-1]\r\n* [r cs-principles-q2-discussion-sessions]\r\n* [r cs-discoveries-facilitation-guide]\r\n* [r cs-discoveries-facilitator-playbook]\r\n* Poster Paper (Regional Partner Provides)\r\n* [r workshop-dashboard]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book](Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Journal (Should bring with them.)\r\n* Post-its"
    },
    "quarter-2-workshop/s-1": {
        "cs_content": "Introduce teachers to Unit 3 and App Lab.",
        "description": "Facilitators introduce Unit 3 and App Lab.",
        "overview": "Facilitators introduce Unit 3 and App Lab.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-principles-q2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n"
    },
    "quarter-2-workshop/s-2": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the *activity* in lessons that are coming up.",
        "description": "Teachers have a chance to get familiar with the activity in lessons that are coming up.",
        "overview": "Teachers have a chance to get familiar with the *activity* in lessons that are coming up.",
        "prep": "Room Setup:\r\n\r\n* One sheet of chart paper per lesson demo’d, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of [r cs-principles-q2]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\r\n* Chart Paper\r\n* Post-its\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Laptops\r\n* Journals\r\n"
    },
    "quarter-2-workshop/s-3": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There will be time later in the day to focus on lesson planning for these lessons so this is a time to mostly get out questions about the lesson and clarify the activity itself.",
        "description": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There will be time later in the day to focus on lesson planning for these lessons so this is a time to mostly get out questions about the lesson and clarify the activity itself.",
        "overview": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There will be time later in the day to focus on lesson planning for these lessons so this is a time to mostly get out questions about the lesson and clarify the activity itself.",
        "prep": "Room Setup:\r\n\r\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-principles-q2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* Notes from previous session\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Laptops\r\n* Journals\r\n* Chart Paper\r\n* Post-its\r\n"
    },
    "quarter-2-workshop/s-4": {
        "cs_content": "Plan a lesson that was explored during TTL.",
        "description": "Teachers work with a group to plan for teaching one of the upcoming lessons. Groups then share their ideas for future lessons so that everyone hears about strategies and things to keep in mind when planning future lessons.",
        "overview": "Teachers work with a group to plan for teaching one of the upcoming lessons. Groups then share their ideas for future lessons so that everyone hears about strategies and things to keep in mind when planning future lessons.",
        "prep": "Room Setup:\r\n\r\n* Sitting with the 3-5 people who signed up for the same lesson. Facilitators pass out the remaining lesson/activity questions to the group that will explore that lesson\r\n* If more than 4 - 5 participants sign up for a given lesson, break them out into groups of ~4. It's fine to have multiple groups looking at the same lesson. In this case, type the lesson question post-its into the shared notes document so all groups planning a given lesson have access. \t \r\n\r\nFacilitator Supplies:\r\n\r\n* [r cs-principles-q2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* [r cs-principles-q2-1]\r\n* Laptops\r\n* Lesson plans\r\n* Journals\r\n* Post-its with questions from TTL session"
    },
    "quarter-2-workshop/s-5": {
        "cs_content": "Teachers have time to consider different profiles of students to recruit to their class and then return to their recruitment plan from the summer to think about how they are going to start recruiting for next year.",
        "description": "Discuss recruitment and revisit recruitment plans made at TeacherCon.",
        "overview": "Discuss recruitment and revisit recruitment plans made at TeacherCon.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of [r cs-principles-q2-1]\n* Your local copy of [r cs-principles-q2]\n* [r cs-discoveries-facilitation-guide]\n* Your local copy of [r cs-principles-q2-discussion-sessions]\n\nTeacher Materials:\n\n* [r swipe-right-for-cs]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "quarter-2-workshop/s-6": {
        "cs_content": "Multiple Choice Exam : Discuss what the multiple choice AP exam is like and how to help students prepare for that.",
        "description": "Teachers discuss preparing students for the multiple choice AP exam.",
        "overview": "Teachers discuss preparing students for the multiple choice AP exam.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of [r cs-principles-q2]\r\n* Your local copy of [r cs-principles-q2-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n* [r cs-principles-q2-discussion-sessions]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book](Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)"
    },
    "quarter-2-workshop/s-7": {
        "cs_content": "Answer any outstanding questions and wrap up the day.\r\n\r\nIn addition it should give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Teachers have time to discuss lingering questions and then wrap up the day. Teachers will also take the end of workshop survey.",
        "overview": "Teachers have time to discuss lingering questions and then wrap up the day. Teachers will also take the end of workshop survey.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Grab and organize the question parking lot\r\n* Your local copy of [r cs-discoveries-q2]\r\n* Your local copy of [r cs-principles-q2-1]\r\n* Planned discussion session in your copy of: [r cs-principles-q2-discussion-sessions]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Computers"
    },
    "quarter-3-workshop/s": {
        "cs_content": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "description": "Kick off the day by discussing how things are going and generating topics of interest.",
        "overview": "Kick off the day by discussing how things are going and generating topics of interest.",
        "prep": "Room Setup (using the supplies provided by regional partner):\n\n* See Workshop Room Setup on [Q3 Workshop Page](https://curriculum.code.org/plcsp/q3/)\n* Posters up for people to add post-its to as they come in\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\n* **Question Parking Lot** - For people to put up questions they have.\n \nFacilitator Supplies:\n\n* Your local copy of the [r cs-principles-q3]\n* Your local copy of the [r cs-principles-q3-1]\n* [r cs-principles-q3-discussion-session]\n* [r cs-discoveries-facilitation-guide]\n* [r cs-discoveries-facilitator-playbook]\n* Poster Paper (Regional Partner Provides)\n* [r workshop-dashboard]\n\nTeacher Materials:\n\n* [r csp-teal-book](Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Journal (Should bring with them.)\n* Post-its"
    },
    "quarter-3-workshop/s-1": {
        "cs_content": "Introduce teachers to Unit 4.",
        "description": "Introduce the philosophy, pacing, and tools in Unit 4.",
        "overview": "Introduce the philosophy, pacing, and tools in Unit 4.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-principles-q3-1]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "quarter-3-workshop/s-2": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the *activity* in lessons that are coming up.",
        "description": "Provide a brief overview of a handful of lessons that will be explore more deeply at later sessions",
        "overview": "Provide a brief overview of a handful of lessons that will be explore more deeply at later sessions",
        "prep": "Room Setup:\n\n* One sheet of chart paper per lesson demo’d, hung around the room \n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-principles-q3-1]\n* [r cs-discoveries-facilitation-guide]\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\n* Chart Paper\n* Post-its\n\nTeacher Materials:\n\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Laptops\n* Journals"
    },
    "quarter-3-workshop/s-3": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There **WILL NOT** be time later in the day to focus on lesson planning for these lessons so make sure **ALL** questions about the lesson have been answered.",
        "description": "Collect and organize questions about the lesson that need to be discussed",
        "overview": "Collect and organize questions about the lesson that need to be discussed",
        "prep": "Room Setup:\r\n\r\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q3-1]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* Notes from previous session\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Laptops\r\n* Journals\r\n* Chart Paper\r\n* Post-its\r\n"
    },
    "quarter-3-workshop/s-4": {
        "cs_content": "Close out conversations about Unit 4 and begin thinking about how it connects to the Explore PT.",
        "description": "Close out conversations about Unit 4 and begin thinking about how it connects to the Explore PT",
        "overview": "Close out conversations about Unit 4 and begin thinking about how it connects to the Explore PT",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-principles-q3-1]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* [r cs-principles-course-exam-description-2017-2018]\n"
    },
    "quarter-3-workshop/s-5": {
        "cs_content": "Score sample student work. After scoring look at the college board commentary and discuss how the rubric is being applied to student work.",
        "description": "Score sample student work. After scoring look at the college board commentary and discuss how the rubric is being applied to student work.",
        "overview": "Score sample student work. After scoring look at the college board commentary and discuss how the rubric is being applied to student work.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* 3 [Score Sharing Charts](https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screen-Shot-2017-11-13-at-3.43.17-PM.png) on chart paper - 1 for each sample\n* Your local copy of the [r cs-principles-q3-1]\n* Your local copy of the [r cs-principles-q3]\n* College Board Commentary on Sample Explore Tasks\n* [r cb-explore-pt-sample-c-88]\n* [r cb-explore-pt-sample-d-58]\n* [r cb-explore-pt-sample-e-28]\n\nTeacher Materials:\n\n* 1 printed copy of the [Explore Task Rubric](https://apcentral.collegeboard.org/pdf/2018-explore-performance-tasks-sg.pdf?course=ap-computer-science-principles) for each teacher\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n\n"
    },
    "quarter-4-workshop/s": {
        "cs_content": "Kick off the workshop by reflecting on how things are going and generating a set of topics that participants need to talk about.",
        "description": "Kick off the day by discussing how things are going and generating topics of interest.",
        "overview": "Kick off the day by discussing how things are going and generating topics of interest.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q4 Workshop Page](https://curriculum.code.org/plcsp/q4/)\r\n* Posters up for people to add post-its to as they come in\r\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q4-1]\r\n* Your local copy of the [r cs-principles-q4-1-2]\r\n* [r cs-principles-q4]\r\n* [r cs-discoveries-facilitation-guide]\r\n* [r cs-discoveries-facilitator-playbook]\r\n* Poster Paper (Regional Partner Provides)\r\n* [r workshop-dashboard]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book](Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Journal (Should bring with them.)\r\n* Post-its"
    },
    "quarter-4-workshop/s-1": {
        "cs_content": "Introduce teachers to Unit 5.",
        "description": "Introduce the philosophy, pacing, and tools in Unit 5.",
        "overview": "Introduce the philosophy, pacing, and tools in Unit 5.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q4-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n"
    },
    "quarter-4-workshop/s-2": {
        "cs_content": "Provide a brief overview of a handful of lessons that will be explored more deeply in a later session. Teachers have a chance to get familiar with the activity in lessons that are coming up.",
        "description": "Provide a brief overview of a handful of lessons that will be explore more deeply at later sessions",
        "overview": "Provide a brief overview of a handful of lessons that will be explore more deeply at later sessions",
        "prep": "Room Setup:\r\n\r\n* One sheet of chart paper per lesson demo’d, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q4-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\r\n* Chart Paper\r\n* Post-its\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Laptops\r\n* Journals"
    },
    "quarter-4-workshop/s-3": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There WILL NOT be time later in the day to focus on lesson planning for these lessons so make sure ALL questions about the lesson have been answered.",
        "description": "Collect and organize questions about the lesson that need to be discussed",
        "overview": "Collect and organize questions about the lesson that need to be discussed",
        "prep": "Room Setup:\n\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-principles-q4-1]\n* Your local copy of the [r cs-principles-q4-1-2]\n* [r cs-principles-q4]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* Notes from previous session\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Laptops\n* Journals\n* Chart Paper\n* Post-its"
    },
    "quarter-4-workshop/s-4": {
        "cs_content": "Close out conversations about Unit 5 and begin thinking about how it connects to the Create PT.",
        "description": "Close out conversations about Unit 5 and begin thinking about how it connects to the Create PT",
        "overview": "Close out conversations about Unit 5 and begin thinking about how it connects to the Create PT",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q4-1-2]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* [r cs-principles-course-exam-description-2017-2018]\r\n"
    },
    "quarter-4-workshop/s-5": {
        "cs_content": "Score sample student work. After scoring look at the College Board commentary and discuss how the rubric is being applied to student work.",
        "description": "Score sample student work. After scoring look at the college board commentary and discuss how the rubric is being applied to student work.",
        "overview": "Score sample student work. After scoring look at the college board commentary and discuss how the rubric is being applied to student work.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* 3 [Score Sharing Charts](https://cdo-curriculum.s3.amazonaws.com/media/uploads/Screen-Shot-2017-11-13-at-3.43.17-PM.png) on chart paper - 1 for each sample  \n* Your local copy of the [r cs-principles-q4-1]\n* Your local copy of the [r cs-principles-q4-1-2]\n* [r cs-principles-q4]\n* College Board Commentary on Sample Create Tasks\n* [r create-sample-c]\n* [r create-sample-d]\n* [r create-sample-j]\n\nTeacher Materials:\n\n* 1 printed copy of the [Create PT Rubric](https://apcentral.collegeboard.org/pdf/2018-create-performance-tasks-sg.pdf?course=ap-computer-science-principles) for each teacher\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n* Create Examples - links found in the notes document\n"
    },
    "quarter-4-workshop/s-6": {
        "cs_content": "Time to dig deeper into two important and tough components of the Create Task: deciding on a project and identifying an algorithm.",
        "description": "Time to dig deeper on two important components of the create task.",
        "overview": "Time to dig deeper on two important components of the create task.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* Your local copy of the [r cs-principles-q4-1]\n* Your local copy of the [r cs-principles-q4-1-2]\n* [r cs-principles-q4]\n* [r create-pt-survival-guide-KEY]\n\n\nTeacher Materials:\n\n* [r create-pt-survival-guide]\n* [r cs-principles-course-exam-description-2017-2018]\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\n"
    },
    "quarter-4-workshop/s-7": {
        "cs_content": "Make a plan for preparing for and doing the explore PT with your students",
        "description": "Make a plan for preparing for and doing the Create PT with your students",
        "overview": "Make a plan for preparing for and doing the Create PT with your students",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r cs-principles-q4-1]\r\n* Your local copy of the [r cs-principles-q4-1-2]\r\n* [r cs-principles-q4]\r\n\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-principles-course-exam-description-2017-2018]\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n"
    },
    "quarter-4-workshop/wrap-up": {
        "cs_content": "Answer any outstanding questions and wrap up the day.\r\n\r\nIn addition it should give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Answer outstanding questions and wrap up day.",
        "overview": "Answer outstanding questions and wrap up day.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* Grab and organize the question parking lot\r\n* Your local copy of the [r cs-principles-q4-1]\r\n* Your local copy of the [r cs-principles-q4-1-2]\r\n* [r cs-principles-q4]\r\n* For closing the workshop: [r workshop-dashboard]\r\n* Directions on closing the workshop: [r cs-discoveries-facilitator-playbook] \r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r csp-teal-book] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csp-teal-book)\r\n* Computers"
    },
    "solving-data-problems/automating-data-decisions-draft": {
        "cs_content": "This lesson demonstrates to students that the last step in the data problem solving process, making a decision, is something that a computer can do automatically if it's given an algorithm. It builds off the previous lesson which demonstrates the importance of designing the way you collect data in order for it to be usable for interpretation. This is especially true for computers which are much better suited for the multiple choice style data they will see in this lesson.",
        "description": "In this lesson students look at a simple example of how a computer could be used to complete the decision making step of the data problem solving process. Students are given the task of creating an algorithm that could suggest a vacation spot.  Students then create rules, or an algorithm, that a computer could use to make this decision automatically. Students share their rules and what choices their rules would make with the class data. They then use their rules on data from their classmates to test whether their rules would make the same decision that  a person would. The lesson concludes with a discussion about the benefits and drawbacks of using computers to automate the data problem solving process.",
        "overview": "In this lesson students look at a simple example of how a computer could be used to complete the decision making step of the data problem solving process. Students are given the task of creating an algorithm that could suggest a vacation spot.  Students then create rules, or an algorithm, that a computer could use to make this decision automatically. Students share their rules and what choices their rules would make with the class data. They then use their rules on data from their classmates to test whether their rules would make the same decision that  a person would. The lesson concludes with a discussion about the benefits and drawbacks of using computers to automate the data problem solving process."
    },
    "solving-data-problems/collecting-data": {
        "cs_content": "In this lesson students see three examples of how the data problem solving process is used to solve real-world problems.  This lesson expands the types of problems students think of as data problems and helps them to relate what they know about data to their real world experiences with common Internet services. The examples also provide an opportunity to reflect on the fact that in their own lives they are intentionally and unintentionally producing data that companies collect and use.",
        "description": "This lesson covers how data is collected and used by a organizations to solve problems in the real world. The class looks at three scenarios that could be solved using data and brainstorms the types of data they would want to solve them and how they could collect the data.  Each scenario also includes a video about a real-world service that has solved a similar problem with data.",
        "overview": "In this lesson, students look at how data is collected and used by organizations to solve problems in the real world. The lesson begins with a quick review of the data problem solving process they  explored in the last lesson. Then students are presented three scenarios that could be solved using data and brainstorm the types of data they would want to solve them and how they could collect the data. Each problem is designed to reflect a real-world service that exists. After brainstorming, students watch a video about a real-world service and record notes about what data is collected by the real-world service and how it is used. At the end of the lesson, students record whether data was provided actively by a user, was recorded passively, or is collected by sensors.",
        "prep": "* Print copies of [r data-in-the-real-world]\r\n* Prepare projector if you will show videos to the whole class "
    },
    "solving-data-problems/interpreting-data": {
        "cs_content": "In the previous two lessons, students used data visualization to help them make decisions about a single variable (what locker to choose, which topping to order, etc.).  In this lesson, they learn how to find relationships between variables using cross tabulation in the responses to different survey questions.  Determining how answer choices relate to each other will allow them to make predictions about users based on previous responses.  In the final project, they will use this same type of analysis to help them to design an algorithm for their recommendation generator.",
        "description": "Students begin the lesson by looking at a cake preference survey that allows respondents to specify both a cake and an icing flavor.  They discuss how knowing the relationship between cake and icing preference helps them better decide which combination to recommend.  They are then introduced to cross tabulation, which allows them to graph relationships to different preferences.  They use this technique to find relationships in a preference survey, then brainstorm the different types of problems that this process could help solve.",
        "overview": "Students begin the lesson by looking at a cake preference survey that allows respondents to specify both a cake and an icing flavor.  They discuss how knowing the relationship between cake and icing preference helps them better decide which combination to recommend.  They are then introduced to cross tabulation, which allows them to graph relationships to different preferences.  They use this technique to find relationships in a preference survey, then brainstorm the different types of problems that this process could help solve."
    },
    "solving-data-problems/making-decisions-with-data": {
        "cs_content": "Students begin exploring the data problem solving process in this lesson at the end, making decisions with data that has already been collected and interpreted. Students likely do not come into this course with a lot of experience making decisions based on data in this way. This lesson intends to contextualize this step of the process inside of decisions that may be familiar to their daily lives.\r\n\r\nMaking decisions with data is not a formulaic process. Different people might draw different conclusions with the same data. It's important that students ground their decisions in the data collected, but there's usually not a \"right answer\". This lesson is an opportunity to introduce the nuances of making decisions in a controlled and shared context before students go off to start collecting more information of their own.",
        "description": "This lesson gives the class a chance to practice the data problem solving process introduced in the last lesson.  Not all questions have right answers and in some cases the class can and should decide that they should collect more data. The lesson concludes with a discussion of how different people could draw different conclusions from the same data, or how collecting different data might have affected the decisions they made.",
        "overview": "In this lesson students get practice making decisions with data based on some problems designed to be familiar to middle school students. Students work in groups discussing how they would use the data presented to make a decision before the class discusses their final choices. Not all questions have right answers and in some cases students can and should decide that they should collect more data. The lesson concludes with a discussion of how different people could draw different conclusions from the same data, or how collecting different data might have affected the decisions they made.",
        "prep": "* Print copies of [r making-decisions-with-data]"
    },
    "solving-data-problems/problem-solving-and-data": {
        "cs_content": "Students have spent the first half of the unit exploring how computers represent different types of information, or data.  In this lesson, they learn how data can be used to solve real word problems, revising the problem solving process through the lens of data analysis.",
        "description": "This lesson covers how the problem solving process can be tailored to deal with data problems, in particular.  The class is tasked with deciding what a city most needs to spend resources on.  They must find and use data from the Internet to support their decision.",
        "overview": "In this lesson, students use the problem solving process from earlier in the course to solve a data problem.  After reviewing the process, the class is presented with a decision: whether a city should build a library, pet shelter, or fire department.  Students work in teams to collect information on the Internet to help them decide what should be built, then use this information build an argument that will convince the city council of their choice.  They then map what they have done to the problem solving process that they have been using throughout the course, comparing the general problem solving process to its specific application to data problems."
    },
    "solving-data-problems/project-solve-a-data-problem": {
        "cs_content": "This project serves as an assessment for the second chapter of the unit. Students should demonstrate that they can apply the data problem solving process to a problem or domain that they are interested in.  Students complete many of the same activities, but linked together in one comprehensive project.  For example, students have previously used cross tabulation to find relationships between preferences and have created recommendation algorithms, but in this project, they will use the relationships that they find in the data to create their algorithms. The last step in the activity is intentionally vague on how students will present their work so that you may choose the method that makes the most sense for your classroom.",
        "description": "To conclude this unit the class designs ways to use data to make a recommendations or predictions to help solve a problem.  In the first several steps the class brainstorms problems, performs simple research, and defines a problem of their choosing. They then decide what kind of data they want to collect, how it could be collected, and how it could be used, before exchanging feedback and giving a final presentation.",
        "overview": "To conclude this unit, students design a recommendation engine based on data that they collect and analyze from their classmates. After looking at an example of a recommendation app, students follow a project guide to complete this multi-day activity. In the first several steps, students choose what choice they want to help the user to make, what data they need to give the recommendation, create a survey, and collect information about their classmates' choices. They then interpret the data and use what they have learned to create the recommendation algorithm.  Last, they use their algorithms to make recommendations to a few classmates. Students perform a peer review and make any necessary updates to their projects before preparing a presentation to the class.",
        "prep": "* Print copies of [r solve-a-data-problem]\r\n* Print copies of [r solve-a-data-problem-peer-review]"
    },
    "static-web-content/clean-code-and-debugging": {
        "cs_content": "[v Bug]s in HTML are more forgiving than programming languages such as JavaScript (the language used in Unit 3). However [v debugging] is an explicit problem solving process that students will use repeatedly when working with any language on the computer. When problem solving there are different strategies that a computer scientist can use to find the source of the issue. \r\n\r\nIn addition to the strategies to fix bugs once they have occurred there are certain styles of writing HTML code that help prevent bugs or make it easier to find bugs.  The three main style conventions used are [v comment], [v whitespace], and [v indentation]. To motivate students to consider using these conventions in the future, the debugging levels demonstrate that it is easier to debug a program that is written with these style conventions. ",
        "description": "In this lesson covers common issues that arise when designing web pages in HTML. The class will correct errors in a sequence of increasingly complex web pages found on Code Studio and learn the importance of comments, whitespace, and indentation as tools for making web pages easier to read.",
        "overview": "Students deal with common issues that arise when designing web pages in HTML. Students will correct errors in a sequence of increasingly complex web pages. In the process they will learn the importance of comments, whitespace, and indentation as tools for making web pages easier to read. At the end of the lesson students create a list of strategies for debugging web pages and ensuring they are easy to read and maintain.",
        "prep": "* Prepare poster paper, sticky notes, and markers"
    },
    "static-web-content/describing-webpages": {
        "cs_content": "This lesson introduces many new concepts and tools to students. They are introduced to HTML, the Web Lab tool, and how to navigate lesson resources on Code.org in general. While the understanding of HTML as a way to communicate the structure of a web page is a critical learning objective, this lesson has students do minimal programming since there are many other new ideas and tools to grasp. In the next lesson students will have more time to spend programming in HTML.",
        "description": "This lesson introduces to HTML as a solution to the problem of how to communicate both the content and structure of a website to a computer. The lesson begins with a brief unplugged activity demonstrating the challenges of effectively communicating the structure of a web page. The class looks at an HTML page in Web Lab and discusses how HTML tags help solve this problem, then uses HTML to write the first web pages of the unit.",
        "overview": "In this lesson students are introduced HTML as a solution to the problem of how to communicate both the content and structure of a website to a computer. The lesson begins with a brief unplugged activity demonstrating the challenges of effectively communicating the structure of a web page. Students then look at an exemplar HTML page in Web Lab and discuss with their classmates how HTML tags help solve this problem. Students then write their first HTML. A wrap-up discussion helps to solidify the understanding of content vs. structure that was developed throughout the lesson.",
        "prep": "* Review the Code Studio levels"
    },
    "static-web-content/digital-footprint": {
        "cs_content": "Now that students are beginning to share information publicly, it's crucial that we instill in them an understanding of the potential consequences of sharing personal information online.\r\n\r\nThe first activity engages students in considering specific pieces of personal information and the audiences with whom they would or would not want that information to remain private. The goal of this activity is for students to understand that for any given piece of personal information if there is _any_ audience they would like to maintain privacy with they should consider not posting that information online.\r\n\r\nIn a follow up activity students look through several example social media profiles for fake students. Individually these pages contain relatively innocuous information, but when students cross reference information across multiple profiles they see how a detailed picture (or [v digital footprint]) can start to form. Through this activity students see that even information that they may not see as private on its own can share more information than intended when combined with other small details.",
        "description": "This lesson takes a step back from creating the personal website to talk about personal information people choose to share digitally.  The class begins by discussing what types of information are good to share with other people, then looks at several sample social media pages to see what types of personal information could be shared intentionally or unintentionally.  Finally, the class comes up with a set of guidelines to follow when putting information online.",
        "overview": "As students have recently spent some time thinking about the actual content that will go into their personal website, this lesson takes a step back from the unit-long project (publication of a personal website) to help students articulate what personal information they choose to share digitally and with whom.  It also reinforces the notion that much of the information that they choose to share digitally falls largely out of their control the moment it is released.  \r\n\r\nStudents begin by individually identifying appropriate audiences with whom they would be comfortable sharing given pieces of personal information.  They then look at several social media pages to determine what sorts of information people are sharing about themselves or one another.  Last, students reflect on what guidelines they think are appropriate for posting information online.\r\n\r\nThe ultimate point of this lesson is not to scare students, but rather to experientially bring students to realizing precisely what level of control they don’t have in releasing information into the web.",
        "prep": "* Print out copies of [r when-does-your-privacy-matter] for each student\r\n* Print out copies of [r social-sleuth] for each student (or one for each group if grouping)"
    },
    "static-web-content/images-on-the-web": {
        "cs_content": "This lesson introduces list elements, which are different from the previous elements in that they involve nested tags. Students should understand that the list item elements (<li></li>) go inside the list elements (<ul></ul> or <ol></ol>). \r\n\r\nStudents also continue to work on their projects, adding a new HTML page.  Students are free to choose the content of this page, but it should include some type of list.  Right now there is no way for users to navigate from one project page to another, but students will learn more about how to link the pages together in Lesson 9, right before they publish their project.  ",
        "description": "This lesson introduces ordered and unordered lists and the associated  <ul>, <ol>, and <li> HTML tags.  The class practices using the tags, then goes back to the personal web page project to add a new HTML page that includes the new tags.",
        "overview": "Students are introduced to ordered and unordered lists in HTML and work through a few levels in which they use the <ul>, <ol>, and <li> tags.  They then go back to their project, where they add a new HTML page.  Inside the new page, they write the HTML to display a recipe, top ten list, or any other content that uses the new tags that they have learned.",
        "prep": "* Have student journals (or project sketches) ready if they will use them to generate ideas for their lists page."
    },
    "static-web-content/intellectual-property": {
        "cs_content": "Until this point the only content that students have used on their web pages is their own, but it's common, and quite useful, to be able to integrate information and media created by others. Before learning about the technical ways to do this, however, we need to step back and gain a common understanding of the restrictions and purpose of copyright. We use the Creative Commons license as a clearer alternative to the more restrictive standard copyright and guide students through searching for, using, and properly citing Creative Commons licensed media.",
        "description": "This lesson covers how to use media such as images, video, or music created by others a website while respecting the rights of the creator of that media. After first studying Creative Commons licensing, the class learns how to add images to web pages, and how to give proper attribution when doing so.",
        "overview": "Starting with an discussion of their personal opinions on how others should be allowed to use their work, the class explores the purpose and role of copyright for both creators and users of creative content.  They then move on to an activity exploring the various Creative Commons licenses as a solution to the difficulty in dealing with copyright. \r\n\r\nFinally, with a common understanding of the restrictions of various Creative Commons licenses, students learn how to add images to their web pages using the <img> tag.",
        "prep": "* Preview [r creative-commons-video]. You may need to download it before school if Youtube is blocked."
    },
    "static-web-content/personal-website-connecting-pages": {
        "cs_content": "In several of the previous lessons, students created web pages that will be included in their websites. In this lesson, they will learn to link all of these pages together and publish them to the Internet.  ",
        "description": "This lesson covers hyperlinks, which allow web developers to connect pages together into one website.  The class will link together all the previous pages into one project, and create navigation bars for each page before publishing the entire site to the Web.  ",
        "overview": "After learning about how to link web pages to one another, students are finally able to publish the website they have been working on.  In this lesson, they link together all the previous pages they have created into one project, create a new page, and add navigation between the pages before publishing the entire site to the Web.  \r\n\r\n"
    },
    "static-web-content/quality-websites": {
        "cs_content": "Unit 2 is all about the World Wide Web, with a focus on creating websites for self expression. To start students thinking about why they might want to create a website, they must begin to consider how websites are useful tools for both users and creators. The lesson starts with popular websites because they all serve clear purposes for a large number of users, but eventually students are asked to narrow their vision to simpler sites that might serve the needs of a smaller user group.",
        "description": "This lesson covers the purposes that a website might serve, both for the users and the creators. The class explores a handful of the most-used websites in the United States and discusses how each of those sites is useful for users and how it might also serve its creators.",
        "overview": "Every website has a purpose, a reason someone created it and others use it. In this lesson, students will start to consider the purposes a website might serve, both for the users and the creators. Students will explore a handful of the most-used websites in the United States and try to figure out how each of those sites is useful for users and how they might also serve their creators.",
        "prep": "* Print a copy of [r top-websites-activity-guide] for each student."
    },
    "static-web-content/text-on-the-web": {
        "cs_content": "This lesson introduces the heading tags that students will use in their pages for the rest of the unit.  It also reinforces the general structure of HTML (opening tag / content / closing tag) so that students are ready to begin adding their own content in the project.\r\n\r\nThe personal web page that students work on at the end of the lesson will follow them throughout the unit. As they learn more HTML and CSS, they will improve the page, adding images, colors, and different fonts. This lesson is a chance for them to start the page, knowing that they will continue to improve it over the next few weeks.\r\n",
        "description": "This lesson continues the introduction to HTML tags, this time with headers.  The class practices using header tags to create page and section titles and learns how the different header elements are displayed by default.  Next, the class plans how to organize their content on the personal web pages that will be built across the unit and begins the first page of the project.",
        "overview": "In this lesson, students continue to use HTML to structure text on web pages, this time with headings.  Students learn how the different heading elements are displayed by default and practice using them to create page and section titles.  Students then start to decide how they will organize their content on their own personal web pages.  In the last level, students begin the project that they will continue to work on throughout the unit.",
        "prep": "* Have student journals (or project sketches) ready to give back.\r\n* If you will not use journals to track HTML tags, prepare poster paper to do so as a whole class"
    },
    "static-web-content/website-design": {
        "cs_content": "This lesson introduces the central story of Unit 2, namely that web development, and by extension computer science, is an avenue for self expression. The warm up situates web development as another means of self-expression alongside visual art, dance, music, fashion, social media, and many other ways students are likely already expressing themselves. Seeing student exemplars helps scope students expectations for their skills by the end of the unit. Finally the brainstorm of content for their website provides students an opportunity to consider what messages they want to express as they build their websites. ",
        "description": "This lesson introduces websites as a means of personal expression.  The class first discusses different ways that people express and share their interests and ideas, then looks at a few exemplar websites made by students from a previous course. Finally everyone brainstorms and shares a list of topics and interests to include, creating a resource for developing a personal website in the rest of the unit. ",
        "overview": "In this lesson students investigate ways to use websites as a means of personal expression and develop a list of topics and interests that they would want to include on a personal website. To begin the lesson students brainstorm different ways that people express and share their interests and ideas. Students then look at a few exemplar websites made by students from a previous CS Discoveries course to identify ways they are expressing their ideas. Finally students brainstorm and share a list of topics and interests they might want to include on a personal website which they can reference for ideas as they progress through the unit.",
        "prep": "* Prepare journals or optionally print copies of [r personal-website-planning-guide]"
    },
    "stuff/lesson-2": {
        "cs_content": "In this lesson, students will consider different types of computers and that these computers input, store, process, and output information as part of the problem solving process. Upcoming lessons will dive much deeper into what an information problem looks like and how computers solve these problems.",
        "description": "In this lesson the class develops a preliminary definition of a computer. After brainstorming the possible definitions for a computer, the class works in groups to sort pictures into “is a computer” or “is not a computer” on poster paper and explain their motivations for choosing some of the most difficult categorizations.  The teacher then introduces a definition of the computer and allows groups to revise their posters according to the new definition.",
        "overview": "In this lesson students develop a preliminary definition of a computer. To begin the lesson, the class will brainstorm possible definitions for a computer and place the results of this brainstorm on the board. Next, students will work in groups to sort pictures into “is a computer” or “is not a computer” on poster paper. Groups will place their posters around the room and briefly explain their motivations for choosing some of their most difficult categorizations.  The teacher will then introduce a definition of the computer and allow students to revise their posters according to the new definition.",
        "prep": "**For each group** \r\n\r\n  * Print out copies of [r what-is-a-computer]. Note there are two sets of pictures in the document but each group only needs a single set.\r\n  * Scissors (if you will not have time to cut the pictures prior to class) \r\n  * Poster paper\r\n  * Markers or colored pencils \r\n  * Glue or tape to attach pictures "
    },
    "stuff/lesson-3": {
        "cs_content": "In this lesson students see two examples of how the data problem solving process is used to solve real-world problems.  This lesson expands the types of problems students think of as data problems and helps them to relate what they know about data to their real world experiences with common Internet services. The examples also provide an opportunity to reflect on the fact that in their own lives they are intentionally and unintentionally producing data that companies collect and use.",
        "description": "This lesson covers how data is collected and used by a organizations to solve problems in the real world. The class looks at two scenarios that could be solved using data and brainstorms the types of data they would want to solve them and how they could collect the data.  Each scenario also includes a video about a real-world service that has solved a similar problem with data.",
        "overview": "In this lesson, students look at how data is collected and used by organizations to solve problems in the real world. Then students are presented two scenarios that could be solved using data and brainstorm the types of data they would want to solve them and how they could collect the data. Each problem is designed to reflect a real-world service that exists. After brainstorming, students watch a video about a real-world service and record notes about what data is collected by the real-world service and how it is used. At the end of the lesson, students record whether data was provided actively by a user, was recorded passively, or is collected by sensors.",
        "prep": "* Print copies of [r data-in-the-real-world]\r\n* Prepare projector if you will show videos to the whole class "
    },
    "stuff/lesson-4": {
        "description": "The Hour of Code is a one-hour introduction to computer science, designed to demystify \"code\", to show that anybody can learn the basics, and to broaden participation in the field of computer science.",
        "overview": "The Hour of Code is a one-hour introduction to computer science, designed to demystify \"code\", to show that anybody can learn the basics, and to broaden participation in the field of computer science."
    },
    "stuff/lesson-5": {
        "description": "In this lesson, students head over to Khan Academy to learn the basics of creating webpages using HTML and CSS.",
        "overview": "In this lesson, students head over to Khan Academy to learn the basics of creating webpages using HTML and CSS."
    },
    "stuff/lesson-6": {
        "cs_content": "This lesson introduces students to the concept of a paper prototype as a quick and dirty tool to kick off the development of an app. This prototype will also serve as the context around which students will start to parse and organize feedback from a wide variety of users. ",
        "description": "See how a paper prototype can be used to test and get feedback on software before writing any code. To help out a developer with their idea, the class tests and provides an app prototype made of paper.",
        "overview": "Students look at an important phase of design - prototyping a product that attempts to address user needs. In teams, students examine a paper prototype for a chat app called \"Txt Ur Grndkdz\". Through using this paper prototype, students get a chance to see how a simple paper prototype can be used to quickly test ideas and assumptions before we ever get to the computer. After \"using\" the provided prototype students begin to identify ways to improve the next iteration.",
        "prep": "* Print one copy of the [r user-interface-screens] for each pair of students\r\n* Print one copy of the [r user-experience-computer] for each pair of students\r\n* Print one copy of the [r user-experience-user] for each pair of students\r\n* Cut out the UI Screens or provide scissors for students to do so themselves"
    },
    "stuff/lesson-7": {
        "cs_content": "“Encryption” is a process for transforming a message so that the original is “hidden” from anyone who is not the intended recipient. Encryption is not just for the military and spies anymore. We use encryption everyday on the Internet, primarily to conduct commercial transactions, and without it our economy might grind to a halt. \r\n\r\nThis lesson gives students a first taste of the kind of thinking that goes into encrypting messages in the face of computational tools. Computational tools dramatically increase the strength and complexity of the algorithms we use to encrypt information, but these same tools also increase our ability to crack an encryption. Developing strong encryption relies on knowledge of problems that are “hard” for computers to solve, and using that knowledge to encrypt messages. As a resource, you may wish to read all of Chapter 5 of *Blown to Bits*.  It provides social context which you may want to bring to your classroom.",
        "description": "In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.  Students try their own hand at cracking a message encoded with the classic Caesar cipher and also a Random Substitution Cipher.  Students should become well-acquainted with idea that in an age of powerful computational tools, techniques of encryption will need to be more sophisticated.  The most important aspect of this lesson is to understand how and why encryption plays a role in all of our lives every day on the Internet, and that making good encryption is not trivial.  Students will get their feet wet with understanding the considerations that must go into making strong encryption in the face of powerful computational tools that can be used to crack it. The need for secrecy when sending bits over the Internet is important for anyone using the Internet.",
        "overview": "In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.  Students try their own hand at cracking a message encoded with the classic Caesar cipher and also a Random Substitution Cipher.  Students should become well-acquainted with idea that in an age of powerful computational tools, techniques of encryption will need to be more sophisticated.  The most important aspect of this lesson is to understand how and why encryption plays a role in all of our lives every day on the Internet, and that making good encryption is not trivial.  Students will get their feet wet with understanding the considerations that must go into making strong encryption in the face of powerful computational tools that can be used to crack it. The need for secrecy when sending bits over the Internet is important for anyone using the Internet.",
        "prep": "* Examine both versions of the widget"
    },
    "stuff/lesson-8": {
        "cs_content": "This activity is a fast-paced introduction to the user-centered design process. Certain shortcuts are taken such as speculating as to their user's needs rather than confirming them directly. In this lesson the primary goal is to establish that design decisions will be made with the user's needs in mind.\r\n\r\nThe activity in this lesson is an adaptation of the [Design Charrette from the University of Washington](http://www.hcde.washington.edu/research/archives#UCD-outreach).",
        "description": "In small groups, the class uses the design process to come up with ideas for smart clothing. From brainstorming, to identifying users, to finally proposing a design, this is the first of several opportunities in this unit to practicing designing a solution for the needs of others.",
        "overview": "This lesson guides students through an abbreviated design process. Students first brainstorm a list of potential users of smart clothing. As a class, they then group these ideas into broad categories and each group will choose one category of user. Groups repeat this process to brainstorm needs or concerns of their user, eventually categorizing these needs and choosing one to focus on. Finally, students design a piece of smart clothing, using the specific needs and concerns they brainstormed to guide their decision making. At the end of the class students quickly share their decision-making process and get feedback on how well their product addresses the user need they selected.",
        "prep": "* Ensure you have plenty of sticky notes, pens and large poster paper for students to work on\r\n* Set up groups with preferably 3 students each"
    },
    "stuff/lessonn": {
        "cs_content": "This activity plants the initial seed for students to think about the ways in which they might be able to solve some problems relevant to their lives with technological innovations.",
        "description": "This lesson is about getting students excited and connecting their own personal interests to computer science.  Students are asked to share something they know a lot about and teach it to a small group.  Groups make a “rapid” prototype of an innovative idea and share it.  Students watch a brief video about computing innovations.",
        "overview": "This lesson is about getting students excited and connecting their own personal interests to computer science.  Students are asked to share something they know a lot about and teach it to a small group.  Groups make a “rapid” prototype of an innovative idea and share it.  Students watch a brief video about computing innovations.\r\n",
        "prep": "- Procure post-its or paper and tape\r\n- Procure poster paper for sharing innovations\r\n- Queue up CS is Changing Everything video\r\n- Setup section in Code Studio for this course\r\n- Have student sign-up link ready to share"
    },
    "the-design-process": {
        "cs_content": "Students will enter this unit with an understanding of the problem solving process from prior units.\r\n\r\nThe problem solving process used throughout CS Discoveries is:\r\n\r\n* Define\r\n* Prepare\r\n* Try\r\n* Reflect\r\n\r\nIn this lesson, students look at real world objects to understand how the problem solving process can be applied to help others. Starting with this lesson, we will be reframing this process to include a layer of empathy, encouraging students to consider how others will experience and use the things they create.\r\n\r\nWe are purposefully starting out by looking at non-technical objects to encourage students to think more broadly about what it means to consider the end user of a product before honing in on how it specifically applies to software design",
        "description": "The class explores a variety of different teapot designs to consider how design choices or made and why. Using the teapots as an example, the class will explore the relationship between users, their needs, and the design of objects they use.",
        "overview": "To kick off a unit devoted to group problem solving and developing products for other users, students begin by investigating the design of various teapots. Students analyze each teapot, attempting to identify how specific user needs might have informed its design. By considering these design choices, and attempting to match each teapot with a potential user, students can begin to see how taking a user-centered approach to designing products (both physical and digital) can make those products more useful and usable. To conclude the activity, students are asked to propose some changes to one of the teapots that would make it more useful or usable.",
        "prep": "* Print a copy of [r exploring-design] for each student (or prepare to distribute the document digitally).\r\n"
    },
    "the-design-process/-1": {
        "cs_content": "This lesson builds on the previous by asking students to not only consider that there _is_ a user that products are designed for, but also empathize with those potential users. Throughout this unit, students will work to apply the problem solving process from Unit 1 to problems for other people. Empathy is a key element of this kind of user-centered design and a difficult skill for students at this age to master.\r\n",
        "description": "Using user profiles, the class explores how different users might react to a variety of products. Role playing as a different person, each member of the class will get to experience designs through someone else's eyes.",
        "overview": "Designers need to understand their users’ needs in order to create useful products.  This lesson encourages students to think about how to design for another person by role-playing as someone else using a user profile and reacting as that user to a series of products.  Each student is assigned a user profile describing a person, which they then use to choose appropriate products, critique product design, and suggest improvements to design.\r\n",
        "prep": "* Print out enough user profiles for all students, ensuring as much variety as possible\r\n* Print [r reacting-as-your-user] for each user\r\n* Prepare prompt questions for warm up exercise\r\n* Label four corners of the room as A, B, C, and D\r\n* Arrange room in table groups of 4, and place a number on each table group (1, 2, 3,...)\r\n"
    },
    "the-design-process/identifying-user-needs": {
        "cs_content": "Up to this point students have explored users and empathy at a distance - whether it's analyzing a user profile, brainstorming potential users and needs, or responding to written feedback from users. In this lesson we transition to a more direct interaction with users, through interviews.",
        "description": "Up to this point the users that the class has considered have all been remote, and the only information from users has come through text or role playing. Now the class will rely on each other as potential users, and pairs will get to interview each other to identify needs that could be addressed by developing an app.",
        "overview": "Up to this point students have focused on designing for users who are, to some degree, distanced from them. Whether through brainstorming, profiles, or text feedback, the connection to an end user has never been direct. This distance is designed to help students get outside their own head when thinking about users, but in order to get information more directly from an actual user, students need to rely on their classmates. In this lesson students pair up to become users (and designers) for each other, allowing everyone to directly interview their end user and ask questions to better inform their design. Each student pair interviews each other, attempting to identify a specific need that could be addressed by an app. ",
        "prep": "* Print one copy of [r user-interview] for each student\r\n* Print one copy of [r project-paper-prototype] for each student\r\n* Gather brainstorming materials (pens, sticky notes, etc)"
    },
    "the-design-process/project-paper-prototype": {
        "cs_content": "This lesson concludes the first chapter of Unit 4 and is an opportunity to showcase the skills student have developed. They will develop a user interface based on the needs of their classmate that they identified in the previous lesson. Additionally they practice getting user feedback by testing their paper prototype. In the next chapter students will continue to use many of these skills but will be programming their prototypes in App Lab.",
        "description": "Using the interview information from the previous lesson, the class comes up with app ideas to address the needs of their users. To express those ideas, and test out their effectiveness, each student creates and tests paper prototypes of their own.",
        "overview": "Based on the peer interview from the previous lesson, each student comes up with an idea for an app that will address their user's problem. Students then get to create their own paper prototype of their app ideas by drawing \"screens\" on individual notecards. A project guide directs students through the process including building the app and testing it with their user to see if their assumptions about the user interfaces they created are accurate.",
        "prep": "* Print one copy of [r project-paper-prototype] for each student if you have not already\r\n* Print one copy of [r paper-prototype-rubric] for each student\r\n* 6 notecards for each student\r\n* Drawing supplies (colored pencils, markers, rulers, etc.)\r\n* Poster paper for each student"
    },
    "the-design-process/test": {
        "cs_content": "This lesson introduces several skills that students will need to use later in the unit. They will learning to categorize feedback in order to organize and prioritize their response. They learn to interpret human needs with a piece of technology in terms of the changes to the user interface. They have their first opportunity to create a paper prototype of their own by designing a new screen of an app. As students move towards designing apps of their own from scratch these will be important skills that students use repeatedly.",
        "description": "Users have been testing an app, and they have lots of feedback for the developer. The class needs to sort through all of this feedback, identify the common themes and needs, and start revising the prototype to make it better meet the users' needs.",
        "overview": "In this lesson students use feedback from \"users\" of the paper-prototyped app from the previous lesson in order to develop improvements to the user interface of that paper prototype. The lesson begins with a reflection on the fact that designers need to translate human needs with technology into changes to the user interface or experience. Students are then given a collection of feedback and requests from users of the app from the previous lesson. In groups students categorize the feedback and identify ways the needs expressed in the feedback could be met by changes to the interface of the app. Then in groups students will implement some of these changes to meet one of the needs they identified.",
        "prep": "* Print one copy of [r paper-prototype-sample-feedback] for each group of 2 or 3\r\n* Print one copy of Improve a Screen for each student\r\n* Colored pencils or markers for the paper prototypes"
    },
    "the-design-process/user-centered-design-micro-activity": {
        "cs_content": "This micro activity is the first of three design projects in this unit. It is a fast-paced introduction to the user-centered design process, intended to give students an experience with user-centered design that they can build on in later projects. Certain shortcuts like speculating as to their user's needs rather than confirming them directly will be corrected as they complete more developed versions of this design process. In this lesson the primary goal is to establish that design decisions will be made with the user's needs in mind. The practice of categorizing lots of disparate ideas to help make decisions will also reappear later in the unit.\r\n\r\nThe activity in this lesson is an adaptation of the [Design Charrette from the University of Washington](http://www.hcde.washington.edu/research/archives#UCD-outreach).",
        "description": "In small groups, the class uses the design process to come up with ideas for smart clothing. From brainstorming, to identifying users, to finally proposing a design, this is the first of several opportunities in this unit to practicing designing a solution for the needs of others.",
        "overview": "This lesson guides students through an abbreviated version of the design process they will be seeing throughout this unit. Students first brainstorm a list of potential users of smart clothing. As a class, they then group these ideas into broad categories and each group will choose one category of user. Groups repeat this process to brainstorm needs or concerns of their user, eventually categorizing these needs and choosing one to focus on. Finally, students design a piece of smart clothing, using the specific needs and concerns they brainstormed to guide their decision making. At the end of the class students quickly share their decision-making process and get feedback on how well their product addresses the user need they selected.",
        "prep": "* Ensure you have plenty of sticky notes, pens and large poster paper for students to work on\r\n* Set up groups with preferably 3 students each"
    },
    "the-design-process/write-me": {
        "cs_content": "This lesson introduces students to the concept of a paper prototype as a quick and dirty tool to kick off the development of an app. Paper prototypes will return in both the next few lessons and the chapter two project as well. This prototype will also serve as the context around which students will start to parse and organize feedback from a wide variety of users. While this lesson asks students to work with an existing prototype, they will soon be developing prototypes of their own design.",
        "description": "See how a paper prototype can be used to test and get feedback on software before writing any code. To help out a developer with their idea, the class tests and provides an app prototype made of paper.",
        "overview": "Following the mini design project, students look towards the next phase of design - prototyping a product that attempts to address user needs. In teams, students examine a paper prototype for a chat app called \"Txt Ur Grndkdz\". Through using this paper prototype, students get a chance to see how a simple paper prototype can be used to quickly test ideas and assumptions before we ever get to the computer. After \"using\" the provided prototype students begin to identify ways to improve the next iteration.",
        "prep": "* Print one copy of the [r user-interface-screens] for each pair of students\r\n* Print one copy of the [r user-experience-computer] for each pair of students\r\n* Print one copy of the [r user-experience-user] for each pair of students\r\n* Cut out the UI Screens or provide scissors for students to do so themselves"
    },
    "the-problem-solving-process/articulating-a-problem-solving-process": {
        "cs_content": "This lesson aims to anchor the formal problem solving process students will use throughout the course in some real-life experiences they already have solving problems. Future units in CS Discoveries will present problems in contexts that may or may not be familiar. A structured problem solving process will be an important tool for helping students move forward in the face of novel and complex challenges.",
        "description": "This lesson introduces the formal problem solving process that the class will use over the course of the year, Define - Prepare - Try - Reflect.  The class relates these steps to the aluminum boats problem from the previous lesson, then a problem they are good at solving, then a problem they want to improve at solving. At the end of the lesson the class collects a list of generally useful strategies for each step of the process to put on posters that will be used throughout the unit and year.",
        "overview": "This lesson introduces the formal problem solving process that students will use over the course of the year, Define - Prepare - Try - Reflect. The lesson begins by asking students to brainstorm all the different types of problems that they encounter in everyday life. Students are then shown the four steps of the problem solving process and work together to relate these abstract steps to their actual experiences solving problems. First students relate these steps to the aluminum boats problem from the previous lesson, then a problem they are good at solving, then a problem they want to improve at solving. At the end of the lesson the class collects a list of generally useful strategies for each step of the process to put on posters that will be used throughout the unit and year.",
        "prep": "For each student \r\n\r\n* Print a copy of [r the-problem-solving-process]\r\n\r\nFor the class\r\n\r\n* Poster paper\r\n* Markers/colored pencils\r\n"
    },
    "the-problem-solving-process/exploring-problem-solving": {
        "cs_content": "This lesson provides students with more practice with the problem solving process in a variety of contexts. It highlights the fact that the problem solving process is particularly helpful when approaching poorly defined problems. The final brainstorm of the lesson provides students with some strategies and questions they can ask to better define problems for themselves, since this is often the most critical step. The problems seen in this lesson also help to drive a discussion in the following lesson about the types of problems that computers are well-suited to solve.",
        "description": "In this lesson the class applies the problem solving process to three different problems: a word search, a seating arrangement for a birthday party, and planning a trip. The problems grow increasingly complex and poorly defined to highlight how the problem solving process is particularly helpful when tackling these types of problems.",
        "overview": "In this lesson students apply the problem solving process to three different problems in order to better understand the value of each step. They will solve a word search, arrange seating for a birthday party, and plan a trip. The problems grow increasingly complex and poorly defined to highlight how the problem solving process is particularly helpful when tackling these types of problems. The lesson concludes with students reflecting on their experience with the problem solving process. They will justify the inclusion of each step and will brainstorm questions or strategies that can help them better define open-ended problems, as this is often the most critical step.\r\n\r\nThis lesson will likely take two class periods or more to complete. The first two problems may fit into a single class period but the third will need to be moved to a second day.",
        "prep": "* Print [r solving-problems] for each student\r\n* Spend a few minutes exploring [r rand-mcnally-trip-maker]\r\n* Scratch paper for the Birthday Party problem\r\n* Poster to record strategies for defining problems in wrap up discussion"
    },
    "the-problem-solving-process/intro-to-problem-solving": {
        "cs_content": "This lesson is a fun introduction to the open-ended, collaborative, and creative problem solving students will be using over the rest of this unit and course. The aluminum boats problem could easily be substituted out for any number of other problems that require students to define their goals, devise a plan, try a solution, evaluate their results, and then iteratively improve from there. The fact that the problem chosen is \"non-computational\" is intentional. Computer science is fundamentally a problem-solving discipline and staying away from traditional computer science problems at this points helps to frame this class as one about problem-solving more generally with computer science being a new \"tool\" to help attack certain types of problems. ",
        "description": "The class works in groups to design aluminum foil boats that will support as many pennies as possible.  At the end of the lesson groups reflect on their experiences with the activity and make connections to the types of problem solving they will be doing for the rest of the course. ",
        "overview": "In this lesson, students work in groups to design aluminum foil boats that will support as many pennies as possible. Groups have two rounds to work on their boats, with the goal of trying to hold more pennies than they did in round 1. The structure of the activity foreshadows different steps of the problem solving process that students will be introduced to in more detail in the following lesson. At the end of the lesson students reflect on their experiences with the activity and make connections to the types of problem solving they will be doing for the rest of the course.",
        "prep": "**For each group**\r\n\r\n* 2 sheets of aluminum foil, 5x5 inches in length each\r\n* 1 container that can hold 3-5 inches of water \r\n* Several paper towels or rags that can be placed under the container \r\n* 15 pennies\r\n* One copy of the [r aluminum-boats]\r\n\r\n**For the teacher**\r\n\r\n* 1 container that can hold 3-5 inches of water \r\n* 50 pennies \r\n* Extra paper towels or rags \r\n"
    },
    "the-world-of-big-data-and-encryption/check-your-assumptions": {
        "cs_content": "In this lesson we look deeper into why we separate the **what** from the **why** when looking at data.  The main purpose here is to raise awareness of the assumptions that we (all people) make when looking at data and try to call them out. Some of these assumptions lie hidden beneath the surface and we want to shed some light on them by looking at some examples from the news. This is a useful mode of reflection that will serve students well when doing reflective writing on the performance tasks.  \r\n\r\nAnalyzing and interpreting data will typically require some assumptions to be made about the accuracy of the data and the cause of the relationships observed within it. When decisions are made based on a collection of data, they will often rest just as much on that set of assumptions about the data as the data itself. Identifying and validating  (or disproving) assumptions is therefore an important part of data analysis. Furthermore, clear communication about how data was interpreted should also include an account of the assumptions made along the way.",
        "description": "Students examine the assumptions they make when interpreting data and visualizations by first reading a report about the \"Digital Divide\" which challenges the assumption that data collected online is representative of the population at large. Students also evaluate a series of scenarios in which data-driven decisions are made based on flawed assumptions.",
        "overview": "This lesson asks students to consider carefully the assumptions they make when interpreting data and data visualizations. The class begins by examining how the Google Flu Trends project tried and failed to use search trends to predict flu outbreaks. They will then read a report on the Digital Divide which highlights how access to technology differs widely by personal characteristics like race and income. This report challenges a widespread assumption that data collected online is representative of the population at large. To practice identifying assumptions in data analysis, students are provided a series of scenarios in which data-driven decisions are made based on flawed assumptions. They will need to identify the assumptions being made (most notably those related to the digital divide) and explain why these assumptions lead to incorrect conclusions."
    },
    "the-world-of-big-data-and-encryption/finding-trends-with-visualizations": {
        "cs_content": "The two main purposes of this lesson are:\n\n 1. Navigating and using a real data tool (Google Trends, see below) that is external to the course\n 2. Getting acquainted with talking and writing about data.  In particular we want to:\n    * Draw a distinction between describing **what** the data shows and describing **why** it might be that way\n    * In other words: describe connections and trends in data separate from drawing conclusions.\n    * We want students to get in the habit of separating the **what** from the **why** when it comes to talking and writing about data\n\nAs a bit of foreshadowing, the next lesson looks deeper into assumptions that people make about data that can lead to unintentional consequences and even exacerbate some of society's divisions.\n",
        "description": "Students use the Google Trends tool in order to identifying patterns in historical search data. Students present their findings, differentiating between explanations of what the data shows versus plausible explanations for discovered patterns. ",
        "overview": "Students use the Google Trends tool in order to visualize historical search data. They will need to identify interesting trends or patterns in their findings and will attempt to explain those trends, based on their own experience or through further research online. Afterwards, students will present their findings to ensure they are correctly identifying patterns in a visualization and are providing plausible explanations of those patterns.",
        "prep": "\r\n* Use the [Google Trends](https://www.google.com/trends/) tool to familiarize yourself."
    },
    "thursday/break": {
        "description": "Break",
        "short_title": "Break"
    },
    "thursday/break-1": {
        "description": "Break",
        "short_title": "Break"
    },
    "thursday/break-2": {
        "description": "Break",
        "short_title": "Break"
    },
    "thursday/break-3": {
        "description": "Break",
        "short_title": "Break"
    },
    "thursday/break-4": {
        "description": "Break",
        "short_title": "Break"
    },
    "thursday/break-5": {
        "description": "Break",
        "short_title": "Break"
    },
    "thursday/daily-reflection": {
        "cs_content": "Using scenarios as the center of the discussion participants will come back to directly thinking about the theme of the day: equitable classrooms. The comfort of their TLO room will hopefully give you another chance to dig deeper on supporting students in an equitable classroom.",
        "description": "Teachers are given time to process what they have been looking at and think how it connects to the values, teaching practices and core frameworks.",
        "overview": "Teachers are given time to process what they have been looking at and think how it connects to the values, teaching practices and core frameworks.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies and Prep:\n\n* [r thursday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* None"
    },
    "thursday/equity-unit-3": {
        "cs_content": "Reflect on the Gots and Needs from the previous day. Introduce the themes of the day.",
        "description": "Kick off the day with talking about equity which is one of the themes of the day.",
        "overview": "Kick off the day with talking about equity which is one of the themes of the day.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* Before day add the attendance link to the slides!\n* [r thursday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "thursday/lunch": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "thursday/lunch-1": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "thursday/recruitment-and-student-needs": {
        "cs_content": "Develop an actionable plan for recruiting diverse students and support students with diverse learning needs \n",
        "description": "All teachers from one region get together again to discuss recruitment and students needs.",
        "overview": "All teachers from one region get together again to discuss recruitment and students needs.",
        "prep": "Room Setup:\n\n* Participants will be in the room based on their region (same group as the day before). All CSP and CSD teachers from the region will be there. Ask that they sit in HOMOGENEOUS GROUPS(by curriculum)\n\nFacilitator Supplies and Prep:\n\n* [r thursday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Journal\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* For notes doc go through: [r teacher-daily-digest-and-master-notes]"
    },
    "thursday/tlo-6": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r thursday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Teaching Group: Activity guides for lesson\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "thursday/tlo-7": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r thursday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n* Projector\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "thursday/tlo-8": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r thursday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "thursday/unit-3-kick-off": {
        "cs_content": "Kick off Unit 3 by helping teachers see a little about what the unit is.",
        "description": "Teachers are introduced to Unit 3.",
        "overview": "Teachers are introduced to Unit 3.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies and Prep:\n\n* [r thursday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "thursday/unit-3-wrap-up-end-of-day-wrap-up": {
        "cs_content": "* Wrap up the themes of the day\r\n* Pulse check on teachers through gots and needs/survey",
        "description": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "overview": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* Check for session updates: [r facilitator-daily-digest]\n* [r thursday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* Computers\n* [r teacher-daily-digest-and-master-notes]\n\n"
    },
    "tuesday/6-12-facilitator-development-program": {
        "cs_content": "Give an overview of the training program we use to prepare facilitators for 6-12 workshops.",
        "description": "x",
        "overview": "x",
        "prep": "Room Setup:\n\n* Participants in tables of 4-5\n\nFacilitator Supplies:\n\n* [Slides- Hosting Academic Year Workshops on Normal Schedule](https://docs.google.com/presentation/d/148qG1Cg7042SR5lcGxn_oNFbFyqYQwsGuFBS0lQzPFM/edit#slide=id.g14d6c3396a_0_0)\n\nParticipant Materials:\n\n* Post-it notes\n* Paper/ Journal"
    },
    "tuesday/academic-year-workshops-normal-schedule": {
        "cs_content": "Regional partners gain a deeper understanding of academic year workshops and prepare to plan for those workshops for the coming year.",
        "description": "x",
        "overview": "x",
        "prep": "Room Setup:\n\n* Participants in tables of 4\n\nFacilitator Supplies:\n\n* [Slides- Hosting Academic Year Workshops on Normal Schedule](https://docs.google.com/presentation/d/148qG1Cg7042SR5lcGxn_oNFbFyqYQwsGuFBS0lQzPFM/edit#slide=id.g14d6c3396a_0_0)\n\nParticipant Materials:\n\n* Academic Year Workshops Scheduling Matrix\n* [Understanding Your Teacher Cohorts - Guide](https://docs.google.com/document/d/1t-EV8uvqAOljqHwzwhZkkS_-pob7k5qPkZ278uIMHX8/edit#heading=h.v8wvzisn22cb)\n* Example Academic Year Facilitator Workshop Agenda "
    },
    "tuesday/break": {
        "description": "Break",
        "short_title": "Break"
    },
    "tuesday/break-1": {
        "description": "Break",
        "short_title": "Break"
    },
    "tuesday/break-2": {
        "description": "Break",
        "short_title": "Break"
    },
    "tuesday/break-3": {
        "description": "Break",
        "short_title": "Break"
    },
    "tuesday/break-4": {
        "description": "Break",
        "short_title": "Break"
    },
    "tuesday/break-5": {
        "description": "Break",
        "short_title": "Break"
    },
    "tuesday/daily-reflection": {
        "cs_content": "Get teachers familiar with the forum and its purpose. Introduce \"Bug Reports\" and see where you could report a bug.\n",
        "description": "Teachers are given time to process what they have been looking at and think how it connects to the values, teaching practices and core frameworks.",
        "overview": "Teachers are given time to process what they have been looking at and think how it connects to the values, teaching practices and core frameworks.",
        "prep": "Room Setup:\r\n\r\n* Teachers in pairs\r\n\r\nFacilitator Supplies and Prep:\r\n\r\n* [r tuesday-teachercon-slide-deck]\r\n* [r csd-teachercon-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n* [r lesson-planning-guide]\r\n* [r cs-discoveries-curriculum-guide]\r\n* [r teacher-daily-digest-and-master-notes]"
    },
    "tuesday/hosting-local-summer-workshops": {
        "cs_content": "Regional partners think about important parts of running successful 5 day workshops during the summer.",
        "description": "x",
        "overview": "x",
        "prep": "Room Setup:\n\n* Participants in tables of 4\n\nFacilitator Supplies:\n\n* [Slides- Hosting Local Summer Workshop](https://docs.google.com/presentation/d/1gn_XBWgp-elXoK5WqfEAaruN6QhvTVToCAeFcypSyKs/edit#slide=id.g14f2686d27_3_904)\n\nParticipant Materials:\n\n* [Model Lesson 1 - CSD TeacherCon Agenda](curriculum.code.org/plcsd/teachercon/3/)\n* [Local Summer Workshop Process Doc](https://docs.google.com/document/d/1FQV4RD8egjVv5WUTaAlGDIt-vrmSHcsotAYiUrHw_Gs/edit?ts=5a79e294#heading=h.cf8vavchcdwa)"
    },
    "tuesday/lesson-planning": {
        "cs_content": "Creating a plan for how to teach the lesson during 40 minute period in the TLO session at TeacherCon.\r\n\r\n* Pick a Classroom Practice to Focus On\r\n* Write out a run of show\r\n* Make sure everyone in the teaching group has a role\r\n* Create additional materials needed (powerpoints, posters, etc)\r\n",
        "description": "Teachers will finish preparing to teach their TLO lesson by picking a classroom practice to focus on and creating a plan for delivering the lesson at TeacherCon.",
        "overview": "Teachers will finish preparing to teach their TLO lesson by picking a classroom practice to focus on and creating a plan for delivering the lesson at TeacherCon.",
        "prep": "Room Setup:\r\n\r\n* Everyone is sitting at a table with their lesson planning group from their TLO room.\r\n\r\nFacilitator Supplies and Prep:\r\n\r\n* [r tuesday-teachercon-slide-deck]\r\n* [r csd-teachercon-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r lesson-planning-guide]\r\n* Computers\r\n* [r cs-discoveries-curriculum-guide]\r\n* [r teacher-daily-digest-and-master-notes]\r\n\r\n"
    },
    "tuesday/lunch": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "tuesday/lunch-1": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "tuesday/model-lesson-3": {
        "cs_content": "* Set the tone for TLO sessions for the week\n* Demonstrate best practices with an plugged lesson\n* Demonstrate Web Lab\n* Demonstrate the first get on Code.org moment\n\n\n",
        "description": "Facilitators model a lesson from the curriculum. Teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "Facilitators model a lesson from the curriculum. Teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies and Prep:\n\n* [r tuesday-teachercon-slide-deck]\n* In slides but in case you need it: [r exemplar-text-website]\n* Printed Activity Guides to Hand Out\n* Decide which facilitator teaches the lesson\n* Facilitator who is teaching should have filled in the lesson planning guide for that lesson on page 25-27 of the [r csd-teachercon-facilitation-guide]\n* Decide which facilitator debriefs the lesson\n* Teaching Group Reflection Questions Card\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]\n"
    },
    "tuesday/philosophy-of-a-csd-classroom-unit-1": {
        "cs_content": "Reflect on the Gots and Needs from the previous day. Introduce the themes of the day.",
        "description": "Kick off the day with talking about the themes of the day: Classroom Practices and Unit 2.",
        "overview": "Kick off the day with talking about the themes of the day: Classroom Practices and Unit 2.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* Before day add the attendance link to the slides!\n* [r tuesday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "tuesday/teacher-retention-and-implementation": {
        "cs_content": "a",
        "description": "Room Setup:",
        "prep": "Room Setup:\r\n\r\n* Participants in tables of 4\r\n\r\nFacilitator Supplies:\r\n\r\n* [Teacher Retention and Implementation Slides](https://docs.google.com/presentation/d/1EhD8Yy0GEqB29Pcgv2YI_4RgOXE3v_oCWeNIjmtHboI/edit#slide=id.g14d6c3396a_0_0)\r\n\r\nParticipant Materials:\r\n\r\n* Scenarios"
    },
    "tuesday/tlo-1": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r tuesday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "tuesday/tlo-2": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r tuesday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* Teaching Group: Activity guides for lesson\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "tuesday/unit-1-wrap-end-of-day-wrap-up": {
        "cs_content": "* Wrap up the themes of the day\r\n* Pulse check on teachers through gots and needs/survey",
        "description": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "overview": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* [r tuesday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* Computers\n* [r teacher-daily-digest-and-master-notes]\n"
    },
    "turdunit/covering-our-bases-s-you-probably-already-know": {
        "description": "In this lesson we provide an annotated list of \"Essential Knowledge\" statements from the CS Principles framework that we think are obvious, not worth mentioning, actually not essential, and often not even knowledge.  We have this lesson so that we can claim we are \"covering\" these items somewhere in the curriculum, and we'd rather put them here than sprinkle them randomly into other lessons.  ",
        "overview": "In this lesson we provide an annotated list of \"Essential Knowledge\" statements from the CS Principles framework that we think are obvious, not worth mentioning, actually not essential, and often not even knowledge.  We have this lesson so that we can claim we are \"covering\" these items somewhere in the curriculum, and we'd rather put them here than sprinkle them randomly into other lessons.  \r\n\r\nTechnically each of these statements could be the basis for a multiple choice question on the AP Exam...but we doubt it."
    },
    "turdunit/dns-in-the-real-world": {
        "cs_content": "DNS (Domain Name Server) is a hierarchical system that translates domain names into IP addresses. At the top level of DNS are the root servers, which contain information for domains for such as .com or .org. By accessing the correct root, and looking at each of its branches, it is possible for the DNS to follow the branches down to second level and subdomains to find the appropriate IP address. A single DNS may not know all of the information necessary to find an IP address, but by asking other DNSes, it is able to find that information.\r\n\r\nThe DNS is an open standard protocol, which makes it vulnerable to security issues. These issues include DNS cache poisoning and DDoS attacks, among others. In DNS cache poisoning, DNS servers are given an incorrect IP address, thus routing anyone looking for that information to an incorrect website. DDoS attacks occur when a DNS server is sent too many requests at once and is unable to field all of them. This results in the DNS being unable to serve any request, essentially blocking the DNS from use.\r\n",
        "description": "Baker Note: this lesson is being merged into the previous one \"the Need for DNS\"\nIn this lesson, students identify the similarities between DNS and the postal service, focusing on their hierarchical structure. They then explore stories from the news about DNS and some of the vulnerabilities of the system. Students perform a jigsaw research activity by reading one article in a small group then changing groups and sharing their new knowledge with other students in the class. The articles should serve to help students begin thinking about the global impact of different protocols on the Internet by bringing current events to the classroom.",
        "overview": "# Baker Note: this lesson is being merged into the previous one \"the Need for DNS\"\r\n\r\nIn this lesson, students identify the similarities between DNS and the postal service, focusing on their hierarchical structure. They then explore stories from the news about DNS and some of the vulnerabilities of the system. Students perform a jigsaw research activity by reading one article in a small group then changing groups and sharing their new knowledge with other students in the class. The articles should serve to help students begin thinking about the global impact of different protocols on the Internet by bringing current events to the classroom.\r\n",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit2/lesson10)\r\n* Print copies of the Activity Guide\r\n* Read through articles in the Reading section below and choose a set for your class. Students should read in groups of 4-6, so not all articles are necessary.\r\n* Either print copies of articles for each group, or plan for students to read on computers."
    },
    "turdunit/encoding-numbers-in-the-real-world-1": {
        "cs_content": "When information is digitally represented, it’s encoded in binary and, therefore, takes the same fundamental form as any other type of information used in digital devices. This can mean that sending text can be reduced to the same process as sending a list of numbers. As we move to sending more complex information, the number of bits needed to represent that information increases and we start to realize that the size of the message is important.  As the number of bits increases, we need to introduce abstractions that allow us to move low-level details out of mind so we can focus on new higher-level problems. This will eventually lead us to a set of standard protocols that provide such abstractions. ",
        "description": "Baker NOTE: this lesson is deprecated - it is being merged with Lesson 11 (Sending Formatted Text)\nIn this lesson students will develop a protocol for encoding the characters of text message into bits. Their protocols can and should make use of the binary number system by assigning characters to numbers and then using the binary number system to make the final translation to bits.  Using the Internet Simulator, which will now perform the translation from numbers to bits, students will conduct short conversations using their protocol. The lesson concludes with a discussion of the reasons for developing a “standard protocol” for encoding text into bits.",
        "overview": "# Baker NOTE: this lesson is deprecated - it is being merged with Lesson 11 (Sending Formatted Text) \r\n\r\nIn this lesson students will develop a protocol for encoding the characters of text message into bits. Their protocols can and should make use of the binary number system by assigning characters to numbers and then using the binary number system to make the final translation to bits.  Using the Internet Simulator, which will now perform the translation from numbers to bits, students will conduct short conversations using their protocol. The lesson concludes with a discussion of the reasons for developing a “standard protocol” for encoding text into bits.",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit1/lesson10)"
    },
    "turdunit/invent-an-addressing-protocol": {
        "cs_content": "In this lesson students will invent two ideas central to the Internet and how it works: fixed-size numeric addresses for computers (IP addresses) and a structured “packet” that standardizes the bit layout for information you need to send.  Students will invent an addressing scheme and message (datagram) structure for playing Battleship, but these same ideas form a communication protocol that is very similar to real IP addresses and IPv4 packets that are used on the Internet.  \r\n",
        "description": "Building off the need for addressing messages that arose during the Battleship game activity, this lesson asks students to take time to invent a communication protocol and describe its binary encoding.  The challenge is to make the protocol efficient (in terms of number of bits required) and flexible (able to handle different situations).  Students discuss the requirements of an addressing protocol - minimally, the sender and recipient’s identifying information - perhaps including the size of the message, date sent, priority, etc. Students choose a number of bits for addresses and justify this choice with the maximum number of users this number of bits could support. Students also discuss why IP addresses must be of a fixed length. ",
        "overview": "Building off the need for addressing messages that arose during the Battleship game activity, this lesson asks students to take time to invent a communication protocol and describe its binary encoding.  The challenge is to make the protocol efficient (in terms of number of bits required) and flexible (able to handle different situations).  Students discuss the requirements of an addressing protocol - minimally, the sender and recipient’s identifying information - perhaps including the size of the message, date sent, priority, etc. Students choose a number of bits for addresses and justify this choice with the maximum number of users this number of bits could support. Students also discuss why IP addresses must be of a fixed length. \r\n",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit2/lesson3)\r\n* Poster paper or methods/materials for students to present"
    },
    "turdunit/testing": {
        "description": "asdf",
        "overview": "asdf"
    },
    "unit3/algorithms-detour-hard-problems-traveling-salesperson-problem": {
        "cs_content": "In this final algorithm detour, students are introduced to the Traveling Salesperson Problem, a classic problem in computer science for which there is no known algorithm to solve it, other than brute force.  The number of possible solutions grows extremely fast, even for small inputs, and quickly becomes “unreasonable” to solve, making it a computationally hard problem. The ideas of computationally hard problems are leveraged for encryption to make ciphers that take an unreasonable amount of time to crack (as in thousands of trillions of years), but computationally hard problems are also important in their own right. There are many problems for which we wish we had reasonable algorithmic solutions - especially in medical fields - and we’re still on the hunt to find them.  No one has yet mathematically proven whether or not the problems we currently think are “hard” actually are.\r\n",
        "description": "Students examine a well-known computationally hard problem in computer science, the Traveling Salesperson Problem (TSP). Students solve small instances of the problem, try to formulate algorithms to solve it, and discuss why these algorithms take a long time for computers (and humans) to compute.",
        "overview": "In this lesson, students examine a classic problem in computer science, the Traveling Salesperson Problem (TSP). Students solve small instances of the problem, try to formulate algorithms to solve it, and discuss why these algorithms take a long time for computers (and humans) to compute. Students see how the TSP grows in size much faster than the problem of adding characters to a password.  Even though we use encryption to motivate a desire to learn about computationally hard problems, they are valuable to know about, in and of themselves.  This lesson covers some territory about how we reason formally and mathematically about algorithms and figuring out how “hard” something is for a computer to do.\r\n",
        "prep": "* Note that Wrap-up for this lesson is more extensive than usual. Some preparation to familiarize yourself with the ideas is recommended.\r\n* (Optional) Copies of the Worksheet for each student"
    },
    "unit3/asymmetric-and-public-keys-cups-and-beans": {
        "cs_content": "Students have done encryption before, but those methods always required both parties knowing a secret key to encrypt and decrypt. A major problem that arises: how can two parties establish a secret key without meeting ahead of time?  If we can solve that problem, then we have a way for people (or computers) to establish keys over the Internet to enable secure transactions.\r\nPublic key cryptography does away with this problem by introducing asymmetric keys -- that is, the key to encrypt (which is public) is NOT the same key used to decrypt (which is private). In this way, messages can be sent between people who have never met before, and these messages can be shared publicly with a reasonable expectation of security. \r\nIn later lessons, students will learn to leverage computationally hard algorithms to make these messages essentially uncrackable.\r\n",
        "description": "This lesson introduces the concept of public key cryptography using the classic “Alice and Bob” scenario often taught in computer science classes. In this scenario, Alice and Bob are able to securely send messages to each other without having to come up with a shared secret key ahead of time. Students model this exchange using cups and beans, and send a “secret number” to a partner. Students learn that public key cryptography uses asymmetric encryption, which is why one key (the encryption key or “public key”) can be made completely public without compromising the security of encrypted messages.",
        "overview": "This lesson introduces the concept of public key cryptography using the classic “Alice and Bob” scenario often taught in computer science classes. In this scenario, Alice and Bob are able to securely send messages to each other without having to come up with a shared secret key ahead of time. Students model this exchange using cups and beans, and send a “secret number” to a partner. Students learn that public key cryptography uses asymmetric encryption, which is why one key (the encryption key or “public key”) can be made completely public without compromising the security of encrypted messages.",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit2/lesson18)\r\n* Paper and pencil\r\n* Plastic cups (preferably clear with lids) - 1 per group of 3 students\r\n* Infinite supply of beans (a bag of dried beans works well)"
    },
    "unit3/beyond-buttons-toward-apps": {
        "cs_content": "Modern applications support a variety of user interface elements and ways of interacting with them. Buttons, menus, sliders, toggles, and many other common elements can be clicked, swiped, pinched, typed on, and so on. **While the “look and feel” of applications continues to change rapidly, the underlying event-driven model has remained fairly constant:**\r\n\r\n* A user interacts with an element of the program, which generates an “event”\r\n* some “event handler” responds by running a piece of code. \r\n\r\nThis model neatly separates the appearance of an application from its underlying functionality.  Modern applications are often developed by teams of people with differing specializations: some members of a team might focus on designing the user interface while others concentrate on defining the backend functionality. In fact, though it may not be immediately obvious to students in this lesson, this is yet another instance in which abstraction is used to solve a problem. Event handlers can have many different events or elements substituted into them, and yet the underlying model will not be broken!",
        "description": "This lesson serves primarily as reinforcement of the event-driven programming mindset for students. Students will expand their understanding by experimenting with new event types and screen elements, combining these skills to make a simple “chaser” game. This lesson transitions away from using the turtle, as students explore different event types (e.g. “mouseover” and “mouseout”) and are introduced to other user interface elements they can add to their apps, like text labels and images. These new elements are introduced one at a time while building up to the “chaser” game. The last level allows students to modify the simple game.",
        "overview": "This lesson serves primarily as reinforcement of the event-driven programming mindset for students. Students will expand their understanding by experimenting with new event types and screen elements, combining these skills to make a simple “chaser” game. This lesson transitions away from using the turtle, as students explore different event types (e.g. “mouseover” and “mouseout”) and are introduced to other user interface elements they can add to their apps, like text labels and images. These new elements are introduced one at a time while building up to the “chaser” game. The last level allows students to modify the simple game.",
        "prep": "[Forum](http://forum.code.org/c/csp-unit3/lesson11)"
    },
    "unit3/canvas-and-arrays-in-apps": {
        "cs_content": "The study of computing is in many ways the study of information and the automation of processes to transmit, transform, and learn from that information. The combination of list data structures, like the JavaScript array, and loops allows for large amounts of information to be generated, maintained, and then transformed in useful and interesting ways. The patterns used to perform these processes are frequently quite similar, even across disciplines. By recognizing when and how to use arrays and loops to store and process information, a programmer can quickly solve problems and create things at a scale unimaginable without the power of computing.",
        "description": "Canvas Painter is a culminating project brings together processing arrays, functions with return values, and handling keystroke events. The app allows a user to draw an image while recording in an array every single x,y location the mouse passes over on the canvas. By processing this array in different ways, the image can be redrawn in different styles, like random, spray paint, and sketching.",
        "overview": "Students continue to practice working with arrays and are introduced to a new user interface element, the canvas. The canvas includes commands for drawing simple geometric shapes (circles, rectangles, lines) and also triggers mouse and key events like any other user interface element. Over the course of the lesson, students combine these features to make an app that allows a user to draw an image while recording every dot drawn on the canvas in an array. By processing this array in different ways, the app will allow students to redraw their image in different styles, like random, spray paint, and sketching. Along the way, students use their knowledge of functions with return values to make code which is easy to manage and reuse."
    },
    "unit3/compound-conditional-logic": {
        "cs_content": "Similar to the previous lesson, the primary objective here is *practice, practice, practice!*  We want students to get into the exercises and solve many different types of problems in many different types of contexts so they can pick up the patterns of writing, testing and debugging if-statements with more complex conditions.\r\n\r\nThis lesson introduces both the `if-else-if` construct and the Boolean operators AND, OR, and NOT. While it may appear that these operators extend the types of boolean conditions we can write, this is not actually the case. Nested and chained conditionals alone can be used to express any possible set of boolean conditions. The addition of these new boolean operators merely helps that expression be more succinct, clear, and elegant.  But logic can get tricky, since often the way we say things in English is not the way we need to write them in code.\r\n",
        "description": "Students are introduced to the boolean (logic) operators NOT, AND, and OR as well as the if-else-if construct as tools for creating compound boolean conditions in if statements.",
        "overview": "In this lesson, students will be introduced to the boolean (logic) operators NOT, AND, and OR as tools for creating compound boolean conditions in if statements. Students will learn how to more efficiently express complex logic using AND and OR, rather than deeply nested or chained conditionals.  Students will work through a worksheet that covers the basics and a few problems with evaluating logical expressions, then write code in App Lab to practice using && and || in if statements.  Finally, students will improve the Movie Bot so it can respond to multiple keywords and provide recommendations based on both the genre and rating provided by the user.",
        "prep": "* Decide whether to use Compound Conditionals worksheet. (Best to use *after* students have learned about `if-else-if` and Boolean Operators AND, OR and NOT).\r\n    * **Note:** The first page of the worksheet should be distributed separately.\r\n\r\n* Review code studio levels and associated teacher's notes."
    },
    "unit3/controlling-memory-with-variables": {
        "cs_content": "Developing a good mental model for how variables work in computer programs is absolutely essential to long-term success as a programmer.  However, because most students have had years’ worth of math classes before taking this course, there are two **major misconceptions** that early students often have about variables.  We suggest that you try to avoid relating this material to mathematics at all.  Some of the words and symbols are the same, but:\r\n\r\n* The = sign in programming is an instruction to store a value in memory, NOT a statement of equality.\r\n* “Variables” in computer programming are just named pieces of memory, NOT unknowns in an equation or symbols for undetermined values.\r\n\r\nThus, lines of code that assign values to variables and expressions that use variables are really instructions to retrieve and store values in memory.  And those values change while the program executes.  Being able to reason about what’s happening in consecutive lines of code like:\r\n\r\n      **a = a + b;**\r\n\r\n      **b = a + b;**\r\n\r\ncorrelates highly with a person’s success in programming because you must have a good mental model for program execution and what the computer is doing.\r\n",
        "description": "Students learn to create and assign values to variables and are navigated through common misconceptions.",
        "overview": "This lesson gets into the basic mechanics of working with variables in programs.  The lesson shows students how to create and assign values to variables and navigates through a series of common misconceptions about variables and how they work.  Along the way, the lesson tries to build up the student’s mental model of how computers and programs work, which is essential for being able to reason about programs.  \n"
    },
    "unit3/cracking-the-code": {
        "cs_content": "Encryption techniques that derive their security merely from the method of encryption being a secret are not actually secure. It is quite likely that patterns remaining in the ciphertext will reveal the structure of the plaintext and that eventually the original message will be retrieved. Strong encryption techniques instead are typically publicly known, but have mathematical properties which ensure that the original message cannot easily be retrieved. These techniques typically feature a secret “key” or piece of information that is used when encrypting the message. As long as the key remains a secret, then strong encryption techniques can only be discovered through an exhaustive search of all possible keys. Making an encryption technique public allows computer scientists to verify the security of the technique either through mathematical proof, or by trying to crack it themselves. Counter-intuitively, public techniques are often more secure, since they have been exposed to a much more rigorous review by the computer science community.\r\n",
        "description": "In this lesson, students crack the random substitution cipher, complete a short reading in Blown to Bits, and begin an exploration of the use of keys in encryption techniques through an exploration of the Vigenère cipher. Students will be provided a hands-on experience with the use of the mathematical tool of frequency analysis as a component of cipher cracking using the Frequency Analysis Tool. The reading and exploration of the Vigenère cipher present students with their first look at the components of strong encryption techniques, most notably the combination of publicly known encryption techniques with privately held keys for completing the encryption and decryption. Students will further explore this idea in the subsequent lesson.",
        "overview": "In this lesson, students crack the random substitution cipher, complete a short reading in Blown to Bits, and begin an exploration of the use of keys in encryption techniques through an exploration of the Vigenère cipher. Students will be provided a hands-on experience with the use of the mathematical tool of frequency analysis as a component of cipher cracking using the Frequency Analysis Tool. The reading and exploration of the Vigenère cipher present students with their first look at the components of strong encryption techniques, most notably the combination of publicly known encryption techniques with privately held keys for completing the encryption and decryption. Students will further explore this idea in the subsequent lesson.\r\n",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit2/lesson14)\r\n* (Optional) Paper copies of each Activity Guide\r\n* (Optional) Paper copies of *Blown to Bits*, pp. 169-170"
    },
    "unit3/current-events-the-securityprivacy-dilemma": {
        "cs_content": "This lesson serves two roles. 1. Review terminology about cybersecurity and crime that is relevant for the AP CS Principles Exam and 2. Practice research and writing skills that will help students on the Explore PT.  \r\n\r\nFollowing this lesson you may opt to either run the research activity in the next lesson or move on to running the full Explore PT with your class. Note that the Explore PT prep unit includes additional resources that will help students prepare for the task.",
        "description": "Students pick a type of cyber attack or cybercrime and do some “rapid research” to learn more about it. The lesson can be used to wrap up the unit or students may optionally complete the Practice PT in the following lesson before moving on to complete the Explore PT.",
        "overview": "Students learn about various types of cybercrimes and the cybersecurity measures that can help prevent them. Then students perform a Rapid Research project investigating a particular cybercrime event with a particular focus on the data that was lost or stolen and the concerns that arise as a result. The Rapid Research activity features vocabulary, concepts, and skills that should help prepare them for the AP Explore PT, and also serves as a capstone for the sequence of lessons on encryption and security.",
        "prep": "* Review the video\r\n* Review annotated responses to terminology at end of lesson for wrap up"
    },
    "unit3/cybersecurity-innovations": {
        "cs_content": "This lesson does not cover new CS content per se, though students might discover new and interesting things in their research. This lesson is an opportunity for students to synthesize their knowledge and understanding of Big Data, cybersecurity, cryptography, and computationally hard problems. The project asks students to tie their research into a topic in the news with vocabulary and concepts covered in this unit of study. For reference, vocabulary and topics from lessons in this unit include: \r\n\r\n* Big Data\r\n* Moore's Law\r\n* Encryption and Decryption\r\n* Symmetric v. Asymmetric Encryption\r\n* Computationally Hard Problems \r\n* Public Key Encryption",
        "description": "Students complete a small research project about a dilemma related to either Big Data or Cybersecurity. The project mimics elements of the Explore Performance Task.",
        "overview": "To conclude their study of big data and cryptography, students will complete a small research project related to a dilemma presented by Big Data or Cybersecurity, in the form of a Practice Performance Task. Students will pick one of two issues to research more deeply - either an issue related to big data, or one related to cybersecurity. Students will need to identify appropriate online resources to learn about the functionality, context, and impact of the technological innovation that gave rise to the dilemma they are investigating. After completing their research, students will present their findings both in a written summary and with an audio / visual artifact they found online. The written components students must complete are similar to those students will see in the AP Performance Tasks. \r\n\r\nThis project is an opportunity to practice many of the skills students will use when completing the Explore Performance Task on the AP® Exam at the end of the year. While an open-ended research project might be intimidating, students have built all the skills they need to complete this task. \r\n\r\n**Note:** This is NOT the official AP® Performance Task that will be submitted as part of the Advanced Placement exam; it is a practice activity intended to prepare students for some portions of their individual performance at a later time.\r\n\r\n**Note for 2017-18 School Year:** This Practice PT has NOT been updated to reflect changes to the [Explore PT Scoring Guidelines](https://apcentral.collegeboard.org/pdf/2018-explore-performance-tasks-sg.pdf) released in Fall 2017. We recommend you review those guidelines to understand the similarities between this project and the actual Explore PT.\r\n\r\n",
        "prep": "* Review the Practice PT"
    },
    "unit3/digital-assistant-project": {
        "cs_content": "Digital assistants are a class of problems that highlight the differences between what is easy for a computer to do and what is easy for a human.  While computers are good at abstract pattern recognition, they don’t have any deeper understanding of the meaning of what they’re responding to. In spite of this limitation, programmers can create a digital assistant that appears to understand and respond to human natural language. Both string manipulation and analysis of conditional expressions are key components of writing a successful digital assistant. ",
        "description": "Students will complete the digital assistant project in which they synthesize their abilities to write string functions and complex conditionals. In previous lessons students have been introduced to the skills necessary to complete this project while designing the Movie Bot. Students will now design a digital assistant of their own, identifying all keywords that will be referenced and outlining its conditional logic in a flowchart. Students will then implement their plan in order to create a fully functional, event-driven digital assistant.",
        "overview": "Students will complete the digital assistant project in which they synthesize their abilities to write string functions and complex conditionals. In previous lessons students have been introduced to the skills necessary to complete this project while designing the Movie Bot. Students will now design a digital assistant of their own, identifying all keywords that will be referenced and outlining its conditional logic in a flowchart. Students will then implement their plan in order to create a fully functional, event-driven digital assistant.\r\n\r\n**Note:** This activity **is not intended to be a Practice PT** but rather an opportunity to practice text processing and conditional logic. Suggestions for containing the scope of the project and amount of time allocated to it can be found in the lesson plan.",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit3/lesson21)\r\n* Print activity guides (see student documents).\r\n* Review the lesson plan to decide how many days of class time you want to use for this mini-project.\r\n"
    },
    "unit3/event-driven-programming-and-debugging": {
        "cs_content": "As event-driven applications get more complex, it is easy to generate errors in a program, and the need to debug the program will become more prevalent. In some instances, the error will be in the syntax of the program (e.g., a missing semicolon or misspelled function name). In other instances, however, programs will have logical errors which the computer will not catch and so can only be found by testing. Debugging and learning to interpret error messages is a critical step in the process of developing reliable software.  Learning about yourself and the types of mistakes you typically make is one aspect of getting good at debugging. Learning how to insert console.log statements into your code to display messages that give you insight into what your program is doing and when is also an important, universal technique of program development and debugging.",
        "description": "Students improve the chaser game by learning how to add multiple “screens” to an app and by adding code to switch between them. Students learn to use console.log to display simple messages for debugging purposes.",
        "overview": "Students continue learning about Event Driven programming in this lesson by learning how to add multiple \"screens\" to an app and adding code to switch between them. More techniques of debugging are presented, namely using `console.log`, a command that allows them to print out text which the user cannot see. It is useful for displaying messages to yourself to figure out what is happening as your program runs. Students will end the lesson by creating an improved version of the “chaser” game which has multiple screens. ",
        "prep": "* Review levels that explain concepts, decide if you would like to demonstrate them or have students read/do on their own."
    },
    "unit3/events-unplugged": {
        "cs_content": "This lesson is about a particular style of programming known as event-driven programming. To make apps in App Lab, it’s necessary to be in an event-driven mindset. Unlike “traditional” programs in which code is run in a sequential and predictable way, event-driven programs run blocks of code only when their associated events occur. Events might include a user clicking a button, another website sending data, or a repeated animation timer, the sequence of which is difficult if not impossible to predict. The code for responding to an event is called an “event handler” and is essentially a function that is called when a certain event occurs. The code in that event-handler function executes sequentially, but if the program is setup to handle many events, code in one event handler might be out of sync with code in another, or even cause conflicts. The interdependencies of event handlers can get tricky, and designing an event handler requires careful consideration of the asynchronous nature of the program. ",
        "description": "In this lesson, students participate in an activity in which they simulate many of the behaviors and challenges associated with “event-driven” programs. Synchronizing activity in an event-driven program can be a challenge since an “event,” such as a user clicking a button, an animation timer, or data returning from a remote database request, can happen at any moment and take unpredictable amounts of time. As the focus of the class switches to building interactive web applications in an event-driven way, students will no longer be able to directly control or predict the sequence in which their code will be run. The activity of the day is both an approachable introduction to event-driven programming and a shared experience on which students can call when thinking through future challenges they will encounter as they design event-driven programs.",
        "overview": "In this lesson, students participate in an activity in which they simulate many of the behaviors and challenges associated with “event-driven” programs. Synchronizing activity in an event-driven program can be a challenge since an “event,” such as a user clicking a button, an animation timer, or data returning from a remote database request, can happen at any moment and take unpredictable amounts of time. As the focus of the class switches to building interactive web applications in an event-driven way, students will no longer be able to directly control or predict the sequence in which their code will be run. The activity of the day is both an approachable introduction to event-driven programming and a shared experience on which students can call when thinking through future challenges they will encounter as they design event-driven programs.",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit3/lesson9)\r\n* Several decks of playing cards (1 deck for every 16 students)\r\n* See “Activity Setup” below\r\n"
    },
    "unit3/functions-with-return-values": {
        "cs_content": "The ability to return values is closely tied to the concept of scope. All variables declared within a function are in local scope and so will be removed once the end of the function is reached. As a result any useful information generated during that function will be lost. One solution to this problem is storing the value in a global variable, but this is generally considered bad programming practice. Global variables can be accessed by many functions and so reasoning about their logic requires considering the logic of all of those functions. Return values are a way to move information out of the local scope of a function without using a global variable. As a result a function call can be treated as if it were the type of data that a function returns, and it is up to the programmer to determine if or how it will be used.",
        "description": "Students learn to write functions that calculate and return values, first through an unplugged activity by playing Go Fish, then by practicing in Code Studio, and finally by writing functions that return values in a simple turtle driver app.",
        "overview": "In this lesson students are introduced to the **return** command and learn to write their own functions that return values. Students first complete a simple unplugged activity based on the game **Go Fish** to introduce the concept of a return value. They will then complete a short sequence of exercises in Code Studio, which introduces preferred patterns for writing functions that return values. At the end of the sequence, students write and use functions that return values in a simple turtle driver app.\n"
    },
    "unit3/identifying-people-with-data": {
        "cs_content": "While there are many potential benefits associated with the collection and analysis of large amounts of data, these advances pose a constant risk to our collective security and privacy. Large-scale data breaches mean that the details of our personal, professional, and financial lives may be at risk. In order to prevent personal data from being linked to an individual person, personally identifying information, such as name, address, or identification number, is often removed from publicly available data. Nevertheless, through the use of computational analysis, it is often possible to “re-identify” individuals within data, based on seemingly innocuous information. As more of our lives is digitized, questions of security and privacy become ever more prevalent. ",
        "description": "Students investigate some of the world’s biggest data breaches to get a sense for how frequently data breaches happen what kinds of data is lost or stolen.",
        "overview": "Students begin this lesson by investigating some of the world’s biggest data breaches to get a sense for how frequently data breaches happen within companies and organizations, and what kinds of data and information is lost or given up. Afterwards, students will use the Data Privacy Lab tool to investigate just how easily they could be uniquely identified with a few seemingly innocuous pieces of information. At the conclusion of the lesson, students will research themselves online to determine just how much someone could learn about them by conducting the same searches and “connecting the dots.”",
        "prep": "* Familiarize yourself with the external web sites and tools involved in this lesson."
    },
    "unit3/image-scroller-with-key-events": {
        "cs_content": "Most applications you use are not based on static pieces of code. Instead the software will be continuously updated both to correct errors and introduce new pieces of functionality. If later improvements are anticipated it is generally possible to develop programs in a way that easily incorporates new functionality. At other times it is necessary to make larger changes to the way a program operates in order to incorporate new features while maintaining existing functionality. Refactoring code in this way can be a tedious and challenging endeavor, but it helps ensure that the final product is consistent and easy to maintain. If software is not kept in a logical, consistent, and succinct form, then it will only get harder to keep introducing new features, increasing the likelihood of errors.",
        "description": "Students extend the My Favorite Things app to manage and display a collection of images instead of words. Students also learn to make the program respond to keys (left and right arrow) by using the \"event\" parameter that is created when an event is triggered.",
        "overview": "Students will extend the **My Favorite Things** app they built in the previous lesson so that it now manages and displays a collection of images and responds to key events. Students are introduced to the practice of refactoring code in order to keep programs consistent and remove redundancies when adding new functionality. As part of learning to use key events, students are shown that event handlers pass a parameter which contains additional information about the event. This lesson also serves as further practice at using arrays in programs."
    },
    "unit3/introducing-design-mode": {
        "cs_content": "Most modern applications are interactive, responding to when users click buttons, type in a textbox, tilt the screen, swipe between screens, etc. In every instance, the user’s action is generating some kind of event and the program responds by running an associated block of code. Programming a modern application is therefore typically an exercise in creating a user interface and then defining what will happen when the user interacts with that interface.\r\n\r\nThe \"event-driven\" mindset of programming can take a little getting used to.  Often when learning, you write sequential programs that run from start (usually the first line of the program) to the end, or to some point when the program terminates.  In an event-driven program your code must always be at the ready to respond to user events, like clicking a button, that may happen at any time, or not at all.  More complex event-driven programs require interplay and coordination between so-called \"event handlers\" - which are functions the programmer writes, but are triggered by the system in response to certain events.  \r\n\r\nThis lesson is a first step toward getting into this mindset. Certain high-level programming languages and environments are designed to make certain tasks easier for a programmer. Being able to design the user interface for an app using a drag-and-drop editor makes designing a stylish product much faster and easier.  App Lab has a way to make the User Interface elements quickly and easily, leaving your brain more free to think about how to write the event handlers. ",
        "description": "Students are introduced to Design Mode in App Lab, which allows students to easily design the User Interface (UI) of their apps and add simple event handlers to create a simple game.",
        "overview": "Students will be introduced to a new feature of App Lab: **Design Mode**. Design Mode allows students to easily design the User Interface (UI) of their apps using a drag-and-drop editor. Students learn how to create UI elements they have seen before such as images, text labels and buttons, but they will see many more options for styling these elements with colors, font sizes and so on.  Students also learn how to add **event handlers** - code that listens for and responds to user-events. Students also explore some common errors that come up in event-driven programming and will learn some important skills for debugging programs, chief among them being responding to error messages. Students end the lesson by creating the foundation of a simple \"chaser game\" which they will add onto in the next lesson.\n\n\n"
    },
    "unit3/introduction-to-arrays": {
        "cs_content": "Some sort of list data structure is a component of almost all programming languages. A list allows large amounts of information to be easily referenced and passed around a program, and the use of a numeric index allows individual items in a list to be accessed. Historically a list would have literally been a single contiguous chunk of memory and the index or address was used to know how far into that chunk a relevant piece of information was stored. In many modern languages, however, it is more likely that the items in an array are stored at many locations on your computer’s hard drive, and the index is only useful to help the programmer identify different components. In this way, a JavaScript array is actually another example of abstraction. We know that it is holding a list of related information, but we don’t need to think about the actual implementation details.\r\n\r\n",
        "description": "Students learn about arrays in JavaScript as a means of storing lists of information within a program. Students build a simple app, My Favorite Things, which stores and cycles through a list of words describing their favorite things.",
        "overview": "This lesson introduces arrays as a means of storing lists of information within a program. The class begins by highlighting the difficulties that arise when trying to store lists of information in a variable. Students then watch a short video introducing arrays and a subset of the operations that can be performed with them. Students will work in Code Studio for the remainder of the class as they practice using arrays in their programs. At the conclusion of the sequence, students build a simple app which can be used to store and cycle through a list of their favorite things. In the next lesson, students will continue working with a version of this app that can display images and not just text strings."
    },
    "unit3/introduction-to-conditional-logic": {
        "cs_content": "The algorithms students are developing in Movie Bot in this lesson are essentially just checking for the presence of keywords. True natural language processing algorithms are designed to detect a much more complex set of relationships between words, like their relative location or even how they are being used. Consider, for example, the sentence “I shot an elephant wearing my pants.” Even for a human being, there is grammatical ambiguity about whether you or the elephant is wearing the pants. As a result, developing programs that can truly “understand” language is an extremely complex undertaking. That said, the underlying principles are similar. Based on the contents of text input a (potentially long) sequence of conditional logic is executed in order to parse the meaning. The apps students develop in this lesson do the same thing, just on a much simpler level.",
        "description": "Having explored the basics of conditional statements in the previous lesson, students will return to the Movie Bot example they have been working on in order to improve its functionality with conditional logic. Through the addition of the “includes” function, the Movie Bot will be able to sense whether one of its keywords appears anywhere in the input text and respond accordingly. Nested conditionals will allow the program to provide a movie recommendation only when the input text is a question (i.e., includes a question mark). At the end of the lesson, students will brainstorm functionality they will want to add to their own digital assistants, based on their experience with the Movie Bot.",
        "overview": "Having explored the basics of conditional statements in the previous lesson, students will return to the Movie Bot example they have been working on in order to improve its functionality with conditional logic. Through the addition of the “includes” function, the Movie Bot will be able to sense whether one of its keywords appears anywhere in the input text and respond accordingly. Nested conditionals will allow the program to provide a movie recommendation only when the input text is a question (i.e., includes a question mark). At the end of the lesson, students will brainstorm functionality they will want to add to their own digital assistants, based on their experience with the Movie Bot.\r\n",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit3/lesson19)\r\n* Review **includes** function\r\n* Students will need a sheet of paper / journal etc. in which to record their ideas at the end of class.\r\n"
    },
    "unit3/introduction-to-digital-assistants": {
        "cs_content": "Natural Language Processing (NLP) is a field of computer science that refers to algorithms that process unstructured text. This includes both written and spoken text that is typically in human written/spoken format. It is technology that allows programs such as Siri to recognize your voice and respond to requests “intelligently.”\r\n\r\nSiri is one of a class of programs known as an “intelligent personal assistants” or “digital assistants.” These assistants are software agents that accept written or spoken commands and perform tasks for humans.",
        "description": "In this lesson, students will analyze digital assistants in order to understand the underlying key features of the natural language processing (NLP) algorithms that allow them to appear to have intelligent conversations. They will then begin to design the components of a simple digital assistant of their own, which they will be building over the subsequent lessons.",
        "overview": "In this lesson, students will analyze digital assistants in order to understand the underlying key features of the natural language processing (NLP) algorithms that allow them to appear to have intelligent conversations. They will then begin to design the components of a simple digital assistant of their own, which they will be building over the subsequent lessons.",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit3/lesson17)\r\n* Preload the [Introducing Siri]([r introducing-siri]) for the Getting Started activity"
    },
    "unit3/keys-and-passwords": {
        "cs_content": "Cryptography and encryption are important and far-reaching fields within computer science. This lesson begins to get students’ feet wet with the human side of cybersecurity: choosing good passwords through an exploration of the classic *Vigenère Cipher*. We also learn that the Vigenère cipher is actually susceptible to frequency analysis (though at first glance it is not) and in subsequent lessons we learn that better methods are used today. \r\n\r\nStrong encryption techniques are typically publicly known algorithms, but **have mathematical properties** which ensure that the original message cannot easily be retrieved. These techniques typically feature a secret “key” or piece of information that is used when encrypting the message.  While the algorithm can be publicly known, the secret key is not.  The art of encryption is coming up with an algorithm that 1) makes the message undecipherable without the key and 2) is such that the key should *only* be discoverable through an exhaustive search of all possible keys, rather than through some other analytical technique.\r\n\r\nIn this lesson we focus on making a good key, while in subsequent lessons we learn more about problems and algorithms that are **computationally hard.**  Guessing a random sequence of 200 characters, for example, is computationally hard, because there is no known way to approach the problem besides trying the trillions and trillions of possible character combinations.  \r\n",
        "description": "Students use a widget to experiment with the Vigenère cipher to learn about the relationship between cryptographic keys and passwords.",
        "overview": "In this lesson, students learn about the relationship between cryptographic keys and passwords.  Students explore the Vigenère cipher with a widget to examine how a cryptographic \"key\" can be used to encrypt and decrypt a message. Then, students use a tool that shows them about how long it would take to crack a given password using a standard desktop computer. Students experiment with what makes a good password and answer questions about the “human components” of cybersecurity.\n",
        "prep": "* Explore the Vigenere Cipher Widget in Code Studio\n* Familiarize yourself with the \"howsecureismypassword.net\" site.\n* (Optional) Print out worksheets (links in Code Studio)\n"
    },
    "unit3/loops-and-simulations": {
        "cs_content": "The ability to model and simulate real-world phenomena on a computer has changed countless fields. Researchers use simulations to predict the weather, the stock market, or the next viral outbreak. Scientists from all disciplines increasingly rely on computer simulation, rather than real-life experiments, to rapidly test their hypotheses in simulated environments. Programmers might simulate users moving across their sites to ensure they can handle spikes in traffic, and of course videogame and virtual reality technology is built around the ability to simulate some aspects of the real world. The speed and scale at which simulations allow ideas to be tested and refined has had far-reaching impact, and it will only continue to grow in importance as computing power and computational models improve.",
        "description": "Students make a simple computer simulation to model a coin flipping experiment that is possible, but unreasonable, to do by hand. Students write code that uses while loops to repeatedly \"flip coins\" (random number 0 or 1) until certain conditions are met.",
        "overview": "In this lesson, students gain more practice using **while** loops as they develop a simulation that repeatedly flips coins until certain conditions are met. The lesson begins with an unplugged activity in which students flip a coin until they get 5 heads in total, and then again until they get 3 heads in a row. They will then compete to predict the highest outcome in the class for each statistic. This activity motivates the programming component of the lesson in which students develop a program that allows them to simulate this experiment for higher numbers of heads and longer streaks.\n",
        "prep": "* Print a [r worksheet-flipping-coins] for each student.\r\n* A coin for every student or pair of students.\r\n"
    },
    "unit3/multi-screen-apps": {
        "cs_content": "This lesson is not heavy on new CS content.  It is primarily a time to reinforce programming skills in App Lab while quickly prototyping a simple event-driven application. The lesson does, however, fall at the intersection of the Big Ideas of **Creativity and Programming**. The fact that students will share ideas before programming their projects and will provide feedback using a peer rubric also mirrors some of the practices of collaboration that students can employ on the Create Performance Task.  \r\n\r\nAs for the project itself, it probably bears the closest resemblance to creating a \"computational artifact\" as outlined in the Explore Performance Task -- Creating something to communicate an idea non-textually.  \r\n",
        "description": "Students design and create a 4-screen app on a topic of their choosing. Students may collaborate with a classmate as a \"thought partner,\" similar to the recommendation for the Create Performance Task.",
        "overview": "This lesson gives students time to familiarize themselves with the process of making event-driven apps before we move on to deeper content.  They will design and create a (minimum) 4-screen app on a topic of their choosing. There are some other constraints on the project to help guide students in their thinking.  Students are also encouraged to do independent work, but alongside a \"coding buddy\" or \"thought partner\" to be a help along the way.\n\n**Note:** This activity **is not intended to be a Practice PT** but could be used similarly.  The aim is to give an opportunity to get comfortable with Design Mode and the structure of event-driven programming in a creative way.  Another goal is to intentionally build in an environment of informal collaboration, even when doing individual work. Suggestions for containing the scope of the project and amount of time allocated to it can be found in the lesson plan.\n",
        "prep": "* Print project planning guides (see student documents).\r\n* Review the lesson plan to decide how many days of class time you want to use for this mini-project.\r\n* Decide how peer review will work (anonymous or not).\r\n"
    },
    "unit3/one-way-functions-the-wifi-hotspot-problem": {
        "cs_content": "Modern encryption techniques are designed around a set of problems that are known to be computationally hard to solve. A computationally hard problem is one for which the number of possible solutions grows quickly (typically exponentially), and which requires a computer to check each possible solution, also called a brute force search. The Traveling Salesman problem is computationally hard, but it has the drawback that even the person who constructed the problem might not know the optimal solution. In other words, the creator also has to do a brute force search, just like everyone else. Some computationally hard problems, such as the one covered in this lesson, can easily be constructed so that the creator knows the solution, but they are still computationally hard for anyone else to solve. These problems are called one-way functions and are very useful for encryption, since all encryption is an attempt to create a one-way function.\r\n",
        "description": "Students explore another computationally hard problem - the “Wireless Hotspot Problem” (also know as the vertex cover or dominating sets problem) - to investigate the characteristics of a \"one-way function\": a problem which is easy to construct in such a way that you know the solution, but is computationally hard to solve.",
        "overview": "In this lesson, students continue their exploration of computationally hard problems as they investigate a one-way function, a problem which is easy to construct in such a way that you know the solution, but it is computationally hard to solve. Students will begin the lesson by trying to solve the “Wireless Hotspot Problem” (also know as the vertex cover or dominating sets problem) to experience first-hand the challenge of solving it. They will then be instructed on how easy it is to create such a problem and will practice doing so themselves. In the Wrap-up, students are introduced to the concept of a one-way function and consider why such problems might be useful tools when constructing methods of encryption. If it’s easy to create a problem that is hard for a computer (or human!) to solve, then perhaps it is possible to make truly secure encryptions.\r\n",
        "prep": "* Paper copies of both worksheets, one of each per student"
    },
    "unit3/practice-pt-create-your-own-app": {
        "cs_content": "A skill that programmers must develop is the ability to plan and execute a project from idea all the way through shipping of a product. Some of the best apps are new ideas brought on by the past work of a programmer themselves or other programmers.  In order to execute these new ideas programmers must identify the programming structures needed to implement their idea and create a project plan. Often there are deadlines on projects which require programmers to make choices about the top features which need to be in a release of a new product.   Finally, programmers must be able to express to others the work they have done to create their app.\r\n\r\n_AP® is a trademark registered and/or owned by the College Board, which was not involved in the production of, and does not endorse, this curriculum._\r\n",
        "description": "Students design an app based off of one they have previously worked on in the programming unit. Students choose the kinds of improvements they wish to make and write responses to reflection questions similar to those they will see on the AP® Create Performance Task.",
        "overview": "### Note - We recommend you skip this lesson. It has not been updated to match the 2018 Create PT Scoring Guidelines and its contents are now covered in the AP Create PT Prep Unit.\n\n*This lesson has been marked for deprecation. Never fear, many of the original contents (including an updated version of the Grumpy Cat exemplar) are now included in the AP Create PT Prep unit. Since some contents of this lesson may already have been used by students to create projects it will not be removed during the 2017-2018 school year.*\n\n*For any question about this please write in to support@code.org.*\n\n*Best, CSP Curriculum Team*\n\nTo conclude their introduction to programming, students will design an app based off of one they have previously worked on in the programming unit. Students will choose the kinds of improvements they wish to make to a past project in order to show their ability to make abstractions and implement complex algorithms. The project concludes with reflection questions similar to those students will see on the AP® Create Performance Task. Students can either complete the project individually or with a partner. Every student will need a collaborative partner with whom they will give and receive feedback. \n\n**Note:** This is NOT the official AP Performance Task that will be submitted as part of the Advanced Placement exam; it is a practice activity intended to prepare students for some portions of their individual performance at a later time.\n"
    },
    "unit3/practice-pt-propose-an-innovation": {
        "description": "[DEPRECATED] Practice PT - Propose an Innovation"
    },
    "unit3/privacy-abandoned": {
        "cs_content": "Many consumers are unaware, or lack a sophisticated understanding, of how information about us is being collected and tracked by the technology we use every day. This issue goes beyond instances when data is stolen from companies or organizations we willingly provide it to. Instead, using computational tools, our movements through the physical and virtual world are being automatically tracked, stored, and analyzed. Cookies in our browsers keep a record of our movements on the Internet. Companies trade access to free tools and apps for the rights to track the data we upload to them. Advertisers develop personalized profiles of potential customers to better target advertising. Governments monitor traffic across the Internet at scales unimaginable without the use of computers. Yet we live in a world that increasingly relies on these digital tools, services and products. Most companies make great efforts to balance the tradeoffs between utility and privacy, but the issues can be tricky and raise confounding ethical dilemmas. We must now grapple with a question of just how much we value our privacy, and whether it is even possible to maintain in a digitized world.",
        "description": "Students examine some of the economic concerns and consumer tradeoffs related to apps and websites that collect and track data about you in exchange for providing you a service free of cost.",
        "overview": "This lesson focuses on the economic and consumer concerns around apps and websites that collect and track data about you in exchange for providing you a service free of cost.  Often the quality of the service itself is dependent on having access to data about many people and their behavior. The main take-away of the lesson is that students should be more informed consumers of the technology around them.  They should be able to explain some of the tradeoffs between maintaining personal privacy and using innovative software free of cost.",
        "prep": "* Review the reading \r\n* Review the teaching tips related to group work\r\n"
    },
    "unit3/processing-arrays": {
        "cs_content": "There are many situations where we want to repeat a section of code a predetermined number of times. Although this can be done with a **while** loop by maintaining a variable to keep track of how many times the loop has executed, there are many small pieces to keep track of. The **for** loop consolidates all of those pieces - counter variable, incrementing, and boolean condition - onto one line. One of the most common uses of **for** loops in programming is to process arrays. for loops allow programmers to easily step through all the elements in an array. This basic pattern is at the core of many algorithms used to process a list of items. Whether you are looking to find a name in a list, find the closest store to your current location, or compute the total money in your account based on past transactions, a loop will probably be used at some point to access all the elements in a list.\r\n",
        "description": "In this is long lesson, students learn to use for loops to process lists (arrays) of data in a variety of ways to accomplish various tasks like searching for a particular value, or finding the smallest value in a list. Students also reason about linear vs. binary search.",
        "overview": "This lesson will probably take two days to complete.  It introduces students to algorithms that process lists of data. The students will do two unplugged activities related to algorithms and program some of them themselves in App Lab. The **for** loop is re-introduced to implement these algorithms because it’s straightforward to use to process all the elements of a list. The lesson begins with an unplugged activity in which students write an algorithm to find the minimum value in a hand of cards. Students then move to Code Studio to write programs that use loops and arrays. Students are shown how to use a **for** loop to visit every element in an array. Students use this pattern to process an array in increasingly complex ways. At the end of the progression, students will write functions which process arrays to find or alter information, including finding the minimum value - a problem they worked on in the unplugged activity.  Finally, an unplugged activity has students reason about linear vs. binary search and attempt to write pseudocode for a binary search.",
        "prep": "* Print [r activity-guide-minimum-card-algorithm]\r\n* Print [r activity-guide-card-search-algorithm] for each student.\r\n* Playing cards (or pieces of paper with numbers on one side)."
    },
    "unit3/public-key-cryptography": {
        "cs_content": "This is a fairly hefty lesson because the underlying ideas are subtly quite sophisticated.  It's worth noting that much of the material here - all but the highest level takeaways - are beyond the scope of what's covered on the AP exam.  Students need to know the basic public key encryption process, and what [v asymmetric encryption] is. For programming they need to know how the [v modulo] operation works. \r\n\r\nOur purpose here is to reveal some of the magic that happens every day on the Internet to enable secure transactions. To many the fact that encrypted messages can be sent between parties who have never met before is both taken for granted and opaque.  Our belief is that understanding how it works with some depth - getting to experiment with the mathematical principles that make asymmetric keys possible, and the resulting encryption hard to crack - is deeply satisfying.\r\n\r\nThe widget in the lesson **mimics the RSA encryption algorithm** (with smaller numbers and slightly easier mathematics).",
        "description": "In this big, multi-step lesson, students learn how the basic mechanics and underlying mathematical principles of public key encryption work. Public key encryption is the basis for most secure transactions on the internet.",
        "overview": "This is a big multi-part lesson that introduces the concept of public key cryptography which is an answer to the crucial question: *How can two people send encrypted messages back and forth over insecure channels (the Internet) without meeting ahead of time to agree on a secret key?*  In a nutshell, there are two main principles we want students to understand:\n\n1. The mechanics of communication with public key cryptography\n2. The basic mathematical principles that make it possible\n\nThe lesson gets at these two core ideas through a deliberate chain of thought experiments, demonstrations, activities and widgets. All parts are building blocks that lead to deeper understanding of how it works. \n",
        "prep": "This lesson will likely take two days to complete. Preparing for these activities the first time will take some time.  Once you've been through it once, the activities actually go quicker than you might expect.\r\n\r\nSuggested Prep for Day 1 (Steps 1-3)\r\n\r\n* Prepare the Cups and Beans demonstration (you need cups and beans)\r\n* Understand the modulo thought experiment with pictures of clocks\r\n* (Optional) Paper copies of \"multiplication + modulo\" activity guide\r\n\r\nSuggested Prep for Day 2 (Step 4 + wrap up)\r\n\r\n* Practice using the \"modulo clock\" \r\n* Practice and Prepare for the using and demonstrating the public key crypto widget"
    },
    "unit3/rapid-research-data-innovations": {
        "cs_content": "Being able to research modern computing innovations and gain insight into how those innovations are using data is a key skill of computer scientists.  This is the first lesson in which students are asked to look at how data is used in a modern computing innovation.  Students will learn to look at how data is used with an increasingly critical eye, but this lesson merely sets the table.  Having intuitions about how data is used, or how it’s not used, can improve one’s judgment about modern technology and other innovations that increasingly use, produce, and rely on massive amounts of data to do their work.  ",
        "description": "Students \"rapidly research\" a topic of personal interest and respond to questions about how that innovation produces, uses, or consumes data. ",
        "overview": "In this lesson students will conduct a small amount of research to explore a computing innovation that leverages the use of data.  Students will research a topic of personal interest and respond to questions about about how that innovation produces, uses, or consumes data.  The lesson is intended to give students practice with doing research of this nature and provides a small amount of scaffolding to help students figure out what to look for.\r\n\r\nThis lesson is intended to be a quick, short version of a performance task in which students rapidly do some research and respond in writing.  It might take 2 class days but should not take more. The goal is to generate ideas for exploration later when students complete the actual Explore PT later in the year."
    },
    "unit3/the-need-for-encryption": {
        "cs_content": "This lesson is the first in a series of lessons about cryptography and encryption.  “Encryption” is a process for transforming a message so that the original is “hidden” from anyone who is not the intended recipient. Encryption is not just for the military and spies anymore. We use encryption everyday on the Internet, primarily to conduct commercial transactions, and without it our economy might grind to a halt. \r\n\r\nThis lesson gives students a first taste of the kind of thinking that goes into encrypting messages in the face of computational tools. Computational tools dramatically increase the strength and complexity of the algorithms we use to encrypt information, but these same tools also increase our ability to crack an encryption. Developing strong encryption relies on knowledge of problems that are “hard” for computers to solve, and using that knowledge to encrypt messages.As a resource, you may wish to read all of Chapter 5 of *Blown to Bits*.  It provides social context which you may want to bring to your classroom.",
        "description": "Students are introduced to encryption and use a widget to attempt cracking Caesar and random substitution ciphers. ",
        "overview": "In this lesson, students are introduced to the need for encryption and simple techniques for breaking (or cracking) secret messages.  Students try their own hand at cracking a message encoded with the classic Caesar cipher and also a Random Substitution Cipher.  Students should become well-acquainted with idea that in an age of powerful computational tools, techniques of encryption will need to be more sophisticated.  The most important aspect of this lesson is to understand how and why encryption plays a role in all of our lives every day on the Internet, and that making good encryption is not trivial.  Students will get their feet wet with understanding the considerations that must go into making strong encryption in the face of powerful computational tools that can be used to crack it. The need for secrecy when sending bits over the Internet is important for anyone using the Internet. \n",
        "prep": "* Examine both versions of the widget"
    },
    "unit3/understanding-program-flow-and-logic": {
        "cs_content": "The main purpose here is *Practice, Practice, Practice*.  The lesson asks students to write if-statements in a variety of contexts and across a variety of program types and problem solving scenarios.\r\n",
        "description": "Students learn how to write and use if statements in JavaScript by debugging common problems, solving simple problems, or adding conditional logic into an existing app or game.",
        "overview": "In this lesson, students write `if` and `if-else` statements in JavaScript for the first time.  The concepts of conditional execution should carry over from the previous lesson, leaving this lesson to get into the nitty gritty details of writing working code.  Students will write code in a series of \"toy\" problems setup for them in App Lab that require students to do everything from debug common problems, write simple programs that output to the console, or implement the conditional logic into an existing app or game, like \"Password Checker\" or a simple Dice Game. The lesson ends with a problem requiring nested `if` statements to foreshadow the next lesson.",
        "prep": "* [Forum](http://forum.code.org/c/csp-unit3/lesson18)\n* Review student instructions in Code Studio (see below) along with teacher commentary.\n* (Optional) A copy of [r activity-guide-flowcharts]\n"
    },
    "unit3/user-input-and-strings": {
        "cs_content": "Strings are a feature of essentially every programming language, and they allow for variable-length pieces of text to be represented, stored, and manipulated. While a single string can be stored in a variable, it is worth noting that a string will typically use much more memory than a number. Numbers are typically stored in fixed-width 8-, 16-, 32-, or 64-bit chunks. ASCII characters require a single byte and so a string of 100 characters, short by most standards, would require 800 bits in order to be stored in memory. While “typed” programming languages require you to declare the size and type of a variable before you use them, in more dynamic programming languages, including JavaScript, this memory management is abstracted away.",
        "description": "Students develop a simple Mad Libs® app, learning to collect and process text strings as input from the user.",
        "overview": "In this lesson, students are introduced to the string data type as a way of representing arbitrary sequences of ASCII characters. They will use strings to accept input from a user as they work on mastering two new UI elements, the text input and the text area. Students combine these skills to develop a simple Mad Libs® app.\n\n_Mad Libs® is a trademark of the Penguin Group (USA) LLC., which does not sponsor, authorize or endorse this site._"
    },
    "unit3/using-variables-in-apps": {
        "cs_content": "This lesson is mostly a continuation and furthering of our understanding of variables and how they work.  There are many, many pitfalls and misconceptions about variables and how to use them in programs for the early learner.  Variables are often difficult to learn because they are not visual, they are abstract, and one must have a good mental model for what’s happening in the computer and with program instructions, in order to reason about the code and develop one’s own solutions to problems.\r\n\r\nThe topic and concept of variable scope is a big one in any programming language. However, since many languages do it differently, the concept of variable scope isn’t listed explicitly as a learning objective in the CSP framework.  As a concept, though, variable scoping is a form of abstraction - a programming language lets you create variables with as narrow or broad a scope as you need to program a certain task.  As a general practice, you usually want to create variables with the most narrow scope you can for the task at hand, since the other extreme - everything is global - can become unwieldy or hard to manage, and it doesn’t promote code reuse.\r\n",
        "description": "Students learn about global versus local variables, and use variables to track the score in a simple game.",
        "overview": "In this lesson, students add variables to two different exemplar apps to keep track of a score, or a count of some number of button clicks.  The major topic is **variable scope** and understanding the differences, benefits, and drawbacks, of using global versus local variables.  This lesson focuses more on using global variables, since in event-driven apps that’s what you need to keep track of data across multiple events.  \n\nThe very basics of a **simple if statement** are also presented in this lesson, mostly to highlight the difference between the = and == operators. Finally, students are asked to apply what they’ve learned about variables, scope, and if statements, to make their own “clicker” game modeled after one of the exemplars they saw during the lesson.",
        "prep": "* Decide whether you want to introduce the activity guide at the beginning of the lesson or the end.\r\n* Familiarize yourself with the Clicker Game and rubric, decide how to organize peer review.\r\n"
    },
    "unit3/what-is-big-data": {
        "cs_content": "[v Big data] is a big deal right now, both in the field of computer science and more broadly across fields and industries. Understanding the types of things that can be captured in data and anticipating the types of innovations or new knowledge that can be built upon this data is increasingly the role of the computer scientist. A first step toward understanding big data is a survey of how big data is already being used to learn and solve problems across numerous disciplines. The scale of big data makes it hard to “see” sometimes, and techniques for looking at, working with, and understanding data change once the data is “big.” Everything, from how it’s stored to how it’s processed to how it's visualized, is a little different once you enter the realm of big data.\r\n",
        "description": "Students are introduced to the concept of “big data,” where it comes from, what makes it “big,” and how people use big data to solve problems, and how much of their lives are “datafied” or could be.\r\n",
        "overview": "In this lesson, students are introduced to the concept of “[v big data],” where it comes from, what makes it “big,” and how people use big data to solve problems. Students are asked to consider how much of their lives are “datafied” or could be, and the teacher will show the projected growth of data in the world.  Students will then investigate a big data tool in pairs to evaluate the tool for its usefulness and investigate the source of the data used to make the tool. A key take-away from the lesson is that different considerations need to be made when trying to look at, use, or analyze tools that use big data. The world of big data is big, and we’ve only begun to figure out how to solve problems with it.\r\n\r\nThe lesson concludes with a brief introduction to the AP Explore Performance Task which students are recommended to complete at the end of the unit."
    },
    "unit3/while-loops": {
        "cs_content": "**while** loops are the most primitive type of loop. The for loop, which students used in a very basic form during turtle programming, is just a more specific case of a **while** loop. **while** loops repeat a set of steps until a certain condition is met. Thus, like conditional statements, **while** loops use boolean expressions to determine if they will run and how many times. One of the biggest problems a programmer can run into with a **while** loop is to create an infinite loop. There are a couple different defensive programming strategies introduced in this lesson to help prevent infinite loops. \r\n\r\n\r\n",
        "description": "Students are introduced to the \"while loop\" construct by first analyzing a flow chart and then by completing  a series of exercises in Code Studio. The \"while loop\" repeats a block of code based on a boolean condition.",
        "overview": "This lesson demonstrates how a slight manipulation of a conditional statement can allow for the creation of a new and powerful tool in constructing programs, a **while** loop. Students are introduced to a **while** loop by analyzing the flow chart of a conditional statement in which the \"true\" branch leads back to the original condition. Students design their own flowcharts to represent a real-world situation that could be represented as a **while** loop, and they learn how to recognize common looping structures, most notably infinite loops. Students then move to App Lab, creating a **while** loop that runs exactly some predetermined number of times. While learning about creating **while** loops, students will be introduced to many of the common mistakes early programmers make with **while** loops and will be asked to debug small programs.  They finally progress to putting if statements inside a while loop to count the number of times an event occurs **while** repeating the same action. This activity will recall the need for counter variables and foreshadows their further use in the following lesson.\t",
        "prep": "* Decide whether to use the flow charts activity or not\n    * Print an [r activity-guide-flowcharts-with-while-loops] for each student.\n* Review Levels in Code Studio"
    },
    "unit4v1/more-programming-with-khan-academy": {
        "description": "If your students would like to continue programming, try the introduction to JavaScript tutorials in Khan Academy!",
        "overview": "If your students would like to continue programming, try the introduction to JavaScript tutorials in [Khan Academy](https://www.khanacademy.org/computing/computer-programming/programming/drawing-basics/p/making-drawings-with-code#)!"
    },
    "unit6v1/tech-setup-your-ap-digital-portfolio-and-other-tools": {
        "cs_content": "This page will evolve and grow to contain tech resources and tips for things related to preparing documents and artifacts for the AP Performance Tasks.",
        "description": "Contains instructions for setting up and registering your AP Digital Portfolio - the website students need to use to upload the content and written responses for their Performance tasks.  It also contains suggestions and information about some of the other technical aspects of digital project submission such as how to make a PDF, how to capture video of your screen, and how to use the written prompt templates.",
        "overview": "Contains instructions for setting up and registering your AP Digital Portfolio - the website students need to use to upload the content and written responses for their Performance tasks.  It also contains suggestions and information about some of the other technical aspects of digital project submission such as how to make a PDF, how to capture video of your screen, and how to use the written prompt templates.",
        "prep": "* Make sure you have setup your class to use the AP Digital Portfolio. (Follow instructions here: [r teacher-guide-for-the-ap-digital-portfolio])\r\n* Familiarize yourself with how to make PDFs given your classroom environment\r\n* Decide how you want students to create the PDF for their code"
    },
    "unplugged/programming-unplugged-my-robotic-friends-relay": {
        "cs_content": "There are many important components to this lesson. Students will be able to run around and get their wiggles out while building teamwork, programming, and debugging skills. Teamwork is very important in computer science. While [r pair-programming-vid] is common, it is more common for computer scientists to work in teams. These teams write and debug code as a group rather than individuals. In this lesson, students will learn to work together while being as efficient as possible. \r\n\r\nThis activity also provides a sense of urgency that will teach them to balance their time carefully and avoid mistakes, but not to fall too far behind.",
        "description": "This activity will begin with a short review of \"My Robotic Friends,\" then will quickly move to a race against the clock, as students break into teams and work together to write a program one instruction at a time.",
        "overview": "This activity will begin with a short review of \"My Robotic Friends,\" then will quickly move to a race against the clock, as students break into teams and work together to write a program one instruction at a time.",
        "prep": "- Read [r my-robotic-friends-packet].\r\n- Locate a wide open space for this activity, such as the gym or outdoor field.\r\n- Print out one [r symbol-key] per group. This is \"code\" to be used.\r\n- [r paper-trapezoid-template] are provided if your class is not going to use cups.\r\n- Print out one set of [r stacking-cups-ideas] per group.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "unplugged/programming-unplugged-my-robotic-friends-relay-v2": {
        "cs_content": "There are many important components to this lesson. Students will be able to run around and get their wiggles out while building teamwork, programming, and debugging skills. Teamwork is very important in computer science. While [r pair-programming-vid] is common, it is more common for computer scientists to work in teams. These teams write and debug code as a group rather than individuals. In this lesson, students will learn to work together while being as efficient as possible. \r\n\r\nThis activity also provides a sense of urgency that will teach them to balance their time carefully and avoid mistakes, but not to fall too far behind.",
        "description": "This activity will begin with a short review of \"My Robotic Friends,\" then will quickly move to a race against the clock, as students break into teams and work together to write a program one instruction at a time.",
        "overview": "This activity will begin with a short review of \"My Robotic Friends,\" then will quickly move to a race against the clock, as students break into teams and work together to write a program one instruction at a time.",
        "prep": "- Read [r my-robotic-friends-packet].\r\n- Locate a wide open space for this activity, such as the gym or outdoor field.\r\n- Print out one [r symbol-key] per group. This is \"code\" to be used.\r\n- [r paper-trapezoid-template] are provided if your class is not going to use cups.\r\n- Print out one set of [r stacking-cups-ideas] per group.\r\n- Make sure each student has a [r think-spot-journal]."
    },
    "wednesday/barriers-and-unit-2-intro": {
        "cs_content": "Reflect on the Gots and Needs from the previous day. Introduce the themes of the day.",
        "description": "Kick off the day with talking about the theme of Community.",
        "overview": "Kick off the day with talking about the theme of Community.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* Before day add the attendance link to the slides!\n* [r wednesday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* Name Badge with TLO room on it\n* [r teacher-daily-digest-and-master-notes]"
    },
    "wednesday/break": {
        "description": "Break",
        "short_title": "Break"
    },
    "wednesday/break-1": {
        "description": "Break",
        "short_title": "Break"
    },
    "wednesday/break-2": {
        "description": "Break",
        "short_title": "Break"
    },
    "wednesday/break-3": {
        "description": "Break",
        "short_title": "Break"
    },
    "wednesday/break-4": {
        "description": "Break",
        "short_title": "Break"
    },
    "wednesday/break-5": {
        "description": "Break",
        "short_title": "Break"
    },
    "wednesday/community-and-pathway": {
        "cs_content": "Bring all teachers from a region together so they can share ideas about meeting the needs of their communities",
        "description": "All teachers and regional partners from a region get together to talk about how to build community and pathways in their area.",
        "overview": "All teachers and regional partners from a region get together to talk about how to build community and pathways in their area.",
        "prep": "Room Setup:\n\n* Participants will be in the room based on their region. All CSP and CSD teachers from the region will be there. Ask that they sit in MIXED GROUPS\n* _optional:_ post-its and chart paper for sharing out\n\nFacilitator Supplies and Prep:\n\n* [r wednesday-teachercon-slide-deck]\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Journal\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* For notes doc go through: [r teacher-daily-digest-and-master-notes]"
    },
    "wednesday/daily-reflection": {
        "cs_content": "See how to manage a class with students in it on Code.org sites. See what you can and can not do with the site.",
        "description": "Teachers are given time to process what they have been looking at and think how it connects to the values, teaching practices and core frameworks.",
        "overview": "Teachers are given time to process what they have been looking at and think how it connects to the values, teaching practices and core frameworks.",
        "prep": "Room Setup:\r\n\r\n* Teachers in pairs\r\n\r\nFacilitator Supplies and Prep:\r\n\r\n* [r wednesday-teachercon-slide-deck]\r\n* [r csd-teachercon-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n* [r lesson-planning-guide]\r\n* [r cs-discoveries-curriculum-guide]\r\n* [r teacher-daily-digest-and-master-notes]"
    },
    "wednesday/end-of-day-wrap-up": {
        "cs_content": "* Wrap up the themes of the day\r\n* Pulse check on teachers through gots and needs/survey",
        "description": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "overview": "Teachers reflect on the themes of the day.  Teachers also have time to share what they have learned and what they still want to learn more about.",
        "prep": "Room Setup:\n\n* Table tents on table with TLO room names\n* Teachers sitting with their TLO room\n* Leads circling near tables with TLO room to help with share outs\n* 2 Mobile Microphones\n* Projector\n* Speakers\n\nFacilitator Supplies:\n\n* Assign two facilitators to manage the microphone running during share outs\n* [r csd-teachercon-facilitation-guide]\n* [r wednesday-teachercon-slide-deck]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide]\n* Computers\n* [r teacher-daily-digest-and-master-notes]\n"
    },
    "wednesday/forum": {
        "cs_content": "See and use resources that are available through the curriculum for assessment (goal here is NOT to discuss individual assessment needs)",
        "description": "Teachers are introduced to the forum and get to try using it.",
        "overview": "Teachers are introduced to the forum and get to try using it.",
        "prep": "Room Setup:\r\n\r\n* Teachers in pairs\r\n\r\nFacilitator Supplies and Prep:\r\n\r\n* [r wednesday-teachercon-slide-deck]\r\n* [r csd-teachercon-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* Computers\r\n* [r lesson-planning-guide]\r\n* [r cs-discoveries-curriculum-guide]\r\n* [r teacher-daily-digest-and-master-notes]"
    },
    "wednesday/lunch": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "wednesday/lunch-1": {
        "description": "Lunch",
        "short_title": "Lunch"
    },
    "wednesday/tlo-3": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r wednesday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* Teaching Group: Activity guides for lesson\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "wednesday/tlo-4": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r wednesday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "wednesday/tlo-5": {
        "cs_content": "* Experience part of the curriculum\r\n* Practice teaching lessons from the curriculum\r\n* Discuss important aspects of teaching CS Discoveries in classrooms.",
        "description": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "overview": "A group of teachers teaches a lesson from the curriculum. The rest of the teachers participate in the lesson as students. After the lesson teachers discuss the lesson and look toward how they will implement it with students.",
        "prep": "Room Setup:\n\n* Teaching group at a separate table from the learners\n* Facilitators have space toward the back of the room to sit and observe\n\nFacilitator Supplies and Prep:\n\n* [r wednesday-teachercon-slide-deck]\n* Teaching Group Reflection Questions Card\n* [r csd-teachercon-facilitation-guide]\n\nTeacher Materials:\n\n* Computers\n* Teaching Group: Activity guides for lesson\n* [r cs-discoveries-curriculum-guide]\n* [r teacher-daily-digest-and-master-notes]"
    },
    "what-is-a-computer/app-exploration": {
        "cs_content": "In Chapter 1 of this unit, students learned the problem solving process. In Chapter 2, students learned how computers solve problems. At this point, students know that computers are information processing machines that can do four things with information: input, output, store, and process.  In this final lesson before the unit project, students choose between various types of input that may be needed to solve a particular problem and describe the processing and storage that a computer would do to produce the desired output.  This should prepare them to eventually design their own app to address a problem and explain how that app would work.",
        "description": "This lesson covers the input and output aspects of computers in a context that is relevant and familiar to students: apps. The class evaluates various web applications to analyze the specific problems that they were designed to solve, the inputs that they need to work, and the outputs they provide to users. The class concludes with observations of these apps as well as a teacher led discussion about the impact of apps on society. ",
        "overview": "This lesson reviews the input, output, storage, and processing aspects of a computer in a context that is relevant and familiar to students: apps. In pairs, students evaluate various smartphone applications to analyze the specific problems that they were designed to solve, the inputs that they need to work, and the processing that turns those inputs into the desired output. The class concludes with a discussion that connects the lesson to apps students are more familiar with. ",
        "prep": "* Print a copy of [r app-exploration-activity-guide] for each student"
    },
    "what-is-a-computer/app-proposal": {
        "cs_content": "This project combines the two major themes of Unit 1, problem solving, and the input-output-store-process model of a computer. This project ties both themes to a broader goal of identifying real world problems and finding ways to use technology to help solve them. Students collaborate in the creation of their app and also take part in a structured peer review process that they will see many more times throughout the course. This project should be a fun and creative experience as well, and gives students a chance to tie the field of computer science to their own interests and ambitions.",
        "description": "To conclude the study of the problem solving process and the input/output/store/process model of a computer, the class proposes apps designed to solve real world problems. This project is completed across multiple days and culminates in a poster presentation highlighting the features of each app. The project is designed to be completed in pairs though it can be completed individually.",
        "overview": "To conclude their study of the problem solving process and the input/output/store/process model of a computer, students will propose an app designed to solve a real world problem. This project will be completed across multiple days and will result in students creating a poster highlighting the features of their app that they will present to their classmates. A project guide provides step by step instructions for students and helps them organize their thoughts. The project is designed to be completed in pairs though it can be completed individually.",
        "prep": "* Print a copy of [r app-proposal-project] for each pair of students\r\n* Poster paper, pens, markers and other supplies for making posters"
    },
    "what-is-a-computer/inputs-and-outputs-1": {
        "cs_content": "In the previous lesson students were introduced to the input, output, store, and process model of a computer. Since this model of a computer is still fairly abstract, this lesson grounds it in the ways a computer actually input and output information.",
        "description": "In this the class students consider a number of computing devices to determine what types of inputs and outputs they use. Groups are assigned to a computing device and based on a teacher-provided definition of input and output, list the inputs and outputs of their device.  To conclude the lesson the class examines common activities they do on a computing device and select the inputs and outputs used for that activity from the chart.",
        "overview": "In this lesson students consider a number of computing devices to determine what types of inputs and outputs they use. Groups are assigned to a computing device and based on a teacher-provided definition of input and output, list the inputs and outputs of their device. Earlier in the activity students are prompted to focus on more obvious physical inputs and outputs (e.g. a keyboard as an input or a screen as an output) but later discussions lead students to consider less obvious examples (e.g. that a touch screen is both an input and output, or the fact that the Internet can serve as both input and output). Throughout the lesson the teacher records inputs and outputs that are identified on a T-Chart at the front of the room. To conclude the lesson students examine common activities they do on a computing device and select the inputs and outputs used for that activity from the chart.",
        "prep": "* Prepare copies of [r input-and-output]"
    },
    "what-is-a-computer/processing-information-unplugged": {
        "cs_content": "This lesson serves multiple roles. It is another opportunity for students to collaboratively problem-solve. The  main activity is a challenging problem that emphasizes the importance of testing solutions on multiple inputs, breaking down large problems, and iterative improvement. In sharing their solutions students see that there are many equally valid solutions to the same problem. These are features students will see in many of the problems they will encounter through the course.\r\n\r\nThis lesson also introduces the concepts of processing and algorithms. The definitions of processing and algorithms presented in this lesson are intentionally high-level. Students should understand that processing is whatever a computer does to turn inputs to outputs, and that using a computer to process information requires developing an algorithm that reliably does so. The goal of this lesson is NOT for students to understand and compare different classic sorting algorithms, or even necessarily to formalize their own. ",
        "description": "This lesson dives deeper into the concept of processing that was introduced as part of the definition of a computer.  Pairs work together to puta deck of cards in order, a form of processing information.  In the end, the class discusses what processing means within the context of solving information problems.",
        "overview": "Students complete two unplugged card sorting activities to explore the meaning of processing and its relationship to problem-solving. The first activity has few constraints and is used to introduce a high-level definition of processing. The next introduces more constraints that force students to develop an algorithm that will always successfully process the cards. Students iteratively develop, test, and share their algorithms with classmates. A wrap-up discussion has students reflect on the different types of problem-solving they used in these activities and the value of producing an algorithm to solve a problem.",
        "prep": "* Prepare one deck of cards for every 8 students, removing face cards. Pairs will need roughly 8 cards each.\r\n* Alternately, print and cut out the number cards [r csd-number-cards]. Pairs will need roughly 8 cards each.\r\n* Prepare one copy of [r card-sorting-algorithm] for each student\r\n"
    },
    "what-is-a-computer/storage-and-processing": {
        "cs_content": "This lesson serves many roles. It is centered around another collaborative problem-solving challenge which will continue to develop students' problem-solving skills. It completes students' exploration of the Input-Storage-Processing-Output model by providing two perspectives on the importance of storage. It builds upon the previous lesson where students learned that algorithms are structured ways that computers process information to solve a problem.\r\n\r\nAs with the previous lesson, the understandings of the computer science content addressed in this lesson are intentionally high-level. Students should understand that in order to process information at all, a computer must store it. Students aren't expected to understand the technical details of how this is achieved, or even consider the implications of this fact. In Unit 2 students will have more opportunities to think about the implications of their information being stored and published online, and in Unit 3 students will learn to use various means of storing information while developing programs.",
        "description": "This lesson focuses on the storage component of the definition of a computer, within the content of processing information. The class spends the majority of the lesson developing and sharing algorithms to process information, with an emphasis on how much storage is needed for any particular algorithm. The lesson concludes with a discussion of the importance of storage while processing information.",
        "overview": "Students explore the importance of storage within the Input-Storage-Processing-Output model of a computer. The warm-up activity asks students to reflect on the types of information they have seen computers store in the past, like documents, photographs, or videos. The unplugged main activity has students develop an algorithm to process a small pile of cards in search of specific cards within the deck. Constraints on how students can move the cards force them to consider the importance of storage even while they are processing the deck. The lesson concludes with a discussion of the two types of storage students saw in this lesson and the importance of storage while processing information.",
        "prep": "* Print copies of [r storage-and-processing]\r\n* Several decks of cards to share among the class\r\n* Packs of sticky notes or squares of paper"
    },
    "what-is-a-computer/what-is-a-computer": {
        "cs_content": "This lesson serves as a transition out of the first chapter of Unit 1 and into the second chapter. Up until now, students have considered the potential of computers as problem solving devices, but not established what a computer actually is.  In this lesson, students will consider different types of computers and that these computers input, store, process, and output information as part of the problem solving process. Upcoming lessons will dive much deeper into what an information problem looks like and how computers solve these problems.",
        "description": "In this lesson the class develops a preliminary definition of a computer. After brainstorming the possible definitions for a computer, the class works in groups to sort pictures into “is a computer” or “is not a computer” on poster paper and explain their motivations for choosing some of the most difficult categorizations.  The teacher then introduces a definition of the computer and allows groups to revise their posters according to the new definition.",
        "overview": "In this lesson students develop a preliminary definition of a computer. To begin the lesson, the class will brainstorm possible definitions for a computer and place the results of this brainstorm on the board. Next, students will work in groups to sort pictures into “is a computer” or “is not a computer” on poster paper. Groups will place their posters around the room and briefly explain their motivations for choosing some of their most difficult categorizations.  The teacher will then introduce a definition of the computer and allow students to revise their posters according to the new definition.\r\n",
        "prep": "**For each group** \r\n\r\n  * Print out copies of [r what-is-a-computer]. Note there are two sets of pictures in the document but each group only needs a single set.\r\n  * Scissors (if you will not have time to cut the pictures prior to class) \r\n  * Poster paper\r\n  * Markers or colored pencils \r\n  * Glue or tape to attach pictures \r\n"
    },
    "workshop/cs-discoveries-lesson-experience": {
        "cs_content": "Get a taste of what a CS Discoveries lesson is like.\n\nLesson adapted from CS Discoveries Unit 4 Lesson 4 (studio.code.org/courses/csd) .\n\n",
        "description": "A lesson demo from the CS Discoveries Curriculum.",
        "overview": "A lesson demo from the CS Discoveries Curriculum.",
        "prep": "* Before Workshop Prep:\n* Print one copy of the [r user-interface-screens] for each pair of participants\n* Print one copy of the [r user-experience-computer] for each pair of participants\n* Print one copy of the [r user-experience-user] for each pair of participants\n* **Cut out the UI Screens**\n"
    },
    "workshop/s": {
        "cs_content": "Give Administrators an overview of the CSP and CSD programs",
        "description": "Overview of the CS Principles and CS Discoveries curricula along with a brief introduction to the associated Professional Learning Program",
        "overview": "s",
        "prep": "NEED: \r\n\r\n- list of supplies \r\n- overview of what the facilitator should do to prep\r\n\r\nFacilitator Materials: \r\n[r admin-slides]"
    },
    "workshop/s-1": {
        "cs_content": "Get a taste of what a CS Principles lesson is like.\r\n\r\nLesson adapted from CSP Unit 2 Lesson 2 (studio.code.org/courses/csp) .",
        "description": "A lesson demo from the CS Principles Curriculum.",
        "overview": "A lesson demo from the CS Principles Curriculum.",
        "prep": "* Supplies:\r\n* Participants have at least 1 computer per 2 people\r\n* Slide Deck"
    },
    "workshop/s-3": {
        "cs_content": "s",
        "description": "s",
        "overview": "s",
        "prep": "s"
    },
    "workshop/s-4": {
        "cs_content": "s",
        "description": "s",
        "overview": "s",
        "prep": "s"
    },
    "workshop/s-5": {
        "cs_content": "s",
        "description": "s",
        "overview": "s",
        "prep": "s"
    },
    "workshop/scenarios": {
        "cs_content": "Using scenarios teachers will talk about common student needs that come in classes and how to deal with those needs.",
        "description": "Teachers look at common CS Discoveries scenarios and discuss strategies.",
        "overview": "Teachers look at common CS Discoveries scenarios and discuss strategies.",
        "prep": "Room Setup:\r\n\r\n* None\r\n\r\nFacilitator Supplies:\r\n\r\n* [r csd-q1-slides-template]\r\n* [r cs-discoveries-facilitation-guide]\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals"
    },
    "workshop/session-1": {
        "cs_content": "This is the time to come back together as a group and catch up on how things have been going on. This means sharing highlights but also making sure concerns are voiced.",
        "description": "Teachers share how things are going in their classrooms and voice questions they would like to talk about.",
        "overview": "Teachers share how things are going in their classrooms and voice questions they would like to talk about.",
        "prep": "Room Setup (using the supplies provided by regional partner):\r\n\r\n* See Workshop Room Setup on [Q1 Workshop Page](https://curriculum.code.org/plcsd/q1/)\r\n* Posters up for people to add post-its to as they come in\r\n* **“Where are we now”** - On a piece of chart paper or on the board create a histogram for teachers to add where they are in the curriculum. Reminder teachers to take out their teal books as a guide to unit progressions.\r\n* **Question Parking Lot** - For people to put up questions they have.\r\n \r\nFacilitator Supplies:\r\n\r\n* Your local copy of the [r csd-q1-slides-template]\r\n* Your local copy of the [r csd-q1-notes-template]\r\n* [r cs-discoveries-facilitation-guide]\r\n* [r cs-discoveries-facilitator-playbook]\r\n* Poster Paper (Regional Partner Provides)\r\n* Workshop Dashboard [Workshop Dashboard](https://studio.code.org/pd/workshop_dashboard/workshops)\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Journal (Should bring with them.)\r\n* Post-its"
    },
    "workshop/session-1-1": {
        "cs_content": "Overview of why Administrators should care about Computer Science ",
        "description": "50 minute session taking administrators through the key features and impacts of Computer Science",
        "overview": "Overview of why Administrators should care about Computer Science",
        "prep": "NEED: \r\n\r\n- list of supplies \r\n- overview of what the facilitator should do to prep\r\n\r\nFacilitator Materials: \r\n[r admin-slides]"
    },
    "workshop/session-1-2": {
        "cs_content": "p",
        "description": "Time",
        "overview": "Time",
        "prep": "P"
    },
    "workshop/session-2": {
        "cs_content": "Teachers have a chance to get familiar with the *activity* in lessons that are coming up.",
        "description": "Teachers get hands on with some of the activities for upcoming lessons.",
        "overview": "Teachers get hands on with some of the activities for upcoming lessons.",
        "prep": "Room Setup:\r\n\r\n* One sheet of chart paper per lesson demo’d, hung around the room \r\n\r\nFacilitator Supplies:\r\n\r\n* [r csd-q1-slides-template]\r\n* Decide which 3 lessons you are going to do for Teaching Tips Live (See Recommendations Below)\r\n* Chart Paper\r\n* Post-its\r\n\r\nTeacher Materials:\r\n\r\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\r\n* Laptops\r\n* Journals"
    },
    "workshop/session-3": {
        "cs_content": "Time for teachers to discuss assessment. Both what has worked well and what they have questions about. Then look toward future assessments and begin planning for that.",
        "description": "Teachers have time to discuss how assessment is going in their classroom and share some strategies. Teachers will then start looking at the Unit 2 project.",
        "overview": "Teachers have time to discuss how assessment is going in their classroom and share some strategies. Teachers will then start looking at the Unit 2 project.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* [r csd-q1-slides-template]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)"
    },
    "workshop/session-4": {
        "cs_content": "Teachers have had time to dive deep into one lesson and plan with a group for how they might teach it. In addition a whole group leaves with a list of strategies and ideas for teaching the lessons ahead.\r\n\r\n",
        "description": "Teachers work with a group to plan for teaching one of the upcoming lessons. Groups then share their ideas for future lessons so that everyone hears about strategies and things to keep in mind when planning future lessons.",
        "overview": "Teachers work with a group to plan for teaching one of the upcoming lessons. Groups then share their ideas for future lessons so that everyone hears about strategies and things to keep in mind when planning future lessons.",
        "prep": "Room Setup:\n\n* Sitting with the 3-4 people who signed up for the same lesson. Facilitators pass out the remaining lesson/activity questions to the group that will explore that lesson\n\nFacilitator Supplies:\n\n* [r csd-q1-slides-template]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Laptops\n* Lesson plans\n* Journals\n* Post-its with questions from TTL session"
    },
    "workshop/session-5": {
        "cs_content": "Teachers are reminded of what is in Unit 3 and start thinking ahead about how the stuff they are doing currently connects to that unit.",
        "description": "Review what is in Unit 3. Take a look at the activities in one lesson in that unit. Think about how the previous units connect to Unit 3.",
        "overview": "Review what is in Unit 3. Take a look at the activities in one lesson in that unit. Think about how the previous units connect to Unit 3.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* [r csd-q1-slides-template]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n"
    },
    "workshop/session-5-1": {
        "cs_content": "This session gives facilitators flexibility to address specific needs of teachers in their regions. \r\n\r\nIn addition it should give time to do the survey in person so that teachers complete it before leaving.",
        "description": "Teachers have time to discuss lingering questions and then wrap up the day.  Teachers will also take the end of workshop survey.",
        "overview": "Teachers have time to discuss lingering questions and then wrap up the day.  Teachers will also take the end of workshop survey.",
        "prep": "Room Setup:\n\n* None\n\nFacilitator Supplies:\n\n* [r csd-q1-slides-template]\n* Decide how you want to use the unconference time: \n* Do you want to use it for something region specific?\n* Have teachers generate topics of interest to discuss? \n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Computers"
    },
    "workshop/teaching-tips-live-qa": {
        "cs_content": "Having just gone through 3 activities from upcoming lessons teachers have time to discuss the activities and the questions they have about them. There will be time later in the day to focus on lesson planning for these lessons so this is a time to mostly get out questions about the lesson and clarify the activity itself.",
        "description": "Teachers discuss questions about the activities they tried out during the Teaching Tips Live session.",
        "overview": "Teachers discuss questions about the activities they tried out during the Teaching Tips Live session.",
        "prep": "Room Setup:\n\n* Keep up the one sheet of chart paper per lesson demoed, hung around the room \n\nFacilitator Supplies:\n\n* [r csd-q1-slides-template]\n* [r cs-discoveries-facilitation-guide]\n\nTeacher Materials:\n\n* [r cs-discoveries-curriculum-guide] (Should bring with them. If they have lost it direct them to the digital version: bit.ly/csd-teal-book)\n* Laptops\n* Journals\n* Chart Paper\n* Post-its"
    }
}
